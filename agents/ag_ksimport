#!/usr/bin/perl

use ycp;
use diagnostics;

use strict;
use Getopt::Long;


y2milestone ("ag_ksimport started");

# read the agent arguments
#$_ = <STDIN>;
# no input at all - simply exit
#exit if ! defined $_;



while ( <STDIN> )
{
    my ($command, $path, $argument) = ycp::ParseCommand ($_);
    if ($command eq "Read" )
    {
	y2milestone( "Importing:", $argument );

	my   $ks    =  $argument;
	my    %result;

	my %partitioning = ();
	
	open (KS, "< $ks");

	while (<KS>) {
	    chop;
	    if (m/install/) {
		$result{'mode'} = "install";
	    }
	    elsif (m/^part.*/) {
		my $part = $_;	
		
		@ARGV = split(/ / , $part);	
		my %h = ();
		GetOptions (\%h, 
			    'size=i',
			    'fstype=s', 
			    'grow',
			    'recommended', 
			    'noformat',
			    'onpart=s',
			    'ondisk=s',
			    'asprimary',
			    'start=i',
			    'end=i',
			    'maxsize=i',
			    'badblocks',
			    'bytes-per-inode=i'

			    );
		$partitioning{$ARGV[1]} = \%h;
	    }
	    elsif (m/^rootpw.*/) {
		my $rootpw = $_;
		my %users = ();

		@ARGV = split(/ / , $rootpw);

		my %h = ();

		GetOptions (\%h,
			    'iscrypted'
			    );
	
		my $password ;
		my $iscrypted = 0;

		if (!exists($h{'iscrypted'})) {
		    $password = $ARGV[1];
		} else {
		    $password = $ARGV[1];
		    $iscrypted = 1;
		}
		$users{'username'}= "root";
		$users{'password'}= $password;
		$users{'íscrypted'}= $iscrypted;

		$result{'users'} = \%users;
	    }
	    elsif (m/^auth.*/ || m/authconfig.*/) 
	    {
		my $auth = $_;		
		@ARGV = split(/ / , $auth);
		my %h = ();
		GetOptions (\%h,
			    'useshadow', 'enableshadow',
			    'enablemd5',
			    'enablenis', 'nisdomain=s', 'nisserver=s',
			    'enableldap', 'enableldapauth', 'ldapserver=s', 'ldapbasedn=s',
			    'enableldaptls', 
			    'enablekrb5', 'krb5realm=s', 'krb5kdc=s', 'krb5adminserver=s',
			    'enablehesiod', 'hesiodlhs=s', 'hesiodrhs=s',
			    'enablesmbauth', 'smbservers=s', 'smbworkgroup=s',
			    'enablecache');	
		$result{'auth'} = \%h;
		
	    }
	    elsif  (m/^bootloader.*/ || m/^lilo.*/) 
	    {
		my $bootloader = $_;		
		@ARGV = split(/ / , $bootloader);
		my %h = ();
		GetOptions (\%h,
			     'append=s', 'location=s', 'useLilo', 'lba32',
			    'password=s', 'md5pass=s', 'linear', 'nolinear',
			    'upgrade');
		
		$result{'bootloader'} = \%h;
	    }
	    elsif (m/^clearpart.*/) {
		my $input = $_;		
		@ARGV = split(/ / , $input);
		my %h = ();
		GetOptions (\%h,
			    'linux', 'all', 'drives=s',
			    'initlabel'
			    );
		
		$result{'clearpart'} = \%h;
	    }
	    elsif (m/^network.*/) {
		my $input = $_;		
		@ARGV = split(/ / , $input);
		my %h = ();
		GetOptions (\%h,
			    'bootproto=s', 'ip=s', 'netmask=s', 'gateway=s', 'nameserver=s',
			    'nodns', 'device=s', 'hostname=s'
			    );
		
		$result{'network'} = \%h;
	    }	    
	    
	}
	$result{'partitioning'} = \%partitioning;

	close KS;
	ycp::Return ( \%result );

	
    }
    else
    {
	y2error ("Unknown instruction $command or argument: ", ref ($argument));
	ycp::Return ("false");
    }
    print "\n";
  
}

#EOF
