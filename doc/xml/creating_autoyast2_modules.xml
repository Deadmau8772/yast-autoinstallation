<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"[]>

  <article>
  <articleinfo>    
    <title>&ay; Configuration Management System</title>
    <author>
      <firstname>Anas</firstname>
      <surname>Nashif</surname>
    </author>
    <author>
      <firstname>Uwe</firstname>
      <surname>Gansert</surname>
    </author>
  </articleinfo>
  <section>
    <title>Introduction</title>
    <para>
      The plugin-like design of &ay; has the following advantages:
    </para>
    <itemizedlist>
      <listitem>
	<para>
	  A new run-time module can be integrated automatically in &ay;.
	  New features in &yast; mean new features in the auto-installer.
	</para>		  
      </listitem> 
      <listitem>
	<para>
	  Only installed run-time modules are offered and used to automatically install
	  the system. This allows the integration of special run-time modules which are
	  only present on business products, for example.
	</para>
      </listitem>
      <listitem>
	<para>
	  Code relevant to one run-time configuration module is kept in one place
	  instead of maintaining it in different modules.<remark>emap 2011-11-05: This makes no sense. If the code is only relevant to one module, why should it be stored in different places?</remark>
	</para>
      </listitem>
    </itemizedlist>      
  </section>
  <section>
    <title>The Run-time Module Interface in &ay;</title>
    <para>The new interface (aka _auto.ycp client) is similar to the &yast; proposal
      structure and consists of functions that can be accessed using arguments. All the dialog code has been moved to
      &ay; to simplify and align the user interface for all modules in the &ay; configuration system.
    </para>
    <para>
      The interface of a run-time configuration module in &ay; has the follwoing
      components:	
    </para>
    <itemizedlist>
      <listitem>
	<para>
	  <emphasis>Summary Area</emphasis>: Contains a summary of the configuration with the respective settings. If values where not configured, the phrase
	  <emphasis>'Not configured yet'</emphasis> is used.
	</para>
      </listitem>
      <listitem>
	<para>
	  <emphasis>Configuration Button</emphasis>: A button which calls the module in auto mode
	  (<emphasis>&lt;module name&gt;_auto.ycp</emphasis>).
	</para>	  
      </listitem>
      <listitem>
	<para>
	  <emphasis>Reset Button</emphasis>: A button for resetting the
	  configuration data. This will only delete data in the running module.
	</para>
      </listitem>
    </itemizedlist>
    <para>
      The data in the summary area is provided by the <emphasis>Summary</emphasis> function in the
      module controlling the configuration (i.e
      <emphasis>NIS::Summary()</emphasis> in the NIS package).
    </para>      
  </section>
  <section>
    <title>Run-time Modules in <emphasis>Auto</emphasis> Mode</title>
    <para>
      The &lt;module name&gt;_auto.ycp client accepts two arguments:
    </para>
    <itemizedlist>
      <listitem>
	<para>
	  Function,
	</para>
      </listitem>
      <listitem>
	<para>
	  Configuration Data.
	</para>
      </listitem>      
    </itemizedlist>
    <para>The following functions are needed for any module to work in &ay;:</para>
    <itemizedlist>
      <listitem>
	<para>
	  <emphasis>Import:</emphasis></para>
	<para>
	  Imports existing data into the module, usually done only once at the beginning.
	</para>
      </listitem>
      <listitem>
	<para>
	  <emphasis>Summary:</emphasis></para>
	<para>
	  Provides a brief summary of the configuration.
	  Calls &gt;Module&lt;::Summary()
	</para>
      </listitem>
      <listitem>
	<para>
	  <emphasis>Reset:</emphasis></para>
	<para>
	  Resets the configuration. It returns empty values, but can also return
	  default values, depending on the module.
	</para>
      </listitem>
      <listitem>
	<para>
	  <emphasis>Change:</emphasis></para>
	<para>
	  Starts the widget sequence.
	</para>
      </listitem>
      <listitem>
	<para>
	  <emphasis>Write</emphasis></para>
	<para>
	  Writes the configuration without displaying any widgets or popups
	  and without restarting any services, etc.  Calls
	  &lt;Module&gt;::Write (and sets &lt;Module&gt;::write_only true).
	</para>
      </listitem>
      <listitem>
	<para>
	  <emphasis>Export:</emphasis></para>
	<para>
	  Returns the current configuration, calls &lt;Module&gt;::Export.
	</para>
      </listitem>     
      <listitem>
	<para>
	  <emphasis>Packages:</emphasis></para>
	<para>
	  Returns a map with two key-value pairs. The first key is
	  <emphasis>install</emphasis>, which has a list as value. The list
	  contains packages that are needed for the service configured by the
	  module to work. This can be a static list of packages or a dynamic
	  list depending on the configuration. The second key is
	  <emphasis>remove</emphasis>. Its value contains packages that should
	  be removed to avoid conflicts with other packages. These packages
	  are normally determined dynamically, depending on the configuration.
	</para>
	<para>
	  The function can either return a map or it can call a module
	  function &lt;Module&gt;::AutoPackages().
	</para>
      </listitem>      
    </itemizedlist>
    
    <para>
      The following example shows &lt;module name&gt;_auto.ycp with the changes
      needed for the new behavior. 
    </para>
    <example>
      <title>XXpkgXX_auto.ycp (XXpkgXX = module name)</title>
      <programlisting>
	<![CDATA[
	/**
	* @param function to execute
	* @param map/list of XXpkgXX settings
        * @return map edited settings, 
        * Summary or boolean on success depending on called function
	* @example map mm = $[ "FAIL_DELAY" : "77" ];
	* @example map ret = WFM::CallFunction ("XXpkgXX_auto", [ "Summary", mm ]);
	*/

	{

	textdomain "XXpkgXX";

	y2milestone("----------------------------------------");
	y2milestone("XXPkgXX auto started");

	import "XXPkgXX";
	include "XXpkgXX/wizards.ycp";

	any ret = nil;
	string func = "";
	map param = $[];

	/* Check arguments */
	if(size(Args()) > 0 && is(Args(0), string)) {
	func = WFM::Args(0);
	if(size(Args()) > 1 && is(Args(1), map))
	param = WFM::Args(1);
	}
	y2debug("func=%1", func);
	y2debug("param=%1", param);

	/* Create a  summary*/
	if(func == "Summary") {    
	ret = select(XXPkgXX::Summary(), 0, "");
	}
	else if (func == "Import") {
	ret = XXPkgXX::Import($[]);
	return ret ;
	}

	/* Reset configuration */
	else if (func == "Reset") {
	XXPkgXX::Import($[]);
	ret = $[];
	}
	/* Change configuration (run AutoSequence) */
	else if (func == "Change") {
	ret = XXPkgXXAutoSequence();
	}
	/* Return required packages */
	else if (func == "Packages") {
	ret = XXPkgXX::AutoPackags();
	}
	/* Return actual state */
	else if (func == "Export") {
	ret = XXPkgXX::Export();
	}
	/* Write given settings */
	else if (func == "Write") {
	import "Progress";
	XXPkgXX::write_only = true;
	Progress::off();
	ret = XXPkgXX::Write();
	Progress::on();
	return ret;
	}
	/* Unknown function */
	else {
	y2error("Unknown function: %1", func);
	ret = false;
	}

	y2debug("ret=%1", ret);
	y2milestone("XXPkgXX auto finished");
	y2milestone("----------------------------------------");

	return ret;

	/* EOF */
	}




	]]>
      </programlisting>
    </example>
  </section>
  <section>
    <title>Module Functions Needed for Auto-Install</title>
    <para>The following functions should be available with
      the modules to provide the functionality needed in &ay;.
    </para>
    <refentry>
      <refnamediv>
	<refname>AutoPackages()</refname>
	<refpurpose>Returns needed packages for module to work.</refpurpose>
      </refnamediv>
      <refsect1>
	<title>Description</title>
	<para>
	  Returns a map of lists which contain packages to be
	  installed or removed during installation (second stage).	  
	</para>

      </refsect1>
      
      <refsect1>
	<title>Returns</title>
	<para>
	  For example, this function can return the following structure:
	</para>
	<screen>
	  $[
	  "install": ["pkg1", "pkg2"], 
	  "remove": ["pkg3"]
	  ]
	</screen>
      </refsect1>
    </refentry>
    <refentry>
      <refnamediv>
	<refname>Import()</refname>
	<refpurpose>Imports settings from arguments.</refpurpose>
      </refnamediv>
      <refsect1>
	<title>Description</title>
	<para>This function imports settings from arguments and sets the
	module variables. The <emphasis>Import</emphasis> function should
	provide sufficient data for the module to write (see Write()) a usable
	configuration.
	</para>

      </refsect1>
      
      <refsect1>
	<title>Returns</title>
	<para>Import() returns "false" if some of the required keys are
	missing in the imported map. If the imported data is empty, it returns
	"true" and starts the module using default values.
	</para>
      </refsect1>
    </refentry>
    <refentry>
      <refnamediv>
	<refname>Export()</refname>
	<refpurpose>Exports configured data to the calling module.</refpurpose>
      </refnamediv>
      <refsect1>
	<title>Description</title>
	<para>Exports configured data to the calling module. This function
	also converts internal variables to unique and human readable
	variables which can be used in the control file needed for the
	auto-installation. Do not use configuration data as the key in a
	key-value pair. The key of the pair must always contain the variable
	name, rather than its contents.</para>
      </refsect1>
      <refsect1>
	<title>Example</title>
	<example>
	  <title>Export()</title>
	  <programlisting>
	    <![CDATA[
	    global define map Export () ``{
	    return $[
	    "start_nis": start,
	    "nis_servers": servers,
	    "nis_domain": domain,
	    "start_autofs": _start_autofs,
	    ];
	    }
	    ]]>
	  </programlisting>
	</example>
      </refsect1>
      <refsect1>
	<title>Returns</title>
	<para>This function returns a map of the configuration data.</para>
      </refsect1>
    </refentry>

    <refentry>
      <refnamediv>
	<refname>Write()</refname>
	<refpurpose>Writes or commits configured or imported data.</refpurpose>
      </refnamediv>
      <refsect1>
	<title>Description</title>
	<para>Commits configured data. This function is also used in normal
	  operation mode and should not be used to write configuration in
	  auto-installation mode. Instead, use<emphasis> WriteOnly()</emphasis>
	  or set the global variable <emphasis>write_only</emphasis> to true
	  before writing.
	</para>
	<para>
	  During the write process, check for the global boolean variable
	  <emphasis>write_only</emphasis>, which should be used to prevent the
	  module from restarting services and showing GUI components during
	  auto-install, which might interfere with the installation widgets.
	</para>
	
      </refsect1>
    </refentry>

  </section>
  <section>
    <title>Configuration File</title>
    
    <para>
      When &ay; is invoked, it checks for the desktop files in
      <filename>/usr/share/applications/YaST2</filename> and evaluates them to
      later include them in the configuration interface. &ay; uses the same
      configuration file as the &yast; Control Center with some enhancements.
    </para>
    <para>
      The following is an example of the configuration file for the NIS module:
    </para>
    <example>
      <title>Auto-Install Configuration File for NIS</title>
      <programlisting>
[Desktop Entry]
Type=Application
Categories=Qt;X-SuSE-YaST;X-SuSE-YaST-Net_advanced;

X-KDE-ModuleType=Library
X-KDE-RootOnly=true
X-KDE-HasReadOnlyMode=true
X-KDE-Library=yast2
X-SuSE-YaST-Call=nis

X-SuSE-YaST-Group=Net_advanced
X-SuSE-YaST-Argument=
X-SuSE-YaST-RootOnly=true
X-SuSE-YaST-AutoInst=all
X-SuSE-YaST-Geometry=
X-SuSE-YaST-SortKey=
X-SuSE-YaST-AutoInstClonable=true
X-SuSE-YaST-AutoLogResource=true

Icon=nis_client
Exec=/sbin/yast2 nis

Name=NIS Client
GenericName=Configure NIS client


      </programlisting>
    </example>
    <para>In addition to the keywords in the example above, &ay; also evaluates
      the following keywords:</para>

    <itemizedlist>
	<!-- <title>Desktop file Keywords</title> -->
	<listitem>
	    <para><emphasis>X-SuSE-YaST-AutoInst</emphasis>
	    The &yast; module compatible with the &ay; version. Configurations can be imported and exported.</para>
	    <itemizedlist>
		<title>Values</title>
		<listitem>
	    	    <para><emphasis>all</emphasis>: Full auto-installation support,
		    including the &ay; interface and writing configurations
		    during auto-install. </para>	
		</listitem>
		<listitem>
	    	    <para><emphasis>write</emphasis>: Write-only support. No
		    integration into the &ay; interface. </para>	
		</listitem>     
		<listitem>
	    	    <para><emphasis>configure</emphasis>: Configuration-only
	    	    support.  Normally used only with parts related to
	    	    installation like partitioning and general options which
	    	    have no run-time module with support for
	    	    auto-install. Data is written using the common
	    	    installation process and modules available in &yast;.</para>
		</listitem>    
	    </itemizedlist>
	    <para>&nbsp;</para>
	</listitem>

        <listitem>
	    <para><emphasis>X-SuSE-YaST-AutoInstPath</emphasis>
	     Path in the control file.</para>
    	    <itemizedlist>
		<title>Values</title>
		<listitem>
		    <para>configure or install: All run-time configuration modules are
		    contained in the <emphasis>configure</emphasis> resource. Only
		    configuration data directly controlling the installation of a system are
		    contained in the <emphasis>install</emphasis> resource.</para>
		</listitem>
    	    </itemizedlist>
	    <para>&nbsp;</para>
	</listitem>

	<listitem>
	    <para><emphasis>X-SuSE-YaST-AutoInstClient</emphasis>
	     Name of the client to call.</para>
	    <itemizedlist>
		<title>Values</title>
		<listitem>
		    <para>Name of the client to be called by &ay;.</para>
		</listitem>
    	    </itemizedlist>
    	    <itemizedlist>
		<title>Default Value</title>
		<listitem>
		    <para>&lt;module name&gt;_auto</para>
		</listitem>
    	    </itemizedlist>
	    <para>&nbsp;</para>
	</listitem>

	<listitem>
	    <para><emphasis>X-SuSE-YaST-AutoInstDataType</emphasis>
	     Data type of configuration section.</para>
    	    <itemizedlist>
		<title>Values</title>
		<listitem>
		    <para><emphasis>map</emphasis> or <emphasis>list</emphasis></para>
		</listitem>
    	    </itemizedlist>
    	    <itemizedlist>
		<title>Default Value</title>
		<listitem>
		    <para>map</para>
		</listitem>
    	    </itemizedlist>
	    <para>&nbsp;</para>
	</listitem>

        <listitem>
	    <para><emphasis>X-SuSE-YaST-AutoInstResource</emphasis>
	     Name of the resource in the profile.</para>
    	    <itemizedlist>
		<title>Values</title>
		<listitem>
		    <para>string</para>
		</listitem>
    	    </itemizedlist>
    	    <itemizedlist>
		<title>Default Value</title>
		<listitem>
		    <para>(empty)</para>
		</listitem>
    	    </itemizedlist>
	    <para>&nbsp;</para>
	</listitem>   

	<listitem>
	    <para><emphasis>X-SuSE-YaST-AutoInstRequires</emphasis>
	     List of modules required before this module is run. </para>
	    <itemizedlist>
		<title>Values</title>
		<listitem>
		    <para>Comma-separated list of required modules.</para>
		</listitem>
	    </itemizedlist>
	    <itemizedlist>
		<title>Default Value</title>
		<listitem>
		    <para>(empty list)</para>
		</listitem>
	    </itemizedlist>
	    <para>&nbsp;</para>
	</listitem>   

<!-- merging stuff -->

	<listitem>
	    <para><emphasis>X-SuSE-YaST-AutoInstMerge</emphasis>
	     Multiple sections in the profile to be handled by one module.</para>
	    <itemizedlist>
		<title>Values</title>
		<listitem>
		    <para>Comma-separated list of sections to merge
		    (see also X-SuSE-YaST-AutoInstMergeTypes).</para>
		    <para>The Users module for example handles also
		    groups and user_defaults.</para>
		</listitem>
    	    </itemizedlist>
    	    <itemizedlist>
		<title>Default Value</title>
		<listitem>
		    <para>(empty)</para>
		</listitem>
    	    </itemizedlist>
	    <para>&nbsp;</para>
	</listitem>   

	<listitem>
	    <para><emphasis>X-SuSE-YaST-AutoInstMergeTypes</emphasis>
	     Data types of the merged sections to be handled by one module.</para>
    	    <itemizedlist>
		<title>Values</title>
		<listitem>
		    <para>Comma-separated list of data types (list or map) for
		    the sections specified in X-SuSE-YaST-AutoInstMerge.</para>
		</listitem>
	    </itemizedlist>
	    <itemizedlist>
		<title>Default Value</title>
		<listitem>
		    <para>(empty)</para>
		</listitem>
	    </itemizedlist>
	    <para>&nbsp;</para>
	</listitem>   

<!-- clone stuff -->

	<listitem>
	    <para><emphasis>X-SuSE-YaST-AutoInstClonable</emphasis>
	     Specify if this module is able to clone a system.</para>
    	    <itemizedlist>
		<title>Values</title>
		<listitem>
		    <para>a boolean (true, false)</para>
		    <para>If this is true, the module will appear in the list of
		    modules you can choose from during the cloning of a
		    system. The module will Read() and Export() its data from
		    the actual system.</para>
		</listitem>
	    </itemizedlist>
    	    <itemizedlist>
		<title>Default Value</title>
		<listitem>
		    <para>false</para>
		</listitem>
	    </itemizedlist>
	    <para>&nbsp;</para>
	</listitem>   

<!-- schema stuff -->

	<listitem>
	    <para><emphasis>X-SuSE-YaST-AutoInstSchema</emphasis>
	     Base name of the schema file, including the rnc
	    extension (Relax NG compact syntax).</para>
    	    <itemizedlist>
		<title>Values</title>
		<listitem>
		    <para>string</para>
		</listitem>
    	    </itemizedlist>
    	    <itemizedlist>
		<title>Default Value</title>
		<listitem>
		    <para>(empty)</para>
		</listitem>
    	    </itemizedlist>
	    <para>&nbsp;</para>
	</listitem>

	<listitem>
	    <para><emphasis>X-SuSE-YaST-AutoInstOptional</emphasis>
	     Specify if the element is optional in the schema.</para>
	    <itemizedlist>
		<title>Values</title>
		<listitem>
		    <para>a boolean (true, false)</para>
		    <para>Is this element mandatory or optional in the
		    profile? Unless you have a very basic module, it is
		    always optional and therefore "true".</para>
		</listitem>
    	    </itemizedlist>
    	    <itemizedlist>
		<title>Default Value</title>
		<listitem>
		    <para>true</para>
		</listitem>
	    </itemizedlist>
	    <para>&nbsp;</para>
	</listitem>

	<listitem>
	    <para><emphasis>X-SuSE-YaST-AutoLogResource</emphasis>
	     Should the resource of your module be logged (since SLES10 SP1/10.2)?</para>
    	    <itemizedlist>
		<title>Values</title>
		<listitem>
		    <para>a boolean (true, false)</para> <para>Do want &ay; to
		    log the data of your resource in the logfile? The default
		    is "true", but if you have sensitive data like passwords,
		    you may want to set this to "false". The setting can be
		    overridden by Y2DEBUG=1</para>
		</listitem>
	    </itemizedlist>
	    <itemizedlist>
		<title>Default Value</title>
		<listitem>
		    <para>true</para>
		</listitem>
	    </itemizedlist>
	    <para>&nbsp;</para>
	</listitem>

    </itemizedlist>

  </section>
  <section>
    <title>Conventions for Module Writers</title>
    <section>
      <title>Exported Data</title>
      <itemizedlist>
	<listitem>
	  <para><emphasis>Type of exported data</emphasis>: </para>
	  <para>Modules should only export data which is selected or
	    entered by the user in normal module operation. No computed or
	    automatically probed data should be exported.</para>
	</listitem>
	<listitem>	  
	  <para><emphasis>Use Namespaces</emphasis></para>
	  <para>Exported variables should have a unique name.<remark>emap 2011-11-05: Better use 'must' instead of 'should'?</remark>
	    To avoid conflicts and confusion when using general terminology,
	    add a name space identifier. For example, if a module should
	    export a variable <emphasis>options</emphasis>, better use
	    <emphasis> &lt;module name&gt;.options</emphasis> to avoid
	    confusion with other modules using <emphasis>options</emphasis>,
	    which is very common in configurations.
	  </para>	  
	</listitem>
	<listitem>
	  <para><emphasis>Lower case variables</emphasis></para>
	  <para>To have a common and unified look of the control file when
	  exporting the configuration data, please use lower case
	  variables.</para>
	</listitem>
	<listitem>
	  <para>The structure of the exported data should be readable and not
	    unnecessarly complex.</para>
	</listitem>
	<listitem>
	  <para>Do not use configuration data as the key in a map key-value
	    pair. The key of the pair must always contain the variable name,
	    rather than its contents.</para>
	</listitem>
      </itemizedlist>
      
    </section>    

    <section>
      <title>&yast; Module Types</title>
      <para>
	&yast; configuration modules and their relation to &ay; can be divided
	into three categories:	
      </para>      
      <orderedlist>
	<listitem>
	  <para>Modules which only change sysconfig variables
	    and have a simple configuration data structure (i.e. mail, nis,
	    ldap, etc.).
	  </para>
	  <para>
	    This category needs no special attention and is easy to integrate
	    with &ay;.
	  </para>
	</listitem>
	<listitem>
	  <para>Simple modules dealing with hardware configuration
	  (i.e. network, sound, printer etc.)
	  </para>
	  <para>
	    These modules need to be able to auto-detect and read hardware
	    data during installation if no hardware data is specified in the
	    control file. The behavior of this type of modules up to SuSE
	    Linux 8.1 was to import data and write it without actually reading
	    anything from the system.<remark>emap 2011-11-05: Is this info
	    about ancient behavior necessary after so many years?</remark>
	  </para>
	  <para>
	    An additional step has to be added between the import and the
	    write, where hardware data is read and imported into the module. In
	    some case this is simply done by calling the Read function of the module.<remark>emap 2011-11-05: I assume info gained while probing the actual hardware will override data specified in the control file. Should this be mentioned?</remark>
	  </para>
	</listitem>
	<listitem>
	  <para>Modules for management of complex configuration files
	    (i.e. inetd, sysconfig, runlevel, users, bootloader)
	  </para>
	  <para>
	    This class of modules is much more complex and requires adaptation
	    and special attention. &ay; expects that only new and modified
	    entries will be exported and not the whole configuration tree. For
	    example, when a user enables a service in inetd, only this service
	    is exported. A user should also be able to add new services which
	    are not available in the default configuration file.
	  </para>
	</listitem>
      </orderedlist>           	
    </section>
    <section>
      <title>Module Behavior</title>
      <para>
	Find below a list of common pitfalls. The configuration system is the machine where the control file is created. In configuration mode for auto-installation, modules <emphasis>should
	  not</emphasis>:
	<itemizedlist>
	  <listitem>
	    <para>read any data from the configuration system,</para>
	  </listitem>
	  <listitem>
	    <para>probe or detect hardware on the configuration system,</para>
	  </listitem>
	  <listitem>
	    <para>change configuration data on the configuration system,</para>
	  </listitem>
	  <listitem>
	    <para>link to other modules (i.e. calling the NIS module
	      from the users module),</para>
	  </listitem>
	  <listitem>
	    <para>check if a needed package is installed on the configuration
	    system.</para>
	  </listitem>
	  
	</itemizedlist>
      </para>
    </section>
  </section>
  </article>

