<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"[

<!ENTITY % daps-entities SYSTEM "entity-decl.ent">
<!ENTITY % daps-network-entities SYSTEM "network-decl.ent">
%daps-entities;
%daps-network-entities;
<!ENTITY % images SYSTEM "images.ent">
%images;

<!ENTITY % entities SYSTEM "entities/en.ent">
%entities;

<!-- Examples -->
<!ENTITY % examples SYSTEM "examples.ent">
%examples;

<!-- components -->
<!ENTITY % components SYSTEM "components.ent">
%components;

]>

<section id="CreateProfile.Software">
    <title>
      Software
    </title>
    
    <section id="Software.Selections.sles10">
      <title>
	Package Selections with Patterns
      </title>
      <para>
      SLES10 no longer supports <emphasis>selections</emphasis> but uses
      <emphasis>patterns</emphasis>. &ay; cannot convert selections to
      patterns. If you want to use a SLES9 &ay; profile to install a SLES10
      server, you have to remove all <emphasis>addon</emphasis> entries and
      the <emphasis>base</emphasis> entry. Patterns are configured like this:
      </para>
	<example>
	  <title>
	    Package Selection in Control File with Patterns
	  </title>
	  <screen>
<xi:include href="examples/example.software.patterns.xml" parse="text"
    xmlns:xi="http://www.w3.org/2001/XInclude"/>
	  </screen>
	</example>
    <para>
      The <emphasis>packages</emphasis> section is still the same as on a
      SLES9. Just the <emphasis>addon</emphasis> and <emphasis>base</emphasis>
      sections are gone.
    </para>
    </section>
  <section>
    <title>
      Deploying Images
    </title>
    <para>
      This feature is available since openSUSE 11.1 but not in SLES11.
    </para>
    <para>
      Since openSUSE 11.0 you can use images during installation to speed up the installation.
      This feature is available in openSUSE 11.1 as well.
    </para>
	<example>
	  <title>
	    Activating Image Deployment
	  </title>
	  <screen>
<xi:include href="examples/example.software.images.xml" parse="text"
    xmlns:xi="http://www.w3.org/2001/XInclude"/>
	  </screen>
	</example>
  </section>

  <section>
    <title>
      Installing Additional and Customized Packages
    </title>
    <para>
      In addition to the packages available for installation on the CD-ROMs,
      you can add external packages including customized kernels. Customized
      kernel packages must be compatible to the &company-suse; packages and must
      install the kernel files to the same locations.
    </para>
    <para>
      Unlike in earlier in versions, you do not need a special resource in the
      control file to install custom and external packages. Instead you need
      to re-create the package database and update it with any new packages or
      new package versions in the source repository.
    </para>
    <para>
      A script is provided for this task which will query packages available
      in the repository and create the package database. Use the
      command <command>/usr/bin/create_package_descr</command>. When creating
      the database, all languages will be reset to English.
    </para>
    <example>
      <title>Creating Package Database</title>
      <screen>
	cd /usr/local/CDs/LATEST/suse
	create_package_descr  -x PATH_TO_EXTRA_PROV -d /usr/local/CDs/LATEST/suse 
      </screen>
    </example>
    <note>
      <title>Change starting with SUSE Linux 9.1/SLES 9</title>
      <para>To provide extra dependencies which can not be extracted from the
	rpm files, an extra file with missing dependencies is available in the
	directory <filename>suse/setup/descr</filename>. The file
	<filename>EXTRA_PROV</filename> can be used when recreating the package
	database using the <emphasis>-x</emphasis> option.</para>
    </note>
    <para>
      In the above example, the directory
      <filename>/usr/local/CDs/LATEST/suse</filename> contains the architecture
      dependent and independent packages, i.e. <emphasis>noarch</emphasis> and <emphasis>i586</emphasis>. 
      This might look different on other architectures.
    </para>
    <para>
      The advantage of this method is that you can keep an up-to-date
      repository with fixed and updated package (e.g. from &company-suse; FTP
      server). Additionally this method  makes the creation of custom CD-ROMs easier.
    </para>
    <note>
        <title>Changes starting with SUSE Linux 10.1/SLES 10</title>
        <para>
        With SLES10/SL10.1, the concept of adding your own RPMs to an
        installation source has changed.  Neither
        <emphasis>yast/order</emphasis> nor
        <emphasis>yast/instorder</emphasis> are supported any longer by &ay;
        or by &yast;. To add your own RPMs to an installation source (or
        add-on products like the SDK), add a file
        <emphasis>add_on_products</emphasis> to CD1 of the main product.
        </para>
        <screen>
media_url [path_on_media [product_1 [product_2 [....]]]
        </screen>
<para>
        media_url is the URL of the media, path_on_media is the path to the
        catalog on the media. If not present, / (root) is assumed.  product_1
        and following are the names of products, which should be marked for
        installation. If no product is specified, all products found on the
        media are selected for installation. For example: </para><screen>
        http://192.168.66.6/SLES10/sdk/CD1
        http://192.168.66.6/SLES10/CD1/updates
        </screen>
        <para>
         Besides the <emphasis>add_on_products</emphasis> file, you can use the &ay; profile to specify add-on products. For example:
        </para>
        <screen>
&lt;add-on&gt;
 &lt;add_on_products config:type=&quot;list&quot;&gt;
   &lt;listentry&gt;
     &lt;media_url&gt;http://192.168.66.6/SLES10/CD1/updates&lt;/media_url&gt;
     &lt;product&gt;SuSE-Linux-Updates&lt;/product&gt;
     &lt;product_dir&gt;/&lt;/product_dir&gt;
     &lt;ask_on_error config:type="boolean"&gt;false&lt;/ask_on_error&gt; &lt;!-- available since openSUSE 11.0 --&gt;
     &lt;name&gt;MyUpdates&lt;/name&gt; &lt;!-- available since openSUSE 11.1/SLES11 (bnc#433981) --&gt;
   &lt;/listentry&gt;
 &lt;/add_on_products&gt;
&lt;/add-on&gt;
        </screen>
        <para>
         With this entry in the &ay; profile, the <emphasis>add_on_products</emphasis> file is not necessary.
        Since openSUSE 11.0, &ay; can ask the user to make add-on products available instead of reporting a time-out error when an add-on product cannot be found at the given location. Set ask_on_error to "true" (the default is "false").
        Then your add-on product can be on a different CD/DVD than the installation source.
        </para>
        <para>
        &yast; checks the signatures of files on the installation source. If a <emphasis>content</emphasis> file is
        not signed, during a manual installation &yast; asks the user what to do. During an automatic installation, the
        installation source is rejected silently.
        </para>
    </note>
    <para>
        If you want to use unsigned installation sources with &ay;, turn off the checks with the following
        configuration in your &ay; profile (part of the <emphasis>general</emphasis> section.
    </para>
          <para>
          The following elements must be between the &lt;general&gt;&lt;signature-handling&gt; ... &lt;/signature-handling&gt;&lt;/general&gt; tags.
          </para>
          <informaltable frame='top'>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Attribute</entry>
                <entry>Values</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>accept_unsigned_file</entry>
                <entry><para>If set to "true", &ay; will accept unsigned files like the content file.</para>
                  <para><literal>&lt;accept_unsigned_file config:type="boolean"&gt;true&lt;/accept_unsigned_file&gt;</literal></para>
                </entry>
                <entry>Optional. If left out, &ay; lets &yast; decide what to do.</entry><remark>emap 2011-11-05: Is this correct? How will YaST make the decision? Above we write that YaST will ask the user, but during auto-install the package will be rejected. So which is it?</remark>
              </row>
              <row>
                <entry>accept_file_without_checksum</entry>
                <entry><para>If set to "true", &ay; will accept files without a checksum in the content file.</para>
                  <para><literal>&lt;accept_file_without_checksum config:type="boolean"&gt;true&lt;/accept_file_without_checksum&gt;</literal></para>
                </entry>
                <entry>Optional. If left out, &ay; lets &yast; decide what to do.</entry><remark>emap 2011-11-05: See my previous remark.</remark>
              </row>
              <row>
                <entry>accept_verification_failed</entry>
                <entry><para>If set to "true", &ay; will accept signed files even when the verification of the signature failed.</para>
                  <para><literal>&lt;accept_verification_failed config:type="boolean"&gt;true&lt;/accept_verification_failed&gt;</literal></para>
                </entry>
                <entry>Optional. If left out, &ay; lets &yast; decide what to do.</entry><remark>emap 2011-11-05: Same here. Unless I'm just not getting it, please fix all other occurrences below.</remark>
              </row>
              <row>
                <entry>accept_unknown_gpg_key</entry>
                <entry><para>If set to "true", &ay; will accept new gpg keys on the installation source, for example the key used to sign the content file.</para>
                  <para><literal>&lt;accept_unknown_gpg_key config:type="boolean"&gt;true&lt;/accept_unknown_gpg_key&gt;</literal></para>
                </entry>
                <entry>Optional. If left out, &ay; lets &yast; decide what to do.</entry>
              </row>
              <row>
                <entry>accept_non_trusted_gpg_key</entry>
                <entry><para>This basically means, we know the key, but it is not trusted.</para>
                  <para><literal>&lt;accept_non_trusted_gpg_key config:type="boolean"&gt;true&lt;/accept_non_trusted_gpg_key&gt;</literal></para>
                </entry>
                <entry>Optional. If left out, &ay; lets &yast; decide what to do.</entry>
              </row>
              <row>
                <entry>import_gpg_key</entry>
                <entry><para>If set to "true", &ay; will accept and import new gpg keys on the installation source in its database.</para>
                  <para><literal>&lt;import_gpg_key config:type="boolean"&gt;true&lt;/import_gpg_key&gt;</literal></para>
                </entry>
                <entry>Optional. If left out, &ay; lets &yast; decide what to do.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
    
    <para>
    Since openSUSE 10.3, it is possible to configure the signature handling for each add-on product individually. The following elements must be between the
    &lt;signature-handling&gt; section of the individual add-on product.
    </para>

          <informaltable frame='top'>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Attribute</entry>
                <entry>Values</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>accept_unsigned_file</entry>
                <entry><para>If set to "true", &ay; will accept unsigned files like the content file for this add-on product.</para>
                  <para><literal>&lt;accept_unsigned_file config:type="boolean"&gt;true&lt;/accept_unsigned_file&gt;</literal></para>
                </entry>
                <entry>Optional. If left out, the global signature-handing in the &lt;general&gt; section is used.</entry>
              </row>
              <row>
                <entry>accept_file_without_checksum</entry>
                <entry><para>If set to "true", &ay; will accept files without a checksum in the content file for this add-on.</para>
                  <para><literal>&lt;accept_file_without_checksum config:type="boolean"&gt;true&lt;/accept_file_without_checksum&gt;</literal></para>
                </entry>
                <entry>Optional. If left out, the global signature-handing in the &lt;general&gt; section is used.</entry>
              </row>
              <row>
                <entry>accept_verification_failed</entry>
                <entry><para>If set to "true", &ay; will accept signed files even when the verification of the signature fails.</para>
                  <para><literal>&lt;accept_verification_failed config:type="boolean"&gt;true&lt;/accept_verification_failed&gt;</literal></para>
                </entry>
                <entry>Optional. If left out, the global signature-handing in the &lt;general&gt; section is used.</entry>
              </row>
              <row>
                <entry>accept_unknown_gpg_key</entry>
                <entry><para>If set to "true", &ay; will accept new gpg keys on the installation source, for example the key used to sign the content file.</para>
                  <screen>
           &lt;accept_unknown_gpg_key&gt;
            &lt;all config:type=&quot;boolean&quot;&gt;false&lt;/all&gt;
             &lt;keys config:type=&quot;list&quot;&gt;
               &lt;keyid&gt;3B3011B76B9D6523&lt;/keyid&gt;
             &lt;/keys&gt;
           &lt;/accept_unknown_gpg_key&gt;
                  </screen>
                </entry>
                <entry>Optional. If left out, the global signature-handing in the &lt;general&gt; section is used.</entry>
              </row>
              <row>
                <entry>accept_non_trusted_gpg_key</entry>
                <entry><para>This basically means, we know the key, but it is not trusted.</para>
                  <screen>
           &lt;accept_non_trusted_gpg_key&gt;
            &lt;all config:type=&quot;boolean&quot;&gt;false&lt;/all&gt;
             &lt;keys config:type=&quot;list&quot;&gt;
               &lt;keyid&gt;3B3011B76B9D6523&lt;/keyid&gt;
             &lt;/keys&gt;
           &lt;/accept_non_trusted_gpg_key&gt;
</screen>
                </entry>
                <entry>optional. If left out, the global signature-handing in the &lt;general&gt; section is used.</entry>
              </row>
              <row>
                <entry>import_gpg_key</entry>
                <entry><para>If set to "true", &ay; will accept and import new gpg keys on the installation source into its database.</para>
                  <screen>
           &lt;import_gpg_key&gt;
            &lt;all config:type=&quot;boolean&quot;&gt;false&lt;/all&gt;
             &lt;keys config:type=&quot;list&quot;&gt;
               &lt;keyid&gt;3B3011B76B9D6523&lt;/keyid&gt;
             &lt;/keys&gt;
           &lt;/import_gpg_key&gt;
             </screen>
                </entry>
                <entry>Optional. If left out, the global signature-handing in the &lt;general&gt; section is used.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
    
  </section>
  <section>
    <title>Kernel Packages</title>
    <para>
      Kernel packages are not part of any selection. The required kernel
      is determined during installation. If the kernel package is added to any selection
      or to the individual package selection, installation will mostly fail due to conflicts.
    </para>
    <para>
      To force the installation of a specific kernel, use the
      <emphasis>kernel</emphasis> property. The following is an example of
      forcing the installation of the default kernel. This kernel will be
      installed even if an SMP or other kernel is required.</para>
   	<example>
	  <title>
	    Package Selection in Control File<remark>emap 2011-11-05: Should this read: Kernel Selection in Control File?</remark>
	  </title>
	  <screen>
<xi:include href="examples/example.kernel.xml" parse="text"
    xmlns:xi="http://www.w3.org/2001/XInclude"/>

	  </screen>
	</example>
  </section>
  <section>
    <title>Removing Automatically Selected Packages</title>
    <para>
      Some packages are selected automatically either because of a
      dependency or because it is available in a selection.
    </para>
    <para>
      Removing such packages might break the system consistency and it is not
      recommended to remove basic packages unless a replacement which provides
      the same services is provided. The best example for this case are
      <acronym>MTA</acronym> packages. By default,
      <emphasis>postfix</emphasis> will be selected and installed. If you wish
      to use another <acronym>MTA</acronym> like
      <emphasis>sendmail</emphasis>, then postfix can be removed from the list
      of selected package using a list in the software resource. The following
      example shows how this can be done:
    </para>
	<example>
	  <title>
	    Package Selection in Control File
	  </title>
	  <screen>
<xi:include href="examples/example.removesoft.xml" parse="text"
    xmlns:xi="http://www.w3.org/2001/XInclude"/>


	  </screen>
	</example>   
  </section>
  <section>
    <title>Installing Packages in Stage 2</title>
    <para>
      If you want to install packages after the reboot during stage 2, instead of
      during the normal installation process in stage 1, you can use the
      <emphasis>post-packages</emphasis> element for that:
    </para>
        <screen>
&lt;software&gt;
  &lt;post-packages config:type=&quot;list&quot;&gt;
    &lt;package&gt;yast2-cim&lt;/package&gt;
  &lt;/post-packages&gt;
&lt;/software&gt;
        </screen>
  </section>
  <section>
    <title>FIXME Title</title><remark>emap 2011-11-05: Just drawing attention to this fixme. How about: Installing Patterns in Stage 2</remark>
    <para>
      Since SLES11 and openSUSE 11.1, you can also install patterns in stage 2.
      Use the <emphasis>post-patterns</emphasis> element for that:
    </para>
        <screen>
&lt;software&gt;
  &lt;post-patterns config:type=&quot;list&quot;&gt;
    &lt;pattern&gt;apparmor&lt;/pattern&gt;
  &lt;/post-patterns&gt;
&lt;/software&gt;
        </screen>
  </section>
  <section>
    <title>Online Update in Stage 2</title>
    <para>
      Since openSUSE 11.1, you can perform an online update at the end of the installation. Set the boolean <emphasis>do_online_update</emphasis> to "true".
      Of course this makes only sense if you add an online update repository in the suse-register/customer-center section, for example, or in a post-script. If the online update repository was available in stage 1 already via add-on section, then &ay; has already installed the latest packages available. If a kernel update is done via online-update, a reboot at the end of stage 2 is triggered.
    </para>
        <screen>
&lt;software&gt;
  &lt;do_online_update config:type=&quot;boolean&quot;&gt;true&lt;/do_online_update&gt;
&lt;/software&gt;
        </screen>
  </section>
    </section>

