<chapter id="Profile">
  <title>The Control File</title>
  <para>
  </para>
  <section id="Profile.Intro">
    <title>
      Introduction
    </title>
    
    <para>
      The control file is in most cases a configuration description for a
      single system. It consists of
      sets of resources with properties including support for complex
      structures such as lists, records, trees and large
      embedded or referenced objects.
    </para>

  </section>
  <section id="Profile.Format">   
    <title>
      Format
    </title>    
    
    <para>
      The XML configuration format provides a consistent file structure, which is
      easier to learn and remember when attempting to configure a new system.     
    </para>
    <para>
      The AutoYaST2 control file uses XML to describe the system installation and configuration. XML is a commonly used mark up and many users are familiar with the concepts of the language and the tools used to process XML files. If you edit an existing control file or create a control file using an editor from scratch, it is strongly recommended to validate the control file using a validating XML parser.
    </para>
    
    <para>
      The following example shows a control file in XML format:
    </para>
    <example><title>XML Control File (Profile)</title>
      <screen><![CDATA[<?xml version="1.0"?>
<!DOCTYPE profile>
 <profile
 xmlns="http://www.suse.com/1.0/yast2ns"
 xmlns:config="http://www.suse.com/1.0/configns">
   <partitioning  config:type="list">
      <drive>
         <device>/dev/hda</device>
         <partitions config:type="list">
           <partition>
              <filesystem config:type="symbol">ext2</filesystem>
              <size>520Mb</size>
              <mount>/</mount>
           </partition>
           <partition>
              <filesystem config:type="symbol">reiser</filesystem>
              <size>1200Mb</size>
              <mount>/data</mount>
           </partition>
         </partitions>
      </drive>
   </partitioning>
   <scripts>
    <pre-scripts>
     <script> 
        <interpreter>shell</interpreter>
	<filename>start.sh</filename>
         <source>
]]>
            &lt;![CDATA[
#!/bin/sh 
echo "Starting installation" 
exit 0

]]&gt;
<![CDATA[
         </source>
     </script>  
    </pre-scripts>
   </scripts>
</profile>]]></screen>
    </example>
  </section>



  <section id="Profile.Structure">
    <title>
      Structure
    </title>
    <para>
      Below is an example of a basic control file container, the actual content
      of which is explained later on in this chapter. 
    </para>
      
    <example>
      <title>Control file container</title>
      <screen><![CDATA[<?xml version="1.0"?>
<!DOCTYPE profile>
 <profile
 xmlns="http://www.suse.com/1.0/yast2ns"
 xmlns:config="http://www.suse.com/1.0/configns">
 
<!-- RESOURCES -->

</profile>]]></screen>
    </example>
    <para>
      The profile element (root node) contains one or more distinct resource
      elements. The permissible resource elements are specified in the schema files
    </para>
    <section>
      <title>
	Resources and Properties
      </title>
      <para>
	A resource element either contains multiple and distinct property and
	resource elements, or multiple instances of the same resource
	element, or it is empty. The permissible content of a resource element is
	specified in the schema files.
      </para>
      <para>
	A property element is either empty or contains a literal value. The
	permissible property elements and values in each resource element are
	specified in the schema files
      </para>
      <para>
	An element can be either a container of other elements (a resource) or
	it has a literal value (a property); it can never be both. This
	restriction is specified in the schema files. A configuration component with
	more than one value must either be represented as some kind of embedded
	list in a property value or as a nested resource.
      </para>
    </section>
    <section>
      <title>
	Nested Resources
      </title>
      <para>
	Nested resource elements allow a tree-like structure of configuration
	components to be built to any level.  
      </para>
      <example> 
	<title>
	  Nested Resources
	</title>
	<screen><![CDATA[...
<drive> 
  <device>/dev/hda</device> 
  <partitions config:type="list"> 
     <partition> 
        <size>1000mb</size> 
        <mount>/</mount> 
     </partition> 
     <partition> 
        <size>250mb</size> 
        <mount>/tmp</mount> 
     </partition> 
  </partitions> 
</drive>
....
]]></screen>
      </example>

      <para>
	In the example above the disk resource consists of a device property
	and a partitions resource. The partitions resource contains multiple
	instances of the partition resource. Each partition resource contains a
	size and mount property.	
      </para>
      <para>
In the schema files is specified that the partitions resource
	contains multiple instances, but it is still required to specify this to
	avoid wrong data typing in &yast2;. Using the example above, if having a
	drive with only one partition this would result in interpreting the
	partition resource as a property. To avoid this, the following syntax
	must be used when defining multiple instances. For more information
	about type attributes, see the next section.
      </para>
      <example> 
	<title>
	  Nested Resources with Type Attributes
	</title>
	<screen><![CDATA[...
<drive> 
  <device>/dev/hda</device> 
  <partitions config:type="list"> 
     <partition> 
        <size>1000</size> 
        <mount>/</mount> 
     </partition> 
     <partition> 
        <size>250</size> 
        <mount>/tmp</mount> 
     </partition> 
  </partitions> 
</drive>
....]]></screen>
      </example>
    </section>

    <section>
      <title>
	Attributes
      </title>
      <para>
	Global profile attributes are used to define meta-data on resources and
	properties. Attributes are used to define context switching. They are also used for naming and
	typing properties as shown in the previous sections.

	    Profile attributes are in a separate namespace so they do not have
	    to be treated as reserved words in the default namespace. New ones
	    can then be added without having to potentially alter existing
	    profiles.
      </para>
      <para>
	Profile attributes are defined in the configuration namespace and must
	always be prefixed with <emphasis>config:</emphasis> . All profile attributes are
	optional. Most can be used with both resource and property elements but
	some can only be used with one type of element which is specified in
	the schema files. 
      </para>
     
    <para>
      The type of an element is defined using the <emphasis>config:type</emphasis> attribute. The
      type of a resource element is always RESOURCE, although this can
      also be made explicit with this attribute (to ensure correct
      identification of an empty element, for example, when there is no schema file
      to refer to). A resource element cannot be any other type and this
      restriction is specified in the schema file. The type of a property element
      determines the interpretation of its literal value. The type of a
      property element defaults to <emphasis>STRING</emphasis>, as specified in the schema file. The
      full set of permissible types is specified in the schema file. 
    </para>
     
    </section>
  </section>

  <section id="Profile.DTD">
    <title>
      RELAX NG - a schema language for XML
    </title>
    <section>
      <title>
	Introduction
      </title>
      <para>
A RELAX NG schema specifies a pattern for the structure and content of an XML document.
A RELAX NG schema thus identifies a class of XML documents consisting of those documents that match the pattern.
A RELAX NG schema is itself an XML document.
      </para>
      <para>
        Verfify your &ay; XML file
      </para>
        <screen>/usr/bin/xmllint --noout --relaxng /usr/share/YaST2/schema/autoyast/rng/profile.rng myAutoYaSTProfile.xml</screen>
     </section>
    </section>


</chapter>

      <!--
       Local Variables:
       mode: xml
       sgml-parent-document: ("autoyast.xml" "part" "chapter")
       End:
      -->






























