
<chapter id="rulesandclass">
    <title>Rules and Classes</title>
    <para>
    </para>
  <section id="rules">
    <title>Rules-based Automatic Installation</title>
    <para>
      Rules offer the possibility to configure a system depending on system
      attributes by merging multiple control files during installation. The
      rules-based installation is controlled by a rules file.
    </para>
    <para>
      The rules file is an XML file containing
      rules for each group of systems (or single systems) that you want to
      automatically install. A set of rules distinguish a group of systems based on
      one or more system attributes. After passing all rules, each
      group of systems is linked to a profile. Both the rules file and the profiles must be
      located in a pre-defined and accessible location.
    </para>
    <para>
        The rules file is retrieved only if no specific control file<remark>emap 2011-11-07: Should this read 'profile'?</remark> is supplied
        using the <emphasis>autoyast</emphasis> keyword. For example, if the
        following is used, the rules file will not be evaluated:
    </para>
    <screen>
        autoyast=http://10.10.0.1/profile/myprofile.xml
        autoyast=http://10.10.0.1/profile/rules/rules.xml
    </screen>
    <para>Instead use:</para>
    <screen>
        autoyast=http://10.10.0.1/profile/
    </screen>
    <para>which will load http://10.10.0.1/profile/rules/rules.xml (the slash at the end of the directory name is important).</para>
    <figure id="rules_fig1">
      <title id="rules_fig1.title" >Rules</title>
      <mediaobject>&rules;</mediaobject>
    </figure>
    <para>
      If more than one rule applies, the final profile for each group is
      generated on the fly using a merge script. The merging process is based
      on the order of the rules and later rules override configuration data in
      earlier rules.
    </para>
    <para>
      The use of  a rules file is optional. If the rules file is not found,
      system installation proceeds in the 
      classic way by only using the supplied profile or by searching for the
      profile depending on the <emphasis>MAC</emphasis> or the
      <emphasis>IP</emphasis> address of the system.     
    </para>
<!--
    <para>
      In the previous scenario, you would create a rules file with two different
      rules, one rule for the development and another rule for the sales
      department. For each rule, you could use different system parameters to
      distinguish the groups from one another: the development department has SMP
      and SCI  based systems and the sales group has IDE based systems. Each rule
      would also contain a link to an appropriate profile. For example, in the
      rule for the development department, you would add a link to the profile, called
      <filename>devel.xml</filename>, that you created for this department. And, in the rule
      for the sales department, you would add a link to the profile, called
      <filename>sales.xml</filename>, that you created for the sales department.
    </para>
--><remark>emap 2011-11-07: If the example is dropped here we better drop it in NetworkInstall.xml as well. </remark>

    <section id="rulesfile">
      <title>Rules File Explained</title>
   
      <example>
	<title>
	  Simple Rules File
	</title>		

	<para>
	  The following simple example illustrates how the rules file is used
	  to retrieve the configuration for a client with known hardware.
	</para>
	<screen>
<![CDATA[
<?xml version="1.0"?>
<!DOCTYPE autoinstall>
<autoinstall xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns">
  <rules config:type="list">
    <rule>
       <disksize>
            <match>/dev/hdc 1000</match>
            <match_type>greater</match_type>
       </disksize>
       <result>
            <profile>machine1.xml</profile>
            <continue config:type="boolean">false</continue>
        </result>
    </rule>
    <rule>
       <disksize>
            <match>/dev/hda 1000</match>
            <match_type>greater</match_type>
       </disksize>
       <result>
            <profile>machine2.xml</profile>
            <continue config:type="boolean">false</continue>
        </result>
    </rule>
  </rules>
</autoinstall>
]]>
	    </screen>

	  </example>	 
      <para>
	The last example defines two rules and provides a different profile for
	every rule. The rule used in this case is
	<emphasis>disksize</emphasis>. After parsing the rules file, &yast;
	attempts to match the target system with the rules in the 
	<filename>rules.xml</filename> file. A rule match occurs when the target system matches	all system attributes defined in the rule. As soon as the system
	matches a rule, the respective resource is added to the
	stack of profiles  &ay; will use to create the final
	profile.  The <emphasis>continue</emphasis> property tells &ay; whether it should continue with other rules after a match has been found. 
      </para>
      <para>
	If the first rule does not match, the next rule in the list is examined
	until a match is found.
      </para>
      <para>
	Using the <emphasis>disksize</emphasis> attribute, you can
	provide different configurations for systems with hard drives of
	different sizes. The first rule checks if the device
	<emphasis>/dev/hdc</emphasis> is available and if it is greater than 1
	GB in size using the <emphasis>match</emphasis> property. 
      </para>
    
      <para>
	A rule must have at least one attribute to be matched. If you need
	to check more attributes, i.e. memory or architectures, you can add
        more attributes in the rule resource as shown in the next example.
      </para>
      <example>
	<title>
	  Simple Rules File
	</title>		

	<para>
	  The following example illustrates how the rules file is used
	  to retrieve the configuration for a client with known hardware.
	</para>
	<screen>
<![CDATA[
<?xml version="1.0"?>
<!DOCTYPE autoinstall> 
<autoinstall xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns">
  <rules config:type="list">
    <rule>
       <disksize>
            <match>/dev/hdc 1000</match>
            <match_type>greater</match_type>
       </disksize>
       <memsize>	    
            <match>1000</match>
            <match_type>greater</match_type>
       </memsize>
       <result>
            <profile>machine1.xml</profile>
            <continue config:type="boolean">false</continue>
        </result>
    </rule>
    <rule>
       <disksize>
            <match>/dev/hda 1000</match>
            <match_type>greater</match_type>
       </disksize>
       <memsize>	    
            <match>256</match>
            <match_type>greater</match_type>
       </memsize>
       <result>
            <profile>machine2.xml</profile>
            <continue config:type="boolean">false</continue>
        </result>
    </rule>
  </rules>
</autoinstall>
]]>
	</screen>

      </example>	 
      <para>
	The rules directory must be located in the same directory specified via
	the <emphasis>autoyast</emphasis> keyword at boot time.
	If the client was booted using<emphasis> autoyast=http://10.10.0.1/profiles/</emphasis>,
	&autoyast; will search for the rules file in 
        <emphasis>http://10.10.0.1/profiles/rules/rules.xml</emphasis>.
      </para>
    </section>
    <section id="customrules">
        <title>Custom Rules</title>
        <para>
            If the attributes &ay; provides for rules are not enough for your purposes,
            use custom rules. Custom rules are more or less a shell script
            you have to write.<remark>emap 2011-11-07: Is it a shell script or not?</remark> Its output to STDOUT specifies
            which &ay; profile should be used. STDERR will be ignored.
        </para>
        <para>
            Here is an example for the use of custom rules:
        </para>
            <screen>
<![CDATA[
<rule>
    <custom1>
        <script>
if grep -i intel /proc/cpuinfo > /dev/null; then
echo -n "intel"
else
echo -n "non_intel"
fi;
        </script>
        <match>*</match>
        <match_type>exact</match_type>
    </custom1>
    <result>
         <profile>@custom1@.xml</profile>
         <continue config:type="boolean">true</continue>
    </result>
</rule>
]]>
            </screen>
        <para>
            The script in this rule can echo either "intel" or "non_intel" to
            STDOUT (the output of the grep command must be directed to
            /dev/null in this case). The output of the rule script will be
            filled between the two '@' characters, to determine the filename
            of the profile to fetch. &ay; will read the output and fetch a
            file with the name "intel.xml" or "non_intel.xml". This file can
            contain the &ay; profile part for the software selection, for
            example, in case you want a different software selection on intel
            hardware than on others.
        </para>
        <para>
            The number of custom rules is limited to five. So you can use custom1 to custom5.
        </para>
    </section>
    <section id="matchtypes">
        <title>Match Types for Rules</title>
        <para>
            You can use five different match_types:
        </para>

            <itemizedlist>
                <listitem>
                    <para>
                        exact (default),
                    </para>
                </listitem>
                <listitem>
                    <para>
                        greater,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        lower,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        range,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        regex (available since 10.1 and SLES10), a simple "=~" operator like in bash.
                    </para>
                </listitem>
            </itemizedlist>

        <para>
            "greater" and "lower" can be used for memsize or totaldisk for
            example. They can match only with rules that return an integer value.
            A range is only possible for integer values too and has the form of
            "value1-value2", for example "512-1024". "regex" can be used to match substrings
            like "ntel" will match "Intel", "intel" and "intelligent".
        </para>
    </section>
    <section id="rulescombination">
        <title>Combine Attributes</title>
        <para>
            Multiple attributes can be combined via a logical operator. It is
            possible to let a rule match if disksize is greater than 1GB or memsize
            is exactly 512MB.
        </para>
        <para>
            You can do this with the "operator" element in the rules.xml file. Here is
            an example:
        </para>

        <screen>
<![CDATA[
<rule>
   <disksize>
        <match>/dev/hda 1000</match>
        <match_type>greater</match_type>
   </disksize>
   <memsize>	    
        <match>256</match>
        <match_type>greater</match_type>
   </memsize>
   <result>
        <profile>machine2.xml</profile>
        <continue config:type="boolean">false</continue>
   </result>
   <operator>or</operator>
</rule>
]]>
        </screen>

        <para>
            Just "and" and "or" are possible operators and the default operator 
            is "and".
        </para>
    </section>
    <section id="rulesstructure">
	<title>Rules File Structure</title>
	<para>
	  The <filename>rules.xml</filename> file must:	  
	</para>
	<itemizedlist>
	  <listitem>
	    <para>have at least one rule,</para>
	  </listitem>
	  <listitem>
	    <para>have the name <filename>rules.xml</filename>,</para>
	  </listitem>
	  <listitem>
	    <para>be located in the directory
	      <emphasis>rules</emphasis> in the profile repository,</para>
	  </listitem>

	  <listitem>
	    <para>and have at least one attribute to match in the rule.</para>
	  </listitem>
	</itemizedlist>
    </section>
  
    <section id="ruleattributes">
      <title>Predefined System Attributes</title>
	<para>
	  The following table lists the predefined system attributes you can
	  match in the rules file.
	</para>
    <para>
      If you are unsure about a value on your system, start an auto-installation with "confirm" set to "true".
      When the proposal shows up, switch to the console via CTRL+ALT+F2 and run
      <command>/usr/lib/YaST2/bin/y2base ayast_probe ncurses</command>. The text box displaying the detected values can be scrolled.
    </para>
	<table frame='top'>
	  <title>System Attributes</title>
	  <tgroup cols="3">
	    <thead>
	      <row>
		<entry>Attribute</entry>
		<entry>Values</entry>
		<entry>Description</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>hostaddress</entry>
		<entry>IP address of the host</entry>
		<entry>This attribute must always match exactly.</entry>
	      </row>
	      <row>
		<entry>hostname</entry>
		<entry>The name of the host</entry>
		<entry>This attribute must always match exactly.</entry>
	      </row>
	      <row>
		<entry>domain</entry>
		<entry>Domain name of host</entry>
		<entry>This attribute must always match exactly.</entry>
	      </row>
	      <row>
		<entry>installed_product</entry>
		<entry>The name of the product to be installed.</entry>
		<entry>This attribute must always match exactly.</entry>
	      </row>
	      <row>
		<entry>installed_product_version</entry>
		<entry>The version of the product to be installed.</entry>
		<entry>This attribute must always match exactly.</entry>
	      </row>
	    <row>
		<entry>network</entry>
		<entry>network address of host</entry>
		<entry>This attribute must always match exactly.</entry>
	      </row>
	      <row>
		<entry>mac</entry>
		<entry>MAC address of host</entry>
		<entry><para>This attribute must always match exactly. (MAC addresses
		should have the form <emphasis>0080c8f6484c</emphasis></para></entry>
	      </row>
	      <row>
		<entry>linux</entry>
		<entry>Number of installed Linux partitions on the system</entry><remark>emap 2011-11-07: already installed or to be installed?</remark>
		<entry>This attribute can be 0 or more.</entry>
	      </row>
	      <row>
		<entry>others</entry>
		<entry>Number of installed non-Linux partitions on the system</entry>
		<entry>This attribute can be 0 or more.</entry>
	      </row>
	      <row>
		<entry>xserver</entry>
		<entry>X Server needed for graphic adapter</entry>
		<entry>This attribute must always match exactly.</entry>
	      </row>
	      <row>
		<entry>memsize</entry>
		<entry>Memory available on host in MByes</entry>
		<entry>All match types are available.</entry>
	      </row>
	      <row>
		<entry>totaldisk</entry>
		<entry>Total disk space available on host in MBytes</entry>
		<entry>All match types are available.</entry>
	      </row>
	      <row>
		<entry>haspcmica</entry>
		<entry>System has PCMCIA (i.e Laptops)</entry>
		<entry>Exact match required, 1 for available PCMCIA or 0 for none.</entry>
	      </row>
	      <row>
		<entry>hostid</entry>
		<entry>Hex representation of IP address</entry>
		<entry>Exact match required</entry>
	      </row>
	      <row>
		<entry>arch</entry>
		<entry>Architecture of host</entry>
		<entry>Exact match required</entry>
	      </row>
	      <row>
		<entry>karch</entry>
		<entry>Kernel Architecture of host (i.e. SMP kernel, Athlon Kernel)</entry>
		<entry>Exact match required</entry>
	      </row>
	      <row>
		<entry>disksize</entry>
		<entry>Drive device and size</entry>
		<entry>All match types are available.</entry>
	      </row>
	      <row>
		<entry>product</entry>
                <entry>The hardware product name as specified in SMBIOS</entry>
		<entry>Exact match required</entry>
	      </row>
	      <row>
		<entry>product_vendor</entry>
                <entry>The hardware vendor as specified in SMBIOS</entry>
		<entry>Exact match required</entry>
	      </row>
	      <row>
		<entry>board</entry>
                <entry>The system board name as specified in SMBIOS</entry>
		<entry>Exact match required</entry>
	      </row>
	      <row>
		<entry>board_vendor</entry>
                <entry>The system board vendor as specified in SMBIOS</entry>
		<entry>Exact match required</entry>
	      </row>
	      <row>
		<entry>custom1-5</entry>
		<entry>Custom rules using shell scripts</entry>
		<entry>All match types are available.</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
    </section>
  <section id="rules_dialogs">
    <title>Rules with Dialogs</title>
    <para>
        Since openSUSE 11.3 (not SLES11 SP1) you can use dialog popups with checkboxes to select rules you want matched.
    </para>
          <para>
          The following elements must be between the &lt;rules config:type="list"&gt;&lt;rule&gt;&lt;dialog&gt; ... &lt;/dialog&gt;&lt;/rule&gt;&lt;/rules&gt; tags in the rules.xml file.
          </para>
          <informaltable frame='top'>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Attribute</entry>
                <entry>Values</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>dialog_nr</entry>
                <entry><para>All rules with the same dialog_nr are presented in the same popup dialog. The same dialog_nr can appear in multiple rules.
                </para><screen>&lt;dialog_nr config:type="integer"&gt;3&lt;/dialog_nr&gt;</screen></entry>
                <entry>This element is optional and the default for a missing dialog_nr is always "0". If want to use one popup for all rules, you don't need to specify the dialog_nr.</entry>
              </row>
              <row>
                <entry>element</entry>
                <entry><para>Each element<remark>emap 2011-11-07: Rather each rule needs a unique element id?</remark> needs a unique id. Even if you have more than one dialog, you must not use the same id twice like an id "1" on dialog 1 and and id "1" on dialog 2. That's different than with &lt;ask&gt; dialogs, where you can have the same &lt;element&gt; id on multiple dialogs.<remark>emap 2011-11-07: Do we need to explain the ask-dialog here? It's distracting.</remark>
                </para><screen>&lt;element config:type="integer"&gt;3&lt;/element&gt;</screen></entry>
                <entry>Optional. If left out, &ay; adds his own ids internally. Then you cannot specify conflicting rules (see below).</entry>
              </row>
              <row>
                <entry>title</entry>
                <entry><para>Caption of the popup dialog
                </para><screen>&lt;title&gt;Desktop Selection&lt;/title&gt;</screen></entry>
                <entry>Optional</entry>
              </row>
              <row>
                <entry>question</entry>
                <entry><para>Question shown in the popup behind the checkbox.
                </para><screen>&lt;question&gt;KDE Desktop&lt;/question&gt;</screen></entry>
                <entry>Optional. If you don't configure a text here, the name of the XML file that is triggered by this rule will be shown instead.</entry>
              </row>
              <row>
                <entry>timeout</entry>
                <entry><para>Timeout in seconds after which the dialog will automatically "press" the okay button. Useful for a non-blocking installation in combination with rules dialogs.
                </para><screen>&lt;timeout config:type="integer"&gt;30&lt;/timeout&gt;</screen></entry>
                <entry>Optional. A missing timeout will stop the installation process until the dialog is confirmed by the user.</entry>
              </row>
              <row>
                <entry>conflicts</entry>
                <entry><para>A list of element ids (rules) that conflict with this rule. If this rule matches or is selected by the user, all conflicting rules are deselected and disabled in the popup. Take care that you do not create deadlocks.
                </para><screen>&lt;conflicts config:type="list"&gt;
  &lt;element config:type="integer"&gt;1&lt;/element&gt;
  &lt;element config:type="integer"&gt;5&lt;/element&gt;
  ...
&lt;/conflicts&gt;</screen></entry>
                <entry>optional</entry>
              </row>
            </tbody>
          </tgroup>
          </informaltable>
          <para>
            Here is an example of how to use dialogs with rules:
          </para>
        <screen>
<![CDATA[
  <rules config:type="list">
    <rule>
        <custom1>
            <script>
echo -n 100
            </script>
           <match>100</match>
           <match_type>exact</match_type>
        </custom1>
        <result>
            <profile>rules/kde.xml</profile>
            <continue config:type="boolean">true</continue>
        </result>
        <dialog>
            <element config:type="integer">0</element>
            <question>KDE Desktop</question>
            <title>Desktop Selection</title>
            <conflicts config:type="list">
                <element config:type="integer">1</element>
            </conflicts>
            <dialog_nr config:type="integer">0</dialog_nr>
        </dialog>
    </rule>
    <rule>
        <custom1>
            <script>
echo -n 100
            </script>
           <match>101</match>
           <match_type>exact</match_type>
        </custom1>
        <result>
            <profile>rules/gnome.xml</profile>
            <continue config:type="boolean">true</continue>
        </result>
        <dialog>
            <element config:type="integer">1</element>
            <dialog_nr config:type="integer">0</dialog_nr>
            <question>Gnome Desktop</question>
            <conflicts config:type="list">
                <element config:type="integer">0</element>
            </conflicts>
        </dialog>
    </rule>
    <rule>
        <custom1>
            <script>
echo -n 100
            </script>
           <match>100</match>
           <match_type>exact</match_type>
        </custom1>
        <result>
            <profile>rules/all_the_rest.xml</profile>
            <continue config:type="boolean">false</continue>
        </result>
    </rule>
  </rules>
]]>
        </screen>
  </section>
  </section>




  <section id="classes">
    <title>Classes</title>
    <para>
      Classes represent configurations for groups of target systems. Unlike
      rules, classes have to be configured in the control file. Then classes can be assigned to target systems.
    </para>
    <para>
      Here is an example of a class definition:
    </para>
        <screen>
<![CDATA[
<classes config:type="list">
    <class>
        <class_name>TrainingRoom</class_name>
        <configuration>Software.xml</configuration>
    </class>
</classes>
]]>
        </screen>
    <para>
     The file Software.xml must be in the directory "classes/TrainingRoom/"
     then. It will get fetched from the same place the &ay; profile and rules
     were fetched from.<remark>emap 2011-11-07: Doesn't make much sense. Does
     this mean the directory "classes/TrainingRoom" containing Software.xml
     needs to be in the same location as the ay profile and rules? </remark>
    </para>
    <para>
     If you have multiple profiles and those profiles share parts, better
     use classes for common parts. <!--You just have to change the class and all profiles using that class are fixed too.--><remark>emap 2011-11-07: Sentence doesn't make sense.</remark> You can also use XIncludes.
    </para>
    <para>
      Using the configuration management system,<remark>emap 2011-11-07: Is this the same as the configuration system?</remark> you can define a set of
      classes. A class definition consists of the following variables:
    </para>
    <itemizedlist>
      <listitem>
	<para><remark>emap 2011-11-07: Should the following variables really be upper case?</remark>	        
	  Name: class name
	</para>
      </listitem>
      <listitem>
	<para>	    
	  Descriptions:<remark>emap 2011-11-07: Really plural or rather: Description?</remark> class description
	</para>
      </listitem>
      <listitem>
	<para>	        
	  Order: order (or priority) of the class in the stack of migration<remark>emap 2011-11-07: What migration?</remark>
	</para>
      </listitem>
    </itemizedlist>
    <figure>
      <title>Defining Classes</title>
      <mediaobject>&cms-class-definitions;</mediaobject>	  
    </figure>
    <para>
      You can create as many classes as you need, however it is
      recommended to keep the set of classes as small as possible to keep the
      configuration system concise. For example, the following sets of
      classes can be used:
    </para>
    <itemizedlist>
      <listitem>
	<para>
	  site: classes describing a physical location or site,
	</para>
      </listitem>
      <listitem>
	<para>
	  machine: classes describing a type of machine,
	</para>
      </listitem>
      <listitem>
	<para>
	  role: classes describing the function of the machine,
	</para>
      </listitem>
      <listitem>
	<para>
	  group: classes describing a department or a group within a site
	  or a location.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      A file<remark>emap 2011-11-07: What kind of file would that be? A class
      file?</remark> saved in a class directory can have the same syntax and
      format as a regular control file but represents a subset of the
      configuration. For example, to create a new control file for a special
      computer with a specific network interface, only the control file
      resource which controls the configuration of the network is
      needed. Having multiple network types, you can merge the one needed for
      a special type of hardware with other class files and create a new
      control file which suits the system being installed.<remark>emap 2011-11-07: Not very clear.</remark>
    </para>

  </section>

  <section id="mixinfrulesclasses">
    <title>Mixing Rules and Classes</title>
    <para>
      It is possible to mix rules and classes during an auto-installation
      session. For example you can identify a system using rules which contain
      class definitions in them. The process is described in the figure
      <quote><xref linkend='rulesflow'
	  endterm="rulesflow.title"></xref></quote>.
    </para>
    <para>
      After retrieving the rules and merging them, the generated control file
      is parsed and checked for class definitions. If classes
      are defined, then the class files are retrieved from the original
      repository and a new merge process is initiated.
    </para>
  </section>
  <section id="merging">
    <title>The Merging of Rules and Classes</title>
    <para>
      With classes and with rules, multiple XML files get merged into one resulting
      XML file. This process of merging is often confusing for people, because
      it behaves different than one would expect.
    </para>
    <para>
      For example, the following two XML parts should be merged:
    </para>
      <screen>
&lt;partitioning config:type=&quot;list&quot;&gt;
    &lt;drive&gt;
        &lt;partitions config:type=&quot;list&quot;&gt;
            &lt;partition&gt;
                &lt;filesystem config:type=&quot;symbol&quot;&gt;swap&lt;/filesystem&gt;
                &lt;format config:type=&quot;boolean&quot;&gt;true&lt;/format&gt;
                &lt;mount&gt;swap&lt;/mount&gt;
                &lt;partition_id config:type=&quot;integer&quot;&gt;130&lt;/partition_id&gt;
                &lt;size&gt;2000mb&lt;/size&gt;
            &lt;/partition&gt;
            &lt;partition&gt;
                &lt;filesystem config:type=&quot;symbol&quot;&gt;xfs&lt;/filesystem&gt;
                &lt;partition_type&gt;primary&lt;/partition_type&gt;
                &lt;size&gt;4Gb&lt;/size&gt;
                &lt;mount&gt;/data&lt;/mount&gt;
            &lt;/partition&gt;
        &lt;/partitions&gt;
    &lt;/drive&gt;
&lt;/partitioning&gt;
      </screen>

      <screen>
&lt;partitioning config:type=&quot;list&quot;&gt;
  &lt;drive&gt;
    &lt;initialize config:type=&quot;boolean&quot;&gt;false&lt;/initialize&gt;
    &lt;partitions config:type=&quot;list&quot;&gt;
         &lt;partition&gt;
           &lt;format config:type=&quot;boolean&quot;&gt;true&lt;/format&gt;
           &lt;filesystem config:type=&quot;symbol&quot;&gt;xfs&lt;/filesystem&gt;
           &lt;mount&gt;/&lt;/mount&gt;
           &lt;partition_id config:type=&quot;integer&quot;&gt;131&lt;/partition_id&gt;
           &lt;partition_type&gt;primary&lt;/partition_type&gt;
           &lt;size&gt;max&lt;/size&gt;
         &lt;/partition&gt;
    &lt;/partitions&gt;
    &lt;use&gt;all&lt;/use&gt;
  &lt;/drive&gt;
&lt;/partitioning&gt;
      </screen>

    <para>
      You might expect the profile to contain 3 partitions.  This is not the
      case. You'll end up with two partitions and the first partition is a
      mixup of the swap and the root partition. Settings configured in both
      partitions, like <emphasis>mount</emphasis> or
      <emphasis>size</emphasis>, will be used from the second file.  Settings
      that only exist in the first or second partition, will be copied to the
      merged partition too.<remark>emap 2011-11-07: A little confusing, why not put the merged file here.</remark>
    </para>
    <para>
      In this example, you don't want a second <emphasis>drive</emphasis>. The two drives should be merged into one. With regard to partitions, three separate ones should be defined. 
 <note>
        <title>Workaround for SLES9/SL 10.0 and earlier</title>
        <para>The following workaround only works for SLES9/SL 10.0 and earlier versions.</para>
      </note>
    </para>
      <para>The following method is not officially supported by &ay;. For each
      partition in one file, add an attribute to the partition:
    </para>

      <screen>
&lt;partition dontmerge=&quot;1&quot;&gt;
...
&lt;/partitions&gt;
      </screen>

    <para>
      Because of the new attribute, the merge script will not detect the partitions as the same element type. If you have more files, you may need to add more attributes like <emphasis>dontmerge="2"</emphasis>, etc.
    </para>
   
      <note>
        <title>Solution for SLES 10/SL 10.1 and later</title>
        <para>The following method solves the merging problem for SLES10, SUSE Linux 10.1 and later versions.</para>
      </note>
      
      <para>Use the <emphasis>dont_merge</emphasis> element in the rules or class file:
    </para>

       <screen>
&lt;classes config:type=&quot;list&quot;&gt;
    &lt;class&gt;
        &lt;class_name&gt;swap&lt;/class_name&gt;
        &lt;configuration&gt;largeswap.xml&lt;/configuration&gt;
        &lt;dont_merge config:type=&quot;list&quot;&gt;
            &lt;element&gt;partition&lt;/element&gt;
        &lt;/dont_merge&gt;
    &lt;/class&gt;
&lt;/classes&gt;
      </screen>

      <screen>
&lt;rule&gt;
    &lt;board_vendor&gt;
        &lt;match&gt;ntel&lt;/match&gt;
        &lt;match_type&gt;regex&lt;/match_type&gt;
    &lt;/board_vendor&gt;
    &lt;result&gt;
        &lt;profile&gt;classes/largeswap.xml&lt;/profile&gt;
        &lt;continue config:type=&quot;boolean&quot;&gt;true&lt;/continue&gt;
        &lt;dont_merge config:type=&quot;list&quot;&gt;
          &lt;element&gt;partition&lt;/element&gt;
        &lt;/dont_merge&gt;
    &lt;/result&gt;
    &lt;board_vendor&gt;
        &lt;match&gt;PowerEdge [12]850&lt;/match&gt;
        &lt;match_type&gt;regex&lt;/match_type&gt;
    &lt;/board_vendor&gt;
    &lt;result&gt;
        &lt;profile&gt;classes/smallswap.xml&lt;/profile&gt;
        &lt;continue config:type=&quot;boolean&quot;&gt;true&lt;/continue&gt;
        &lt;dont_merge config:type=&quot;list&quot;&gt;
          &lt;element&gt;partition&lt;/element&gt;
        &lt;/dont_merge&gt;
    &lt;/result&gt;
&lt;/rule&gt;
      </screen>

  </section>
</chapter>

      <!--
       Local Variables:
       mode: xml
       sgml-parent-document: ("autoyast2.xml" "book" "chapter")
       End:
      -->
