<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
<!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
  <chapter id="CreateProfile">
  <title >Creating A Control File</title>
  <para>
  </para>
  <section id="Autoinstallation.collectInfo">
    <title>Collecting Information</title>
    <para>
      In order to create the control file, you need to collect
      information about the systems your are going to
      install. This includes hardware data and network
      information among other things. Make sure you have the following information about the machines you want to install:
    </para>
    <itemizedlist>
      <listitem>
	<para>Hard disk types and sizes</para>	  
      </listitem>
      <listitem>
	<para>Graphical interface and attached monitor, if any</para>
      </listitem>
      <listitem>
	<para>Network interface and MAC address if known (for example, when using DHCP)</para>
      </listitem>	
    </itemizedlist>
    <para>
      With these parameters you are ready to go and create a profile of your systems
      to control the auto-installation process.
    </para>
  </section>
  <section id="CreateProfile.CMS">
    <title>
      Using the Configuration Management System (CMS)
    </title>  
    <para>
      In order to create the control file for one or more computers, a configuration
      interface based on &yast;2 is provided. This system depends on existing modules
      which are usually used to configure a computer in regular operation mode,
      for example, after SUSE Linux is installed.
    </para>
    <para>
      The configuration management system lets you create control files easily and
      lets you manage a repository of configurations for the use
      in a networked environment with multiple clients.
    </para>
    <figure>
      <title>Configuration System</title>
      <mediaobject>&autoyast2-maindialog;</mediaobject>
    </figure>
    
    <section>
      <title>Creating a New Profile</title>
      <para>
	With some exceptions, almost all resources of the control file can
	be configured using the configuration management system. The system
	offers flexibility and the configuration of some resources is
	identical to the one available in the &yast;2 Control Center. In
	addition to the existing and familiar modules new
	interfaces were created for special and complex configurations,
	for example for partitioning, general options and software.	  
      </para>
      <para>
	Furthermore, using a CMS guarantees the validity of the resulting control file 
	and its direct use for starting automated installation.
      </para>
      <para>
	Make sure the configuration system is installed (package
	<emphasis>autoyast2</emphasis>) and call it using the <emphasis>YaST2
	  Control Center</emphasis> or as root with the
	following command (make sure the <emphasis>DISPLAY</emphasis> variable is set correctly to
	start the graphical user interface instead of the text based one):
      </para>
      <screen>
/sbin/yast2 autoyast
      </screen>

    </section>


  </section>

  <section id="CreateProfile.Manual">
    <title>Creating/Editing a Control File Manually</title>
    <para>
      If editing the control file manually, make sure it has a valid syntax. To
      check the syntax, use the tools already available
      on the distribution. For example, to verify that the file is well-formed, use the utility <command>xmllint</command> available with the
      <emphasis>libxml2</emphasis> package:     
    </para>
    <screen>
xmllint &lt;control file&gt;
    </screen>
    <para>
      If the control file is not well formed, for example, if a tag is not closed,
      <command>xmllint</command> will report about the errors.
    </para>    
    <para>
      Before going on with the autoinstallation, fix any errors
      resulting from such checks. The autoinstallation process cannot be
      started with an invalid and not well-formed control file.
    </para>

    <para>
      You can use any XML editor available on your system or your
      favorite text editor with XML support (for example, Emacs, Vim). However, it is not 
      optimal to create the control file manually for a large number of machines
      and it should only be seen as an interface between the autoinstallation
      engine and the Configuration Management System (<abbrev>CMS</abbrev>).      
    </para>
    
    <figure id="kxmleditor">
      <title id="kxmleditor.title" >Editing the control file with <command>kxmledit</command></title>
      <mediaobject>&kxmleditor;</mediaobject>
    </figure>

  </section>

  <section id="CreateProfile.XSLT">
    <title>Creating a Profile (Control File) via Script with XSLT</title>
    <para>
      If you have a template and want to change a few things via script or command line,
      use an XSLT processor like <emphasis>sablot</emphasis>. For example, if you have an &ay; profile
      and want to fillout the hostname via script for any reason (if doing this so often, you want to script it)
    </para>
    <para>
      First, create an XSL file
    </para>
      <example>
        <title>Example file for replacing hostname/domain by script</title>
        <screen><xi:include href="examples/example.add_hostname.xsl" parse="text"
                      xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </screen>
      </example>
    <para>
      This file expects the "hostname" and the "domain" as parameters from the user.
    </para>
      <screen>&lt;xsl:param name="hostname"/&gt;
&lt;xsl:param name="domain"/&gt;</screen>
      <para>There will be a copy of those parameters in the dns section of the control file. That means,
      if there already is a domain element in the dns section, you will get a second one (no good).</para>
    <remark>mdejmek: why is this no good? please explain</remark>
    <para>
      If you want to create a new &ay; profile now from the template plus the XSL file, run the following command:
    </para>
      <screen>sabcmd add_hostname.xsl \$hostname=myHost \$domain=my.domain  template.xml</screen>
      <para>
      You will get a filled out &ay; profile then on STDOUT.
    </para>
    <para>
      If you have multiple XSL files you want to apply to a template, do the following:
    </para>
      <screen>
        sabcmd add_hd_vg.xsl \$device=/dev/sda \$partition=p2 \$vg=system \
        | sabcmd add_harddisk.xsl \$device=/dev/system \$lvm=true \
        | sabcmd ....
        | sabcmd add_hostname.xsl \$hostname=myHost \$domain=my.domain
      </screen>
      <para>
      Pipe the output of each sabcmd to the next sabcmd.
    </para>
    <para>
    For more information about XSLT, go to the official Web page <ulink url="http://www.w3.org/TR/xslt">www.w3.org/TR/xslt</ulink>
    </para>
  </section>

  </chapter>

      <!--
       Local Variables:
       mode: xml
       sgml-parent-document: ("autoyast.xml" "book" "chapter")
       End:
      -->

