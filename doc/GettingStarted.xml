<chapter>
  <title>
    Getting Started
  </title>
  <para>
    
  </para>
  <sect1 id="gettingStarted.collectInfo">
    <title>Collect information</title>
    <para>
      You need to collect information about the machines your are going to
      install. This includes among other things hardware data and network
      information. 
      Please make sure you know the following about the machines you want to install:
    </para>
    <itemizedlist>
      <listitem>
	<para>Hard disk types and sizes</para>	  
      </listitem>
      <listitem>
	<para>Graphic interface and attached monitor if any</para>
      </listitem>
      <listitem>
	<para>Network interface and MAC address if known (i.e. when using &dhcp;)</para>
      </listitem>	
    </itemizedlist>
    <para>
      With these parameters you are ready to go and create a profile of your systems
      to control the auto-installation process.
    </para>
  </sect1>
  <sect1 id="gettingStarted.createProfile">
    <title>Create the control file</title>
    <para>
      To create a control file  you can either  use the configuration
      system which covers most of the features of the auto-installation
      system or you can use your favorite (XML) editor. In some cases you may need
      to add some information manually after creating the control file with
      the configuration system.
    </para>     
    <para>
      Make sure the configuration system is installed (package
      <emphasis>autoyast2</emphasis> and call it using the <emphasis>YaST2 Control
	Center</emphasis> or call it directly as root with the
      following command (make sure the <emphasis>DISPLAY</emphasis> variable is set correctly to
      start the graphical user interface instead of the text based one):
    </para>
    <screen>
/sbin/yast2 autoyast
    </screen>
    <para>
      Consult the chapter dealing with the configuration management system to learn more
      about how to create a control file using the system.
    </para>
  </sect1>
  <sect1 id="gettingStarted.decide">
    <title>
      Decide how you wish to boot the target system.
    </title>
    <para>
      A target system can be booted in different ways. Booting the machine
      and initiating the auto-installation process is as important as the
      installation itself. Depending on how many target systems you wish to
      install, the following methods are supported:
    </para>
    <itemizedlist>
      <listitem>
	<para>Floppy</para>
	<para>Not recommended in complex network environments. A Floppy
	  nowadays can't hold all necessary information needed to setup a
	  machine for installation. A Floppy  should only be used in very
	  special cases and if it is used, the default boot floppy components
	  supplied with  &company-suse;  must be modified to match you exact needs.
	</para>
	<para>
	  However, the floppy can be used to store the control file and other
	  information needed for installation.
	</para>
      </listitem>
      <listitem>
	<para>CD-ROM</para>
	<para>
	  You can use the original  &company-suse;  CD-ROMs in combination with other
	  media, i.e. with a floppy to hold the control file or in combination
	  with network where the control file can be located.
	</para>
	<para>
	  It is also possible to create customized CD-ROMs to hold only the
	  package you need in addition to the control file which also can be
	  saved on the CD-ROM. This method requires creation of CD-ROMs
	  every time you wish to change the configuration though.
	</para>
      </listitem>
      <listitem>
	<para>Network
	</para>
	<para>
	  Using the network to boot a target system is the most
	  convenient way for auto-installing. Booting over the network and
	  holding a repository of control files on an accessible server can
	  be very flexible especially when configuring different types of
	  system with different roles and hardware.</para>
      </listitem>
    </itemizedlist>
  </sect1>
  <sect1>
    <title>
      Auto-installing a loose system
    </title>
    <para>
      The best way to auto-install a system  without any network connections
      is by using the standard CDs that come with the  &company-suse;  Linux box. Using the
      CDs in combination with the a floppy disk can let you get started with
      &autoyast2; very fast and without spending much time configuring server
      and network environments.
    </para>
    <para>
      As it will be discussed in the following chapters, you will need to prepare a
      floppy disk with a control file containing all data needed for &yast2; to
      complete the auto-installation process.
    </para>
    <para>
      Create the control file as described in the <link
	linkend="gettingStarted.createProfile">previous</link> section and
      name it <filename>autoinst.xml</filename>. Copy the file
      <filename>autoinst.xml</filename> to a floppy by either mounting the
      floppy or by using the <emphasis>mtools</emphasis>.
    </para>
    <screen>
mcopy autoinst.xml a:
    </screen>

  </sect1>
  <sect1>
    <title>Network installations</title>
    <para>
      User intervention depends much on how the server side of a network installation is
      prepared. In a full network installation, you  have only to turn the
      client on to initiate an auto-installation process. This can also be
      automated using different technologies available today (Remote Power
      Management) or by using	<ulink
	url="http://www.scyld.com/expert/wake-on-lan.html">Wake-on-LAN</ulink> (WOL).
    </para>
    <sect2>
      <title>Setting up an installation repository</title>
      <para>
	A system can be setup to serve as a configuration repository. The clients will access
	the server resources in order to boot, install packages and so on. To
	achieve this, various network services must be properly set up.
      </para>
      <para>
	The installation server should export the  &company-suse;  Linux distribution's files
	via &nfs;. Create a directory on a filesystem with enough free space
	(several gigabytes) and copy the contents of the CDs into this
	directory. This directory is then to be exported via
	&nfs; (via an appropriate entry in
	<filename>/etc/exports</filename>). The following steps describe how to
	create an installation repository:
	
      </para>
      <para>
	Login on the machine designated as installation server and create a
	directory to hold the  &company-suse;  Linux distribution files,
	i.e. <filename> /usr/local/SuSE/current</filename>. 
      </para>
      <para>
	In our example <filename>/usr/local/SuSE/current</filename> is the base directory for the  &company-suse;  Linux
	distribution. The location of this directory can be specified  in the <emphasis>info</emphasis> file or on
	the command line of the kernel (see  below) using the
	<emphasis>install</emphasis>
	keyword. (i.e. <emphasis>install=nfs://192.168.1.1/usr/local/SuSE/current</emphasis>)
      </para>
      <para>
	Now copy the files from  all CDs into the
	<emphasis>current</emphasis> directory or just copy those CDs
	required for the installation. Make sure that all packages needed for
	the installation are copied. Make sure the dot files in the root
	directory of  the CD-ROM are
	also copied, these files serve as identification of the installation
	media. Use the following command to copy the CDs.

      </para>
      <screen>
mount /cdrom
cd /cdrom && cp -va . /usr/local/SuSE/current ; cd -
umount /cdrom
      </screen>
      <para>
	Repeat this sequence for all other CDs. The directory
	can have 2 different structures which can be used for installation:
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    The contents of all CDs is copied into one directory and thus
	    creating single directory structure with a
	    subdirectory <emphasis>suse</emphasis> which included all the
	    packages. This type of structure is recommended as it
	    is easier to manage and will provide a true, single source
	    installation medium.
	  </para>
	  <para>
	    To make the directory look like a single medium for the client,
	    you can modify the package database available on the first CD by
	    replacing the reference to the different CDs to one single CD,
	    which is in our case CD number 1.
	  </para>
	  <para>
	    Use the following 'one liner' to modify the installation path in
	    the text based package database available in the directory
	    <filename>suse/setup/descr</filename>:
	  </para>
	  <screen>
cd /usr/local/SuSE/current/suse/setup/descr
perl -pi -e 's/InstPath:\t0[2|3|4|5|6|7]/InstPath:\t01/' common.pkd
cd -
	  </screen>
	</listitem>
	<listitem>
	  <para>
	    Copy the CDs into subdirectories named after the CD number,
	    i.e. CD1, CD2, etc.
	  </para>
	  <para>
	    Using this structure you will still be able to perform &nfs;
	    installations, but the single directories will be treated as if
	    they were different mediums. 
	  </para>
	</listitem>
      </itemizedlist>
      <para>
	After you have copied the CDs into the installation directory, make
	sure it is exported via &nfs;. You can do that using &yast2; by using the
	&nfs; server module.
      </para>
      <para>
	Additionally, you need to make the following services  start every
	time the system boots.
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    nfsserver
	  </para>
	</listitem>
	<listitem>
	  <para>
	    portmap
	  </para>
	</listitem>
      </itemizedlist>
    </sect2>
    <sect2>
      <title>Setting up  a configuration repository</title>
      <para>
	A configuration repository holds the control files for multiple
	machines. The control files can have any file names, which have to
	specified at the boot time of a client. To avoid supplying the
	profile name for every client, you can only define the directory of
	the control files. If a directory is specified, then the client tries
	to load a file with a name matching it's IP address in hex
	mode. (See <link linkend="Invoking.HTTP"
	  endterm="Invoking.HTTP.title"> </link>). This has the advantage that you will be dealing with
	consistent file names rather than IPs as file names which might lead to
	some confusion.
      </para>
      <para>
	The configuration repository is the same directory you have to define
	if you are using the configuration system for creating control files.
      </para>
      <simplesect>
	<title>&http; Repository</title>
	<para>
	  To be able to use the &http; protocol to retrieve control file while
	  auto-installing, you need a working &http; server on the server
	  side. Install <emphasis>Apache</emphasis> or your favorite web
	  server and enable it using &yast2;. Normally the the web server root
	  directory resides in <filename>/usr/local/httpd/htdocs</filename>
	  so you need to create a subdirectory below the root directory of
	  the web server which will be your configuration repository.
	</para>
	
      </simplesect>
      <simplesect>
	<title>&nfs; Repository</title>
	<para>
	  Create a directory and make it available via &nfs; to the clients by
	  exporting it. This directory may for example be in the same place
	  where you have copied the CDs. (i.e. <filename>/usr/local/SuSE</filename>)
	</para>
  </simplesect>
      <simplesect>
     
	<title>&tftp; Repository</title>
	<para>
	  By default the &tftp; directory is available under
	  <filename>/tftpboot</filename> which can also contain boot images
	  if you are booting over network. Do not forget to enable tftp in
	  the inetd configuration file
	  (<filename>/etc/inetd.conf</filename>). <emphasis>Inetd</emphasis> configuration can be
	  done using &yast2;.
	</para>
      </simplesect>
    </sect2>
  </sect1>
  <sect1 id="Installation.process">
    
    <title>
      The Auto-Installation Process
    </title>
    <para>
      After the system has booted and the control file has been retrieved,
      &yast2; performs configuration of the system according to the information
      contained in the  control
      file. All the configuration is summarized in a window that is shown by
      default and should be deactivated if a full automatic installation is
      needed.      
    </para>
    <para>
      When reaching the point where the summary of the configuration is shown,
      &yast2; has only probed hardware and prepared the system for
      auto-installation, thus, nothing has been changed in the system yet, so
      that in case of any error, the process still can be aborted.
    </para>
    
 
    <para>
      A system should be automatically install-able without the need to have
      any graphic adaptor or monitor. Having a monitor attached to the
      client machine is nevertheless recommended to follow the process and
      to get feedback in case of any errors. Choosing between the Qt and the
      Ncurses interfaces is possible. For headless
      clients, system messages can be monitored using the serial console.
    </para>
    <simplesect id="Installation.Interface.X11">
      <title>
	X11 Interface
      </title>
      <para>
	This is the  default interface while auto-installing. No special
	variables are required to activate it.
      </para>
    </simplesect>
    <simplesect id="Installation.Interface.SerialConsole">
      <title>
	Serial console
      </title>
      <para>
	You can start installing a system using the serial console by adding
	the keyword console (i.e. console=ttyS0) to the command line of the
	kernel. This will start linuxrc in console mode and later in the
	process, &yast2; also is started in serial console mode.
      </para>
    </simplesect>
    <simplesect id="Installation.Interface.Ncurses">
      <title>
	Text based YaST2-Installation
      </title>
      <para>
	This option can also be activated on the command line. This will start
	YaST2 in <emphasis>Ncurses</emphasis> mode. To start &yast2; in text
	mode, add <emphasis>textmode=1</emphasis> on the command line.
      </para>
      <para>
	Starting &yast2; in text mode is recommended when installing  a client
	with less than 64 MB or when X11 is not being configured at all,
	especially on headless machines.
      </para>
    </simplesect>
  </sect1>
    <sect1>    
    <title>
      System Configuration 
    </title>
    <para>
      The system configuration during auto-installation can be seen as the
      most important part of the whole process. Customizing a system to your
      environment needs is what makes an auto-installation system attractive,
      not the installation part.
    </para>
    <para>
      As you have seen in the previous chapters, almost anything can be
      configured automatically on the target system. In addition to the
      pre-defined directives, you can always  use post-scripts to change other
      things in the system. Additionally you can change any system variables and
      if required, copy complete configuration files into the target system.
    </para>
    <sect2>
      <title>
	Post-Install and System Configuration
      </title>
      <para>
	The Post-Installation and the System Configuration are initiated directly after the last
	package is installed in the target system  and is continued after the
	system has booted for the first time.
      </para>
      <para>
	Before the system is booted for the first time, &yast2; writes all data
	collected during installation into the system and finally it writes the
	boot loader in the specified location. In addition to these regular
	tasks, which are also done when performing a regular installation, YaST2
	executes the <emphasis>chroot-scripts</emphasis> as specified in the
	control file. Note that these scripts are executed while the system is
	still not mounted.
      </para>      
      <para>
	If a different kernel than the default is installed, a hard reboot will
	be required. A hard reboot can also be forced during auto-installation,
	independent of the installed kernel. This can be accomplished using the
	<emphasis>reboot</emphasis> property of the
	<emphasis>general</emphasis> resource. (See <link
	  linkend="CreateProfile.General">General Options</link>)
      </para>
    </sect2>
    <sect2>
      <title>System Customization</title>
      <para>
	Most of the system customization is done in the second stage of the
	installation. &yast2; provides most of the important resources needed to
	bring up  a system to a usable , general state. However, you may have
	other requirements for the installed system. If the required
	customizations can't be done using &yast2; resources, then the
	post-install scripts can be used to accomplish this task.
      </para>
      <para>
	You can define an unlimited number of custom scripts in the control
	file either by editing the control file or by using the configuration
	system.	
      </para>      
      </sect2>
    </sect1>

</chapter>

  <!--
  Local Variables:
  mode: xml
  sgml-parent-document: ("autoyast2.xml" "book" "chapter")
  End:
  -->
