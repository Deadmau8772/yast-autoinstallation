/**
 * File:	clients/autoinst_setup.ycp
 * Package:	Auto-installation
 * Summary:	Setup and prepare system for auto-installation
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */

{

    textdomain "autoinst";

    import "AutoInstall";
    import "Installation";
    import "Keyboard";
    import "Kernel";
    import "Mouse";
    import "Language";
    import "Timezone";
    import "Console";
    import "Storage";
    import "Progress";
    import "Bootloader";
    import "Report";
    import "Packages";
    import "SpaceCalculation";
    import "AutoinstStorage";
    import "AutoinstScripts";
    import "AutoinstGeneral";
    import "AutoinstSoftware";



    string help_text = UI(_("<P>
Please wait while the system is prepared for autoinstallation.
</P>
"));
    list progress_stages =
	[
	 _("Load and configure additional kernel modules"),
	 _("Configure General Settings "),
	 _("Execute pre-install user scripts"),
	 _("Create partition plans"),
	 _("Configure Software selections"),
	 _("Configure Bootloader")
	 ];

    list progress_descriptions =
	[
	 _("Loading and configuring additional kernel modules"),
	 _("Configuring general settings..."),
	 _("Executing pre-install user scripts..."),
	 _("Creating partition plans..."),
	 _("Configuring Software selections..."),
	 _("Configuring Bootloader...")
	 ];

    Progress::New(
		  _("Preparing System for Automated Installation"),
		  "",     // progress_title
		  size( progress_stages ),	// progress bar length
		  progress_stages,
		  progress_descriptions,
		  help_text );


    Progress::NextStage();

    // FIXME
    // Additional Kernel modules
    ///////////////////////////////////////////////////////////////////////

    if (is(AutoInstall::loadKernelModules, list) && size(AutoInstall::loadKernelModules) > 0 )
    {
	foreach(`m, AutoInstall::loadKernelModules, ``{
	    if (m["module"]:"" != "")
	    {
		ModuleLoading::Load(m["module"]:"",
				    m["module_arguments"]:"",
				    m["vendor"]:"Additional Module",
				    m["device"]:"Additional Module",
				    false,
				    m["modprobe"]:false);
		if (m["configure"]:false)
		{
		    ModulesConf::ModuleArgs (m["module"]:"",m["module_arguments"]:"" );
		}
	    }

	});
    }

    if (is(AutoInstall::configureKernelModules, list) && size(AutoInstall::configureKernelModules) > 0 )
    {
	foreach(`m, AutoInstall::configureKernelModules, ``{
	    if (m["module"]:"" != "")
	    {
		ModulesConf::ModuleArgs (m["module"]:"",m["module_arguments"]:"" );

	    }

	});
    }


    // configure general settings
    Progress::NextStage();

    AutoinstGeneral::Import(Profile::Flat["general"]:$[]);
    AutoinstGeneral::Write();


    // Scripts
    ///////////////////////////////////////////////////////////////////////////

    Progress::NextStage();

    AutoinstScripts::Import(Profile::Flat["scripts"]:$[]);
    AutoinstScripts::Write("pre-scripts");




    // Partitioning and Storage
    ////////////////////////////////////////////////////////////////////////

    Progress::NextStage();
    AutoinstStorage::Import(Profile::Flat["partitioning"]:[]) ;

    if (!AutoinstStorage::Write())
    {
	y2error("Aborting...");
	return `abort;
    }


    // Software
    //////////////////////////////////////////////////////////////////////////
    Progress::NextStage();
    AutoinstSoftware::Import( Profile::Flat["software"]:$[] );
    if (!AutoinstSoftware::Write())
    {
	Report::Error(_("Error while configuring software selections.
Try again.
"));
	y2error("Aborting...");
	return `abort;
    }

    // Bootloader
    /////////////////////////////////////////////////////////////////////////

    Progress::NextStage();
    AutoInstall::bootloaderSettings();


    Progress::Finish();

    return `next;
}
