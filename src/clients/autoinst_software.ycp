/**
 * File:	clients/autoinst_software.ycp
 * Package:	Autoinstallation Configuration System
 * Authors:	Anas Nashif (nashif@suse.de)
 * Summary:	Handle Package selections and packages
 *
 * $Id$
 */
{

    textdomain "autoinst";
    import "Mode";
    Mode::config = true;


    import "Wizard";
    import "Summary";
    import "Report";
    import "AIsoftware";
    include "wizard/sequencer.ycp";
    include "ui/common_messages.ycp";
    include "autoinstall/dialogs.ycp";

    any ret = nil;
    string func = "";
    map param = $[];

    /* Check arguments */
    if(size(Args()) > 0 && is(Args(0), string)) {
	func = WFM::Args(0);
	if(size(Args()) > 1 && is(Args(1), map))
	    param = WFM::Args(1);
    }
    y2debug("func=%1", func);
    y2debug("param=%1", param);




    define pmInit() ``{

	Pkg::SourceStartCache(true);
	string tmproot = SCR::Read (.target.tmpdir);
	SCR::Execute(.target.mkdir, tmproot + "/root");
	Pkg::TargetInit( tmproot + "/root", true);
    }

    /**
     * Select packages
     */

    define symbol packageSelector() ``{
	string language = UI::GetLanguage(true);

	string title = _("Software Selection");
	string helptext = _("<p>
Select one of the following <b>base</b> selections and click on the detailed button to add
more <b>add-on</b> selections and packages
</p>
");
	pmInit();
	Wizard::CreateDialog();

	Wizard::SetContents(title,
			    `HVCenter(`Label(_("Reading package database..."))),
			    helptext, false, true);

	list available_base_selections = Pkg::GetSelections( `available, "base" );

	list current_base_selections = Pkg::GetSelections( `selected, "base" );
	y2milestone ("current_base_selections %1", current_base_selections);

	// save the current base selection
	string save_selection = current_base_selections[0]:"default";

	// Construct a box with radiobuttons for each software base configuration
	term baseconfs_box = `VBox();

	// sort available_base_selections by order
	// $[ "order" : [ "name", "summary" ], .... ]

	map sorted_base_selections = $[];
	foreach( `selection, available_base_selections,
		 ``{
	    map selection_data = Pkg::SelectionData (selection);
	    if (selection_data != nil)
	    {
		string order = selection_data["order"]:"";
		// use selection name as sort criteria if not given
		if (order == "")
		    order = selection;
		sorted_base_selections[order] = [selection, selection_data["summary"]:("'"+selection+"'")];
	    }
	});

	// construct display box in order
	foreach(`order, `data, sorted_base_selections,
		``{
	    {
		baseconfs_box = add( baseconfs_box, `Left(`RadioButton(`id(data[0]:""),     // id
								       `opt(`notify, `autoShortcut),
								       data[1]:"",              // descrption
								       (data[0]:"" == AIsoftware::base)   )));
	    }
	});

	term contents = `HVSquash(
				  `VBox(
					`HSquash(
						 `VBox(
						       `Frame(
							      // Frame caption for software selection
							      _("Software"),
							      `VBox(
								    `VSpacing(0.3),
								    `RadioButtonGroup(`id(`baseconf),`opt(`notify), baseconfs_box),
								    `VSpacing(0.3)
								    )
							      ),
						       `VSpacing(),

						       // Push button that will pop up the detailed
						       // software selection (e.g. Multimedia, Games,
						       // KDE, Gnome, ... - not the individual packages!)
						       `PushButton( `id(`details),  _("&Detailed selection...") )
						       )
						 )
					)
				  );

	Wizard::SetContents(title, contents, helptext, true, true);

	UI::ChangeWidget(`id(`next), `Label, FinishButtonLabel);
	UI::ChangeWidget(`id(`back), `Enabled, false);
	any ret = nil;
	boolean error_found = false;

	repeat
	    {

		ret = Wizard::UserInput();

		// get the newly selected base configuration
		string base_selection = UI::QueryWidget( `id(`baseconf),`CurrentButton );

		// Inform the package manager on `next about the new (only about a NEW) selection
		// or if the selection has changed

		if (ret == `next)
		{
		    // set the new selection
		    boolean pkgret = Pkg::SetSelection( base_selection );

		    if (size(AIsoftware::pacs)>0)
		    {
			Pkg::DoProvide( AIsoftware::pacs );
		    }

		    y2milestone ( "Selecting '%1' returns: %2", base_selection, pkgret );

		    pkgret = Pkg::ActivateSelections();
		    y2milestone ("Pkg::ActivateSelections() returns %1", pkgret);


		}

		if ( ret == `details )
		{
		    any details_ret = `again;


		    ret = Pkg::SetSelection( base_selection );
		    foreach(string addon, AIsoftware::addons, ``{
			Pkg::SetSelection( addon );
		    });


		    if (size(AIsoftware::pacs)>0)
		    {
			Pkg::DoProvide(AIsoftware::pacs);
		    }

		    y2milestone ( "Selecting '%1' returns: %2", base_selection, ret );
		    // activate current selection before entering package widget
		    Pkg::ActivateSelections();



		    while ( details_ret == `again )
		    {
			details_ret = WFM::CallFunction( `inst_packages( true, true ) );
			y2milestone("details_ret %1", details_ret);
		    }

		    if ( details_ret == `accept )
		    {
			ret = `next;
			Pkg::ActivateSelections();
			break;
		    }
		    else if ( details_ret == `cancel )
		    {
			ret = `cancel;
			break;
		    }
		    else if ( details_ret == `abort )
		    {
			ret = `abort;
			break;
		    }
		}

	    } until ( ret == `next  || ret == `cancel ||  ret == `abort);

	list allpacs = Pkg::GetPackages(`selected, true);

	list seladd = [];
	list selbase = [];
	if ( ret != `abort || ret != `cancel )
	{
	    seladd =  Pkg::GetSelections(`selected, "");
	    selbase =  Pkg::GetSelections(`selected, "base");
	}
	else
	{
	    seladd = AIsoftware::addons;
	    selbase = [AIsoftware::base];
	}



	foreach(string selection , union(selbase, seladd),
		``{
	    Pkg::ClearSelection(selection);
	});

	Pkg::DoRemove (allpacs);
	y2milestone("Still selected: %1", Pkg::GetPackages(`selected, true));


	Pkg::SetSelection(selbase[0]:"");

	foreach(string selection , seladd,
		``{
	    Pkg::SetSelection(selection);
	});
	Pkg::ActivateSelections();
	Pkg::PkgSolve();

	list onlysel = Pkg::GetPackages(`selected, true);
	y2milestone("selection packages: %1, all packages: %2", size(onlysel), size(allpacs));

	AIsoftware::pacs = [];
	foreach(string package, allpacs, ``{
	    if (!contains(onlysel, package)) {
		AIsoftware::pacs = add (AIsoftware::pacs,package);
	    }
	});


	AIsoftware::addons = seladd;
	AIsoftware::base =   selbase[0]:"";

	Wizard::CloseDialog();
	return ret;
    }


    /* create a  summary*/

    if(func == "Summary") {
	ret =  AIsoftware::Summary();
    }
    else if (func == "Import") {
	ret = AIsoftware::Import(param);
    }
    else if (func == "Reset") {
	AIsoftware::Import($[]);
	ret =  $[];
    }
    else if (func == "Change") {
	ret  = packageSelector();	
    }
    else if (func == "Result") {
	ret = AIsoftware::Export();
    }
    /* unknown function */
    else {
	y2error("unknown function: %1", func);
	ret = false;
    }

    y2debug("ret=%1", ret);
    y2milestone("Software auto finished");
    y2milestone("----------------------------------------");

    return ret;
    
/* Finish */
}
