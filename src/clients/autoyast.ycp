/**
 * File:	clients/autoyast.ycp
 * Summary:	Main file for client call
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{
    textdomain "autoinst";
    import "Wizard";
    import "Mode";
    Mode::SetMode("autoinst_config");

    import "Profile";
    import "AutoinstConfig";
    import "Y2ModuleConfig";
    import "Label";
    import "Sequencer";
    import "Popup";
    import "AddOnProduct";
    import "CommandLine";
    import "Y2ModuleConfig";

    include "autoinstall/dialogs.ycp";
    include "autoinstall/conftree.ycp";
    include "autoinstall/wizards.ycp";


    if (size(Y2ModuleConfig::GroupMap) == 0)
    {
        Wizard::CreateDialog();
        Popup::Error(_("Error while reading configuration data."));
        Wizard::CloseDialog();
        return `abort;
    }

    Pkg::CallbackImportGpgKey("AutoInstall::callbackTrue");
    Pkg::CallbackAcceptUnknownGpgKey("AutoInstall::callbackTrue");
    Pkg::CallbackAcceptFileWithoutChecksum("AutoInstall::callbackTrue");
    Pkg::CallbackAcceptUnsignedFile("AutoInstall::callbackTrue");

    void openFile( map <string, any> options ) {
        if( !Profile::ReadXML( options["filename"]:"" ) ) {
            Popup::Error(_("Error while parsing the control file.
Check the log files for more details or fix the
control file and try again.
"));
        }
                        Popup::ShowFeedback(_("Reading configuration data"), _("This may take a while"));
                        foreach(string p, map d, Profile::ModuleMap, ``{
                                /* Set resource name, if not using default value */
                                string resource = d["X-SuSE-YaST-AutoInstResource"]:"";
                                if (resource == "")
                                {
                                    resource = p;
                                }
                                y2debug("resource: %1", resource );
                                string tomerge = d["X-SuSE-YaST-AutoInstMerge"]:"";
                                string module_auto =d["X-SuSE-YaST-AutoInstClient"]:"none";
                                any rd = Y2ModuleConfig::getResourceData(d
                                    ,resource);
                                if (rd!=nil) {
                                WFM::CallFunction(module_auto, ["Import",
                                    rd]);
                                }
                                });
                        Popup::ClearFeedback();
    }


    map cmdline = $[
        "id"        : "autoyast2",
        "help"      : _("autoyast"),
        "guihandler" : AutoSequence,
        "actions"   : $[
            "file" :   $[ "handler":openFile, "help":"file operations" ]
        ],
        "options"       : $[
            "filename": $[
                "type":"string",
                "help":"filename=XML_PROFILE"
            ]
        ],
        "mappings"      : $[
            "file"  :   ["filename"]
        ]
    ];


    // command line options
    /* Init variables */
    string command = "";
    list flags = [];
    map<string,any> options = $[];
    string exit = "";
    list l = [];

    CommandLine::Run(cmdline);

    AddOnProduct::CleanModeConfigSources();
    return `exit;
}
