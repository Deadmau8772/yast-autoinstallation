/**
 * File:	clients/autoinst_software.ycp
 * Package:	Autoinstallation Configuration System
 * Authors:	Anas Nashif (nashif@suse.de)
 * Summary:	Handle Package selections and packages
 *
 * $Id$
 */
{

    textdomain "autoinst";

    import "Wizard";
    import "Summary";
    import "Report";
    import "AutoinstConfig";
    import "AutoinstSoftware";
    import "Label";
    import "PackageAI";
    import "AutoInstall";
 
    include "autoinstall/dialogs.ycp";

    any ret = nil;
    string func = "";
    map param = $[];

    /* Check arguments */
    if(size(WFM::Args()) > 0 && is(WFM::Args(0), string))
    {
        func = (string) WFM::Args(0);
        if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
        {
            param = (map) WFM::Args(1);
        }
    }
    y2debug("func=%1", func);
    y2debug("param=%1", param);


    /**
     * Select packages
     * @return symbol
     */
    define symbol packageSelector() ``{
        string language = UI::GetLanguage(true);

        string title = _("Software Selection");
        string helptext = _("<p>
Select one of the following <b>base</b> selections and click <i>Detailed<i> to add
more <b>add-on</b> selections and packages.
</p>
");
        //Pkg::TargetFinish ();
        Pkg::CallbackAcceptFileWithoutChecksum(AutoInstall::callbackTrue_boolean_string);
        Pkg::CallbackAcceptUnsignedFile(AutoInstall::callbackTrue_boolean_string_integer);

        Pkg::TargetInit("/", false);
        // AutoinstSoftware::pmInit();

        Pkg::SourceStartManager(true);

        Wizard::CreateDialog();
        Wizard::SetDesktopIcon("software");

        Wizard::SetContents(title,
                            `HVCenter(`Label(_("Reading package database..."))),
                            helptext, false, true);
        list<map<string,any> > patterns = Pkg::ResolvableProperties ("", `pattern, "");
        y2milestone("available patterns %1",patterns);
        Pkg::TargetInit("/tmp", false); // don't copy the list of really installed packages (#231687)
        // Construct a box with radiobuttons for each software base configuration
        term baseconfs_box = `VBox();

        // sort available_base_selections by order
        // $[ "order" : [ "name", "summary" ], .... ]

        if( patterns != [] ) {
            ret = `again;
            Pkg::PkgReset();
            foreach(string pattern, AutoinstSoftware::patterns, ``{
                Pkg::ResolvableInstall( pattern, `pattern );
            });

            if (size(PackageAI::toinstall) > 0) {
                foreach(string p, PackageAI::toinstall, ``{
                    y2milestone("selecting package for installation: %1 -> %2", p, Pkg::PkgInstall(p));
                });
            }
            if (size(PackageAI::toremove) > 0) {
                foreach(string p, PackageAI::toremove, ``{
                    y2milestone("deselecting package for installation: %1 -> %2", p, Pkg::PkgTaboo(p));
                });
            }
            while ( ret == `again )
            {
                ret = (symbol)WFM::CallFunction( "inst_packages", [ true, true ] );

                if ( ret == `accept )
                    ret = `next;
            }
        }
        list allpacs = Pkg::GetPackages(`selected, true);
        y2milestone("All packages: %1 ( %2 )", allpacs, size(allpacs));

        list<string> seladd = [];
        list<string> selbase = [];
        list<string> patadd = [];
        if ( ret != `back )
        {
            y2milestone("available patterns %1",Pkg::ResolvableProperties ("", `pattern, "") );
            foreach( map<string,any> p, Pkg::ResolvableProperties ("", `pattern, ""), ``{
                if( p["status"]:`nothing == `selected )
                   patadd = add(patadd, p["name"]:"");
            });
        } else {
            patadd = AutoinstSoftware::patterns;
        }



        PackageAI::toinstall = Pkg::FilterPackages(false, true, true, true);
        PackageAI::toremove = Pkg::GetPackages(`taboo, true);
        AutoinstSoftware::patterns = (list<string>)union( patadd, patadd); // FIXME: why are there double entries sometimes?

        Wizard::CloseDialog();
        return (symbol)ret;
    }


    /* create a  summary*/

    if(func == "Summary") {
        ret =  AutoinstSoftware::Summary();
    }
    else if (func == "Import") {
        ret = AutoinstSoftware::Import(param);
    }
    else if (func == "Read") {
	ret = AutoinstSoftware::Read();
    }
    else if (func == "Reset") {
        AutoinstSoftware::Import($[]);
        ret =  $[];
    }
    else if (func == "Change")
    {
        ret  = packageSelector();
    }
    else if (func == "GetModified") {
        ret  = AutoinstSoftware::GetModified() || PackageAI::GetModified();
    }
    else if (func == "SetModified") {
        AutoinstSoftware::SetModified();
        ret = true;
    }
    else if (func == "Export") {
        ret = AutoinstSoftware::Export();
    }
    /* unknown function */
    else {
        y2error("unknown function: %1", func);
        ret = false;
    }

    y2debug("ret=%1", ret);
    y2milestone("Software auto finished");
    y2milestone("----------------------------------------");

    return ret;

/* Finish */
}
