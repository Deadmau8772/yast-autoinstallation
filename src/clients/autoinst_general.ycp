/**
 * File:	clients/autoinst_general.ycp
 * Package:	Autoinstallation Configuration System
 * Summary: 	General Settings
 * Authors:	Anas Nashif<nashif@suse.de>
 *
 * $Id$
 */
{
    textdomain "autoinst";
    import "Mode";
    Mode::config = true;

    import "AIConfig";
    import "Wizard";
    import "Summary";    
    import "Keyboard";        
    import "Mouse";
    import "Language";
    import "Keyboard";    
    import "Timezone";  

   
    include "ui/common_messages.ycp";


    string func = WFM::Args(0);
    map param = $[];
    if (func != "Result")
    {
	param = WFM::Args(1);
	AIConfig::generalSettings = param;
    }
    map ret = $[];


    y2milestone("Imported: (%1)", param);    


    /**
     * Main dialog
     */
    
    define  symbol GeneralOptions() ``{

	map settings = AIConfig::generalSettings;
	
	// Clock
	map _clock 		= settings["clock"]:$[];
	string timezone 	= _clock["timezone"]:"";
	string hwclock 		= _clock["hwclock"]:"";

	// Keyboard
	map _keyboard 		=  settings["keyboard"]:$[];
	string keyboard 	= _keyboard["keymap"]:"";

	map _mouse 		= settings["mouse"]:$[];
	string mouse 		= _mouse["id"]:"";

	
	string language = settings["language"]:"";

	map _mode 		= settings["mode"]:$[];
	boolean reboot 		= _mode["reboot"]:false;
	boolean forceboot	= _mode["forceboot"]:false;
	boolean debugboot 	= _mode["interactive_boot"]:false;
	boolean confirm 	= _mode["confirm"]:false;
	
	term contents =
	    `Top(
		 `VBox(
		       `Left(GetLanguageTerm(language)),
		       `Left(ConfigureKeyboard(keyboard)),
		       `Left(ConfigureMouse(mouse)),
		       `Left(GetTimeZoneTerm(timezone)),
		       `Left(
			     `ComboBox(`id(`hwclock), _("&Hardware clock set to"),
				       [
					// ComboBox entry: hardware clock set to local time
					`item(`id(`hwclock_empty), "", (hwclock == "") ),
					
					// ComboBox entry: hardware clock set to local time
					`item(`id(`hwclock_localtime), _("Local time"), (hwclock == "localtime") ),

					// ComboBox entry: hardware clock set GMT
					`item(`id(`hwclock_gmt ),      _("GMT"),  (hwclock == "GMT")  )
					]

				       )
			     ),
		       `VSpacing(1),
		       `Left(`CheckBox(`id(`reboot), _("Reboot after installation"), reboot)),
		       `Left(`CheckBox(`id(`forceboot), _("Do not reboot after installation even if the system requires it"), forceboot)),
		       `Left(`CheckBox(`id(`confirm), _("Confirm installation?"), confirm)),
		       `Left(`CheckBox(`id(`debugboot), _("Confirm every step of the boot process?"), debugboot))
		       
		       )
		 );


	string help_text = _("<p>This part of the configuration is required for
the autoinstallation. Select the values matching
your hardware and preferences then press <b>Accept</b> to continue.</p>
");


	
	
	
	Wizard::SetContents(_("Environment and Basic Options"),
			    contents, help_text, true , true);

	any ret = nil;
	repeat {
	    ret = UI::UserInput();
	    if (ret == `accept)
	    {
		language= UI::QueryWidget(`id(`language), `Value);
		timezone= UI::QueryWidget(`id(`timezone), `Value);
		keyboard= UI::QueryWidget(`id(`keyboard), `Value);


		symbol hardwareclock = UI::QueryWidget (`id (`hwclock), `Value);
		if (hardwareclock == `hwclock_localtime)		    
		    hwclock = "localtime";		
		else if ( hardwareclock == `hwclock_gmt)
		    hwclock = "GMT";
		
		
		mouse = UI::QueryWidget(`id(`mouse), `Value);
		map m = $[];
	

		reboot = UI::QueryWidget(`id(`reboot), `Value);
		forceboot = UI::QueryWidget(`id(`forceboot), `Value);
		debugboot = UI::QueryWidget(`id(`debugboot), `Value);
		confirm = UI::QueryWidget(`id(`confirm), `Value);
		if (reboot && forceboot) {
		    UI::WarningPopup(_("You cannot request rebooting the machine and
force it not to boot at the same time.
"));
		    continue;
		}
		AIConfig::generalSettings = $[
			     "mouse": $["id": mouse],
			     "keyboard": $["keymap":keyboard],
			     "clock": $[
					"timezone":timezone,
					"hwclock": hwclock
			     ],
			     "language":language,
			     "mode": $[
				       "reboot":reboot,
				       "forceboot":forceboot,
				       "confirm":confirm,
				       "interactive_boot":debugboot
			     ]
		];
	    }
	    y2milestone("param: %1", AIConfig::generalSettings);
	} until (ret == `accept || ret == `cancel);

	return ret;
    }

    /**
     * Language
     *
     */
    define GetLanguageTerm(string language)
    ``{
	boolean use_utf8 = true;		// utf8 is default

	if (!lookup (UI::GetDisplayInfo(), "HasFullUtf8Support", true))
	{
	    use_utf8 = false;		// fallback to ascii
	}
	if (language==""){
	    language = Language::language;
	}
	map languageselsort = mapmap(`lang_code, `lang_info, Language::Selection(),
				``([lang_info[1]:"",	// ASCII value is the key
				    [lang_info[use_utf8?0:1]:"", lang_code]
				   ]));

	term languagesel =
	    `ComboBox(`id(`language), `opt(`notify), _("Lan&guage:"),
			  maplist (`name, `codelist, languageselsort,
				   ``(`item(`id(codelist[1]:""), codelist[0]:"", (language == codelist[1]:"")))));

	return (languagesel);
    }


    /**
     * Keyboards
     *
     */
    define ConfigureKeyboard(string keyboard)
    ``{
	if (keyboard == "")
	{
	    keyboard = Keyboard::GetKeyboardForLanguage( Language::language, "en_US");
	    Keyboard::current_kbd=keyboard;
	}


	term keyboardsel = `dummy();
	list keyboardlist_by_translation =
	    maplist( string keyboard_code, string keyboard_name, Keyboard::Selection(),
		     ``{
			 return `item(`id( keyboard_code ),
				      keyboard_name,
				      Keyboard::current_kbd == keyboard_code);
		     } );

	keyboardsel = `ComboBox( `id( `keyboard ), `opt( `notify ),
				     // title for selection box 'keyboard layout'
				     _("&Keyboard layout"),
				     keyboardlist_by_translation);
	return (keyboardsel);
	}


    /**
     * Timezone
     *
     */

    define GetTimeZoneTerm(string timezone) ``{

	if (timezone=="") {
	    import "Misc";
	    timezone         = Misc::SysconfigRead(.sysconfig.clock.TIMEZONE, timezone );
	    if (timezone=="")
	    {		
		timezone = Timezone::GetTimezoneForLanguage(Language::language, "en_US");
	    }
	}
	// build up timezone selection box

	map zonemap = Timezone::Selection();

	term timezonesel = `ComboBox( `id( `timezone ), `opt( `notify ),
			   // title for selection box 'timezone'
			   _("Time &Zone"),
			   maplist( `name, `key, zonemap,
				    ``{
					return `item( `id( key ), name, key == timezone );
				    })
				      );
	return (timezonesel);
    }


    /**
     * Mouse
     *
     */

    define ConfigureMouse(string mouse)
    ``{
	list mouselist = maplist (string mouse_code, string mouse_name, Mouse::Selection (),
		 ``{
		     return `item(`id (mouse_code),
				  mouse_name,
				  mouse == mouse_code);
		 });
	mouselist = add(mouselist, `item(`id ("probe"), _("Autoprobe"), mouse == "probe"));

	term contents =
		`ComboBox(`id(`mouse),
			  _("&Mouse"),
			  mouselist
			  );
	return contents;
    }

    /**
     * Summary of configuration
     * @return string Formatted summary
     */    
    define string Summary()``{


	map settings 			= AIConfig::generalSettings; 
	string language_name 		= "";
	string keyboard_name 		= "";
	string mouse_name 		= "";
	map mouse 			= settings["mouse"]:$[];
	map keyboard 			= settings["keyboard"]:$[];
	map mode 			= settings["mode"]:$[];
	map clock 			= settings["clock"]:$[];
	string language 		= settings["language"]:"";
	
	if ( mouse["id"]:"" != "" && mouse["id"]:"" != "probe")
	{
	    Mouse::Set(mouse["id"]:"");
	    mouse_name = Mouse::MakeProposal(false, false);
	}
	else
	{
	    mouse_name = "probe";
	}

	if (language!="")
	{
	    Language::Set(language);
	    language_name= Language::MakeProposal(false, false);
	}
	if (keyboard!="")
	{
	    Keyboard::SetLanguage(keyboard["keymap"]:"");
	    keyboard_name = Keyboard::Name();
	}

	string hwclock = "";
	if ( clock["hwclock"]:"" != "" )
	{
	    hwclock = (clock["hwclock"]:"" == "GMT") ?  _("GMT") : _("Local time");
	}
	
	string summary = "";
	summary = Summary::AddHeader(summary, _("Language"));
	summary = Summary::AddLine(summary, (language_name != "") ?
				   language_name : Summary::NotConfigured());
	summary = Summary::AddHeader(summary, _("Keyboard"));
	summary = Summary::AddLine(summary, (keyboard_name != "") ?
				   keyboard_name : Summary::NotConfigured());

	summary = Summary::AddHeader(summary, _("Time Zone"));
	summary = Summary::AddLine(summary, (clock["timezone"]:"" != "") ?
				   clock["timezone"]:"" : Summary::NotConfigured());

	summary = Summary::AddHeader(summary, _("Mouse"));
	summary = Summary::AddLine(summary, (mouse_name != "") ?
				   mouse_name : Summary::NotConfigured());

	summary = Summary::AddHeader(summary, _("Hardware clock"));
	summary = Summary::AddLine(summary, ( hwclock == "" ) ? _("Default") : hwclock );

	summary = Summary::AddHeader(summary, _("Reboot after installation"));
	summary = Summary::AddLine(summary, (mode["reboot"]:false) ?
				   _("Yes") : _("No"));

	summary = Summary::AddHeader(summary, _("Confirm every step of the boot process?"));
	summary = Summary::AddLine(summary, (mode["interactive_boot"]:false) ?
				   _("Yes") : _("No"));
	
	summary = Summary::AddHeader(summary, _("Confirm installation?"));
	summary = Summary::AddLine(summary, (mode["confirm"]:false) ?
				   _("Yes") : _("No"));
	
	return summary;				   
    }




/* create a  summary*/
    if (func == "Summary") {    
	return ( Summary());
    }
    else if (func == "Reset") {
	y2milestone ("Calling Reset");
	AIConfig::generalSettings = $[];
	return (true);
    }	
    else if (func == "Change") {
	y2milestone ("Calling Change");
	Wizard::CreateDialog();
	Wizard::RestoreHelp("");
	Wizard::ReplaceButtonBox(Wizard::CancelAcceptButtonBox());    
	any res = GeneralOptions();    
	Wizard::CloseDialog();
	return res;
    }
    else if (func == "Result") {
	y2milestone ("Calling Result");	
	return(AIConfig::generalSettings);
    }
    /* unknown function */
    else {
	y2error("unknown function: %1", func);
	return false;
    }
    

}
