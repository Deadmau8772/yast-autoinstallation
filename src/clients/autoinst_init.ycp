/**
 * File:	clients/autoinst_init.ycp
 * Package:	Auto-installation
 * Summary:	Parses XML Profile for automatic installation
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 *
 * Calls: autoinst_get_profile.ycp
 */

{

    textdomain "autoinst";

    import "Installation";
    import "AutoInstall";
    import "AutoinstConfig";
    import "ProfileLocation";
    import "AutoInstallRules";
    import "Progress";
    import "Report";
    import "Language";
    import "Console";    
    import "Profile";

    import "Label";
    import "Popup";

    include "autoinstall/autoinst_dialogs.ycp";


    string help_text = _("<p>
Please wait while the system is prepared for autoinstallation.</p>
");
    list progress_stages =
	[
	 _("Retrieve & Read Control File"),
	 _("Process Profiles and Rules"),
	 _("Parse control file")
	 ];

    list progress_descriptions =
	[
	 _("Retrieving System Profile"),
	 _("Processing Profiles and Rules"),
	 _("Parsing control file")
	 ];

    Progress::New(
		  _("Preparing System for Automatic Installation"),
		  "",     // progress_title
		  size( progress_stages ),	// progress bar length
		  progress_stages,
		  progress_descriptions,
		  help_text );
    WFM::CallFunction("inst_startup", [] );

    if(UI::PollInput() == `abort)
        if (Popup::ConfirmAbort (`painless))
            return `abort;

    Progress::NextStage();
    Progress::Title(AutoinstConfig::message);


    // Initialize Rules
    AutoInstallRules::Init();
    
    boolean ret = false;
    
    if (!ProfileLocation::Process())
    {
	y2error("Aborting...");
	return `abort;
    }

    sleep(1000);


    if(UI::PollInput() == `abort)
        if (Popup::ConfirmAbort (`painless))
            return `abort;
    
    Progress::NextStage();

    //
    // Set reporting behaviour to default, changed later if required
    //
    
    Report::LogMessages(true);
    Report::LogErrors(true);
    Report::LogWarnings(true);

    if(UI::PollInput() == `abort)
        if (Popup::ConfirmAbort (`painless))
            return `abort;
    
    Progress::NextStage();

    if (! Profile::ReadXML( AutoinstConfig::xml_tmpfile ) || Profile::current == $[]  || Profile::current == nil)
    {
	Popup::Error(_("Error while parsing the control file.
Check the log files for more details or fix the
control file and try again.
"));
	return `abort;
    }
    
    y2milestone ("Autoinstall control file %1",  Profile::current );

    //
    // Copy the control file for easy access by user to  a pre-defined
    // directory
    //

    SCR::Execute(.target.bash, sformat("cp %1 %2/autoinst.xml",  AutoinstConfig::xml_tmpfile, AutoinstConfig::profile_dir));

    // AutoInstall::ProcessSpecialResources();

    boolean use_utf8 = true;		// utf8 is default

    if ( ! lookup (UI::GetDisplayInfo(), "HasFullUtf8Support", true ) )
    {
	use_utf8 = false;		// fallback to ascii
    }

    string language = Profile::current["install","general","language"]:Language::language;

    //
    // Set it in the Language module.
    //
    Language::Set( language );

    //
    // Set Console font
    //
    Console::SelectFont( language );


    Installation::encoding = (use_utf8) ? "UTF-8" : Console::encoding;

    //
    // Set it in YaST2
    //
    UI::SetLanguage (language, Installation::encoding);
    WFM::SetLanguage(language, "UTF-8");



    sleep(1000);
    Progress::Finish();

    return `next;
}
