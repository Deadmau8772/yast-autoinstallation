/**
 * File:	clients/autoinst_configure.ycp
 * Package:	Auto-installation
 * Author:      Anas Nashif <nashif@suse.de>
 * Summary:	This module finishes auto-installation and configures
 *		the system as described in the profile file.
 *
 * $Id$
 */

{

    textdomain "autoinst";

    import "Profile";
    import "AutoInstall";
    import "AutoinstScripts";
    import "Product";
    import "Wizard";
    import "Call";
    import "Y2ModuleConfig";


    integer current_step    = 0;    // Required by logStep()

    string resource = "";
    string module_auto = "";


    /**
     * Display a step in the LogView widget and increment the progress bar.
     * Uses global variable 'current_step'.
     *
     * @param step_descr description of the step.
     */
    define void logStep( string step_descr ) ``{
	current_step = current_step + 1;
	UI::ChangeWidget( `id(`progress), `Value, current_step );
	UI::ChangeWidget( `id(`log), `LastLine, step_descr + "\n" );
	return;
    };



    // Help text for last dialog of base installation
    string help_text = _("<p>
Please wait while the system is being configured.
</p>");


    integer max_steps = size(Y2ModuleConfig::ModuleMap) + 3;
    term contents = `VBox(
              `LogView(`id(`log), "", 10, 0 ),

              // Progress bar that displays overall progress in this dialog
              `ProgressBar(`id(`progress), _("Progress"), max_steps, 0 )
              );
	Wizard::ReplaceButtonBox(Wizard::BackAbortInstallationNextButtonBox());
    Wizard::SetContents(
              // Dialog title for SuSEconfig dialog
              _("Configuring System according to auto-install settings"),
              contents, help_text, false, false);

    Wizard::DisableAbortButton();



    y2debug("Module map: %1", Y2ModuleConfig::ModuleMap);
    y2debug("Flat profile: %1", Profile::Flat);


    list deps = [];
    if (haskey(Profile::Flat, "dependencies"))
	deps = (list)eval(Profile::Flat["dependencies"]:$[]);
    else
	deps = (list)Y2ModuleConfig::Deps();

    y2milestone("Order: %1", maplist(map d, deps, ``(d["res"]:"")));

    foreach(map r, deps,
	    ``{
	string p = r["res"]:"";
	map d = r["data"]:$[];

	if (d["X-SuSE-YaST-AutoInst"]:"" == "all" || d["X-SuSE-YaST-AutoInst"]:"" == "write")
	{
	    if (haskey(d,"X-SuSE-YaST-AutoInstResource") &&
                d["X-SuSE-YaST-AutoInstResource"]:"" != "" )
	    {
		resource = d["X-SuSE-YaST-AutoInstResource"]:"unknown";
	    }
	    else
	    {
		resource = p;
	    }
	    y2milestone("current resource: %1", resource);

	    // determine name of client, if not default name
	    if (haskey(d,"X-SuSE-YaST-AutoClient"))
		module_auto = d["X-SuSE-YaST-AutoClient"]:"none";
	    else
		module_auto = sformat("%1_auto", p);

	    map result = $[];
	    if (haskey(Profile::Flat , resource) )
	    {
		y2milestone("Writing configuration for %1", p);
		string tomerge = d["X-SuSE-YaST-AutoInstMerge"]:"";
		string tomergetypes = d["X-SuSE-YaST-AutoInstMergeTypes"]:"";
		list MergeTypes = splitstring(tomergetypes, ",");

		if (  size(tomerge) > 0 )
		{
		    integer i = 0;
		    foreach( string res, splitstring(tomerge, ",") ,
			     ``{
			if ( MergeTypes[i]:"map" == "map")
			    result[res] = Profile::Flat[res]:$[];
			else
			    result[res] = Profile::Flat[res]:[];
			i = i + 1;
		    });
		    y2milestone("Calling auto client with: %1", result);
		    if (size(result) > 0 )
			logStep( sformat (_("Configuring %1"), p));
		    else
			logStep( sformat (_("Not Configuring %1"), p));

		    Call::Function(module_auto, ["Import", eval(result) ]);
		    Call::Function(module_auto, ["Write", eval(result) ]);
		}
		else if (d["X-SuSE-YaST-AutoInstDataType"]:"map" == "map")
		{
		    y2milestone("Calling auto client with: %1",  eval(Profile::Flat[resource]:$[]));
		    if (size(Profile::Flat[resource]:$[]) > 0 )
			logStep( sformat (_("Configuring %1"), p));
		    else
			logStep( sformat (_("Not Configuring %1"), p));
		    Call::Function(module_auto, ["Import", eval(Profile::Flat[resource]:$[])   ]);
		    Call::Function(module_auto, ["Write", eval(Profile::Flat[resource]:$[])  ]);
		}
		else
		{
		    if (size(Profile::Flat[resource]:[]) > 0 )
			logStep( sformat (_("Configuring %1"), p));
		    else
			logStep( sformat (_("Not Configuring %1"), p));

		    y2milestone("Calling auto client with: %1",  eval(Profile::Flat[resource]:[]));
		    Call::Function(module_auto, ["Import",  eval(Profile::Flat[resource]:[]) ]);
		    Call::Function(module_auto, ["Write",  eval(Profile::Flat[resource]:[]) ]);
		}
	    }
	}
	else {
	    logStep( sformat (_("Skipping %1"), p));
	}
    });

    logStep( _("Executing Post-Scripts"));
    AutoinstScripts::Import(Profile::Flat["scripts"]:$[]);
    AutoinstScripts::Write("post-scripts", false);

	// Just in case, remove this file to avoid reconfiguring...
    SCR::Execute(.target.remove, "/var/lib/YaST2/runme_at_boot");

	logStep( _("Finishing Configuration") );
	sleep(100);
    return `next;
}
