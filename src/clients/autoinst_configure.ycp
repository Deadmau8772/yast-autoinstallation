/**
 * File:	clients/inst_autoconf.ycp
 * Package:	Auto-installation
 * Author:      Anas Nashif <nashif@suse.de>
 * Summary:	This module finishes auto-installation and configures
 *		the system as described in the profile file.
 *
 * $Id$
 */

{

    textdomain "autoinst";

    import "Profile";
    import "AutoInstall";
    import "AIScripts";
    import "Product";
    import "Progress";
    import "Call";
    
  
    // Help text for last dialog of base installation
    string help_text = _("<p>
Please wait while the system is being configured.
</p>");

    list progress_stages =
	[
			 _("Configure System"),
			 _("Execute post-install user scripts")
	];


    list progress_descriptions =
	[
			 _("Configuring System..."),
			 _("Executing post-install user scripts...")
	];


    Progress::New(
                        _("Configuring System according to auto-install settings"),
                        "",     // progress_title
			size( progress_stages ),	// progress bar length
			progress_stages,
			progress_descriptions,
                        help_text );


    SCR::Execute(.target.remove, "/var/lib/YaST2/runme_at_boot");

    Progress::NextStage();
    string resource = "";
    string module_auto = "";
 

    // make some adaptions
    if (haskey(Profile::Flat,"x11"))
    {
	map x11conf = Profile::flat["x11"]:$[];
	if (haskey(x11conf, "start_x11"))
	{
	    boolean start_xdm = Profile::Flat["x11", "start_x11"]:false;
	    map runlevels = Profile::Flat["runlevels"]:$[];
	    if (start_xdm)
	    {
		runlevels["default"] = "5";
	    }
	    else
	    {
		runlevels["default"] = "3";
	    }
	    Profile::Flat["runlevels"] = runlevels;
	}
    }
  


    y2debug("Module map: %1", AutoInstall::ModuleMap);

    y2milestone("Flat profile: %1", Profile::Flat);
    foreach(`p,`d, AutoInstall::ModuleMap,
	    ``{

	if (d["Autoinst"]:"" == "all" || d["Autoinst"]:"" == "write")
	{
	    if (haskey(d,"AutoinstResource"))
	    {
		resource = d["AutoinstResource"]:"unknown";
	    }
	    else
	    {
		resource = p;
	    }
	    y2milestone("current resource: %1", resource);

	    // determine name of client, if not default name
	    if (haskey(d,"WriteClient"))
		module_auto = d["AutoClient"]:"none";
	    else
		module_auto = sformat("%1_auto", p);

	    map result = $[];
	    y2milestone("Writing configuration for %1", d["Name"]:"");
	  
	    if (haskey(Profile::Flat , resource) )
	    {
		string tomerge = d["AutoinstMerge"]:"";
		string tomergetypes = d["AutoinstMergeTypes"]:"";
		list MergeTypes = splitstring(tomergetypes, ",");
		if (  size(tomerge) > 0 )
		{		    
		    integer i = 0;
		    foreach( string res, splitstring(tomerge, ",") ,
			     ``{
			if ( MergeTypes[i]:"map" == "map") 
			    result[res] = Profile::Flat[res]:$[];
			else
			    result[res] = Profile::Flat[res]:[];
			i = i + 1;
		    });
		    y2milestone("Calling auto client with: %1", result);
		    Call::Function(module_auto, ["Import", result ]);
		    Call::Function(module_auto, ["Write", result ]);
		}
		else if (d["AutoinstDataType"]:"map" == "map")
		{
		    y2milestone("Calling auto client with: %1",  Profile::Flat[resource]:$[]);
		    Call::Function(module_auto, ["Import", Profile::Flat[resource]:$[]   ]);
		    Call::Function(module_auto, ["Write", Profile::Flat[resource]:$[]  ]);
		}
		else
		{
		    y2milestone("Calling auto client with: %1",  Profile::Flat[resource]:[]);
		    Call::Function(module_auto, ["Import",  Profile::Flat[resource]:[] ]);
		    Call::Function(module_auto, ["Write",  Profile::Flat[resource]:[] ]);
		}
	    }
	}
    });

    Progress::NextStage();
    AIScripts::Import(Profile::Flat["scripts"]:$[]);
    AIScripts::Write("post-scripts");


		      
    Progress::Finish();

    return `next;
}
