/**
 * File:	clients/autoinst_scripts.ycp
 * Package:	Autoinstallation Configuration System
 * Summary:	Scripts
 * Authors:	Anas Nashif<nashif@suse.de>
 *
 * $Id$
 */
{
    textdomain "autoinst";
    import "Mode";
    Mode::config = true;
        
    import "Wizard";
    import "Summary";
    import "AIScripts";

    include "ui/common_messages.ycp";
    include "autoinstall/script_dialogs.ycp";

    
    string func = WFM::Args(0);
    map param = $[];

      /**
     * @return  script configuration dialog
     */
    define string dialog_contents()
	``{
	list allscripts = maplist(`s, AIScripts::merged,
				  ``{
				      return (`item(`id(s["filename"]:"Unknown"),
						    s["filename"]:"Unknown",
						    AIScripts::typeString(s["type"]:""),
						    s["interpreter"]:"Unknown")
					      );
				  });
	term contents =
	    `VBox(
		  `Left(
			`Label(_("Available Scripts"))
			),
		  `Table( `id(`table), `opt(`notify),
			  `header(_("Script Name"), _("Type"), _("Interpreter")),
			  allscripts
			  ),
		  `HBox(
			`PushButton(`id(`new),  NewButtonLabel()),
			`PushButton(`id(`edit), EditButtonLabel()),
			`PushButton(`id(`delete), DeleteButtonLabel())
			)
		  );
	return contents;
    }


    
    /**
     * Main dialog
     *
     */
    global define symbol ScriptsDialog()	
    ``{

	string help = _("TODO");
	string title = _("User Script Management");
	Wizard::SetContents(title,
			    dialog_contents(), help, true, true);

	any ret = nil;
	repeat {
	    ret = UI::UserInput();

	    if (ret == `new) {
		Wizard::CreateDialog();
		ScriptDialog(ret , "" );
		Wizard::CloseDialog();
	    }
	    else if (ret == `edit)
	    {
		string name = UI::QueryWidget(`id(`table), `CurrentItem);
		if (name != nil)
		{
		    Wizard::CreateDialog();
		    ScriptDialog(ret , name  );
		    Wizard::CloseDialog();
		}
		else
		{
		    UI::MessagePopup(_("Select a script first."));
		    continue;
		}

	    }
	    else if (ret == `delete)
	    {
		string name = UI::QueryWidget(`id(`table), `CurrentItem);
		if (name != nil) {
		    AIScripts::deleteScript(name);

		}
		else
		{
		    UI::MessagePopup(_("Select a script first."));
		    continue;
		}
	    }
	    Wizard::SetContents(title,
			    dialog_contents(), help, true, true);


	} until (ret == `accept || ret == `cancel  );

	return ret;
    }


/* create a  summary*/
    if (func == "Summary")
    {    
	return ( AIScripts::Summary());
    }
    else if (func == "Reset")
    {
	y2milestone ("Calling Reset");
	AIScripts::Import($[]);
	return (true);
    }	
    else if (func == "Change") {
	y2milestone ("Calling Change");
	Wizard::CreateDialog();
	Wizard::RestoreHelp("");
	Wizard::ReplaceButtonBox(Wizard::CancelAcceptButtonBox());    
	any res =ScriptsDialog();    
	Wizard::CloseDialog();
	return res;
    }
    else if (func == "Result") {
	y2milestone ("Calling Result");	
	return(AIScripts::Export());
    }
    /* unknown function */
    else {
	y2error("unknown function: %1", func);
	return false;
    }
    
    
}


