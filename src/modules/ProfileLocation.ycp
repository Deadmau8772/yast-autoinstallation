/**
 * File:	modules/ProfileLocation.ycp
 * Package:	Auto-installation
 * Summary:	Process Auto-Installation Location
 * Author:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{
    module "ProfileLocation";
    textdomain "autoinst";
    
    import "AutoinstConfig";
    import "AutoInstallRules";
    import "StorageDevices";
    import "Mode";    
    import "Installation";
    import "Popup";
    import "Label";
   

    include "autoinstall/autoinst_dialogs.ycp";
    include "autoinstall/io.ycp";

 
    /**
     * Constructor
     */
    global define void ProfileLocation ()
	``{
	return;
    }

    
    /**
     * Initiate retrieving of control files and Rules.
     */
    global define boolean Process() ``{

	boolean ok = false;
	boolean ret = false;
	
	y2milestone("Path to remote control file: %1", AutoinstConfig::filepath);

	string localfile  =  AutoinstConfig::xml_tmpfile;

	boolean is_directory = false;

	string filename = basename(AutoinstConfig::filepath);


	if ( filename != "" )
	{
	    y2milestone("File=%1", filename);
	    while (true)
	    {
		ret = Get(AutoinstConfig::scheme,
			  AutoinstConfig::host,
			  AutoinstConfig::filepath,
			  AutoinstConfig::port,
			  AutoinstConfig::user,
			  AutoinstConfig::pass, localfile
			  );
		if (ret)
		{
		    break;
		}
		else
		{
		    string newURI = ProfileSourceDialog(AutoinstConfig::OriginalURI);
		    if ( newURI == "")
		    {
			return (false);
		    }
		    else
		    {
			AutoinstConfig::ParseCmdLine(newURI);
			AutoinstConfig::SetProtocolMessage();
			continue;
		    }				
		}					    			
	    }
	}	
	else
	{
	    is_directory = true;
	}

	string directory = dirname(AutoinstConfig::filepath);
	y2milestone("Dir=%1", directory);
	y2milestone("Fetching Rules File");

	// Get rules file
	ret = Get(AutoinstConfig::scheme,
		  AutoinstConfig::host,
		  directory + "/" +  AutoinstConfig::remote_rules_location ,
		  AutoinstConfig::port,
		  AutoinstConfig::user,
		  AutoinstConfig::pass,
		  AutoinstConfig::local_rules_file);

	if (ret)
	{
	    AutoInstallRules::userrules = true;
	}
	else
	{
	    AutoInstallRules::userrules = false;
	    SCR::Execute(.target.remove, AutoinstConfig::local_rules_file );
	}


	boolean process_rules = true;
	boolean try_default_rules = false;

	if ( AutoInstallRules::userrules )
	{
	    y2milestone("Reading Rules File");
	    AutoInstallRules::Read();

	    ret = AutoInstallRules::GetRules();
	    if (!ret && filename == "")
	    {
		boolean first = true;
		process_rules = false;
		while (true)
		{
		    if (!first)
		    {
			filename = basename(AutoinstConfig::filepath);
			y2milestone("filename: %1", filename);
			if ( filename != "")
			{
			    ret = Get(AutoinstConfig::scheme,
				      AutoinstConfig::host,
				      AutoinstConfig::filepath,
				      AutoinstConfig::port,
				      AutoinstConfig::user, AutoinstConfig::pass,
				      localfile);
			}
		
		    }
		    first = false;
		    
		    if (ret)
		    {
			break;
		    }
		    else
		    {
			string newURI = ProfileSourceDialog(AutoinstConfig::OriginalURI);
			if ( newURI == "")
			{
			    return (false);
			}
			else
			{
			    AutoinstConfig::ParseCmdLine(newURI);
			    AutoinstConfig::SetProtocolMessage();
			    continue;
			}				
		    }		    
	
		}
	    }
	}
	else
	{
		try_default_rules = true;
	}

	if (try_default_rules)
	{
	    y2milestone("Creating default Rules");
	    if (is_directory)
	    {
		// Create rules for hex ip and mac address
		AutoInstallRules::CreateDefault();
	    }
	    else
	    {
		// Create rules for file
		AutoInstallRules::CreateFile( filename );
	    }
	    ret = AutoInstallRules::GetRules();
	    if (!ret)
	    {
		boolean first = true;
		process_rules = false;
		while (true)
		{
		    if (!first)
		    {
			ret = Get(AutoinstConfig::scheme,
				  AutoinstConfig::host,
				  AutoinstConfig::filepath,
				  AutoinstConfig::port,
				  AutoinstConfig::user,
				  AutoinstConfig::pass,
				  localfile);
		    }
		    first = false;
		    if (ret)
		    {
			break;
		    }
		    else
		    {
			string newURI = ProfileSourceDialog(AutoinstConfig::OriginalURI);
			if ( newURI == "")
			{
			    return (false);
			}
			else
			{
			    AutoinstConfig::ParseCmdLine(newURI);
			    AutoinstConfig::SetProtocolMessage();
			    continue;
			}				
		    }
		}
	    }
	}

	if (process_rules)
	{
	    boolean rulesret = AutoInstallRules::Process( AutoinstConfig::xml_tmpfile);
	    y2milestone("rulesret=%1", rulesret);
	    return rulesret;
	}

	return true;
    }




}
