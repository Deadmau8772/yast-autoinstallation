/**
 * File:	AIGeneal.ycp
 * Package:	General Options for Auto-installations
 * Authors:	Anas Nashif (nashif@suse.de)
 * Summary:	Handle general options
 *
 * $Id$
 */
{
    module "AIGeneral";
    textdomain "autoinst";
    
    import "Keyboard";        
    import "Mouse";
    import "Language";
    import "Keyboard";    
    import "Timezone";  

    global string language = "";

    
    global map mouse = $[];    
    global map keyboard = $[];
    global map clock = $[];
    global map mode = $[];
  
    
    
    string version = "";

    define void AIGeneral()``{
	return;
    }

    /**
     * Export data
     *
     */
    global define map Export()``{
	map toexport =
	    $[
	      "mouse":eval(mouse),
	      "keyboard": eval(keyboard),
	      "clock":eval(clock),
	      "mode":eval(mode),
	      "language":eval(language)
	    ];	
	return toexport;	
    }

   
    
    /**
     * Impor data
     *
     */
    global define boolean Import(map settings) ``{
	
	if (size (settings) == 0)
	{
	    //Provide defaults for autoinstallation editing:
	    //Leave empty.	    
	    return true;
	}

	// Check compatibility
	foreach(`k,`v, settings, ``{
	    if (k == "hwclock")
		version="8.0";
	    else if ( k == "keyboard" && is(v, string) )
		version="8.0";
	    else if ( k == "mouse" && is(v, string) )
		version = "8.0";
		
	});


	
	Set(settings);
	return true;	
    }


    
    /**
     * Set data to a certain status
     * @param map settings
     * @return void
     */
    global define void Set(map s) ``{
	if (version == "8.0")
	{
	    mouse["id"] 	= s["mouse"]:"";	    
	    language 		= s["language"]:"";	    
	    keyboard["keymap"] 	= s["keyboard"]:"";	    
	    clock["timezone"] 	= s["timezone"]:"";
	    if (s["hwclock"]:"" == "localtime") 
		clock["utc"] 	=  false;
	    else
		clock["utc"] 	=  true;
	    
	    mode["reboot"]	=  s["reboot"]:false;	    
	}
	else
	{
	    mouse 		= s["mouse"]:$[];
	    keyboard 		= s["keyboard"]:$[];
	    clock		= s["clock"]:$[];
	    mode		= s["mode"]:$[];	    
	    language		= s["language"]:"";
	}
    }

    
    /**
     * Summary of configuration
     * @return string Formatted summary
     */    
    global define string Summary()``{

	string language_name = "";
	string keyboard_name = "";
	string mouse_name = "";
	
	if ( mouse["id"]:"" != "" && mouse["id"]:"" != "probe"){
	    Mouse::Set(mouse["id"]:"");
	    mouse_name = Mouse::MakeProposal(false, false);
	} else {
	    mouse_name = "probe";
	}

	if (language!="") {
	    Language::Set(language);
	    language_name= Language::MakeProposal(false, false);
	}
	if (keyboard!="") {
	    Keyboard::SetLanguage(keyboard["keymap"]:"");
	    keyboard_name = Keyboard::Name();
	}
	    
	string summary = "";
	summary = Summary::AddHeader(summary, _("Language"));
	summary = Summary::AddLine(summary, (language_name != "") ?
				   language_name : Summary::NotConfigured());
	summary = Summary::AddHeader(summary, _("Keyboard"));
	summary = Summary::AddLine(summary, (keyboard_name != "") ?
				   keyboard_name : Summary::NotConfigured());

	summary = Summary::AddHeader(summary, _("Timezone"));
	summary = Summary::AddLine(summary, (clock["timezone"]:"" != "") ?
				   clock["timezone"]:"" : Summary::NotConfigured());

	summary = Summary::AddHeader(summary, _("Mouse"));
	summary = Summary::AddLine(summary, (mouse_name != "") ?
				   mouse_name : Summary::NotConfigured());

	summary = Summary::AddHeader(summary, _("Hardware clock"));
	summary = Summary::AddLine(summary, (clock["utc"]:false) ?
				   _("GMT") : _("Local time"));

	summary = Summary::AddHeader(summary, _("Reboot after installation?"));
	summary = Summary::AddLine(summary, (mode["reboot"]:false) ?
				   _("Yes") : _("No"));

	summary = Summary::AddHeader(summary, _("Confirm every step of the boot process?"));
	summary = Summary::AddLine(summary, (mode["interactive_boot"]:false) ?
				   _("Yes") : _("No"));
	
	summary = Summary::AddHeader(summary, _("Confirm installation?"));
	summary = Summary::AddLine(summary, (mode["confirm"]:false) ?
				   _("Yes") : _("No"));
	
	return summary;				   
    }

}
