/**
 * File:	modules/AutoInstall.ycp
 * Package:	Auto-installation
 * Summary:	Auto-installation related functions module
 * Author:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{
    module "AutoInstall";
    textdomain "autoinst";

    import "Profile";
    import "Mode";
    import "AutoinstConfig";
    import "Report";

    //
    // Auto-Configuration mode
    //
    global boolean autoconf = false;


    /**
     * Read saved data in continue mode
     * @return boolean true on success
     */
    global define boolean Continue() ``{

	//
	// First check if there are some other control files availabe
	// i.e. for post-installation only
	//

	if ( SCR::Read(.target.size, AutoinstConfig::autoconf_file) != -1 )
	{
	    y2milestone("XML Post installation data found: %1", AutoinstConfig::autoconf_file );
	    autoconf = true;
	    Profile::ReadXML (   AutoinstConfig::autoconf_file  );
	    boolean ret = Profile::ReadXML(  AutoinstConfig::xml_tmpfile );
	    SCR::Execute(.target.bash, sformat("/bin/mv %1 %2", AutoinstConfig::autoconf_file, AutoinstConfig::cache));
	    return (ret);
	}
	else
	{
	    boolean ret = Profile::ReadProfileStructure ( AutoinstConfig::parsedControlFile );
	    if ( Profile::current == $[] || !ret )
	    {
		y2milestone( "No saved autoinstall data found" );
		return (false);
	    }
	    else
	    {
		y2milestone( "Found and read saved autoinst data : <%1>", Profile::current );
		SCR::Execute(.target.remove, AutoinstConfig::parsedControlFile);

		return (true);
	    }
	}

    }

    /**
     * Constructer
     * @return: void
     */
    global define void AutoInstall()
	``{
	if (!Mode::config &&  ! ( Mode::cont && Continue() ))
	{
	    if ( SCR::Read(.target.size, AutoinstConfig::xml_tmpfile) != -1  && size ( Profile::current ) == 0)
	    {
		//
		// Profile is available and it has not been parsed yet.
		//
		Profile::ReadXML(  AutoinstConfig::xml_tmpfile );
		Report::Import(Profile::Flat["report"]:$[]);
	    }
	}

	if (Mode::cont && size ( Profile::current ) > 0)
	{
	    y2milestone("Enabling Auto-Installation mode");
	    Mode::autoinst = true;
	    Report::Import(Profile::Flat["report"]:$[]);
	}


	return;
    }


    /**
     * Save configuration
     * @return: boolean true on success
     */
    global define boolean Save() ``{
	return (Profile::SaveProfileStructure( AutoinstConfig::parsedControlFile ));
    }

    /**
     * Finish Auto-Installation by saving misc files
     * @param string destdir
     * @return void
     */
    global define void Finish ( string destdir )
        ``{
            SCR::Execute(.target.bash, "/bin/cp " +  AutoinstConfig::tmpDir
                    + "/pre-scripts/* " + destdir + AutoinstConfig::scripts_dir);
            SCR::Execute(.target.bash, "/bin/cp " +  AutoinstConfig::tmpDir
                    + "/pre-scripts/logs/* " + destdir + AutoinstConfig::logs_dir);

            SCR::Execute(.target.bash, sformat("/bin/cp %1 %2%3",
                        AutoinstConfig::xml_tmpfile ,  destdir ,  AutoinstConfig::xml_file) );
            SCR::Execute(.target.bash, sformat("/bin/chmod 700 %1%2",
                        destdir ,  AutoinstConfig::xml_file) );

            return;
        }

//EOF
}

