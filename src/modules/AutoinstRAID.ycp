/**
 * File:	modules/AutoinstRAID.ycp
 * Module:	Auto-Installation
 * Summary:	RAID
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{

    module "AutoinstRAID";
    textdomain "autoinst";

    import "Storage";
    import "AutoinstStorage";

    include "partitioning/partition_defines.ycp";
    include "partitioning/raid_lib.ycp";


    global map ExistingRAID = $[];

    global boolean OldAvailable = false;


    list region = [0,0];
    map targetMap = $[];

    /**
     * Constructor
     *
     */
    global define void AutoinstRAID () ``{

	targetMap	= Storage::GetTargetMap();
	y2milestone("Current TargetMap: %1", targetMap );

	ExistingRAID	= filter(`k,`v, targetMap, ``(k == "/dev/md"));
	y2milestone("Existing RAID: %1", ExistingRAID );

	if (size(ExistingRAID) > 0 )
	{
	    OldAvailable = true;
	}
	return;
    }


    global define list ExistingMDs ( string md )
	``{
	return(filter( `part, get_possible_rds( targetMap ),  ``( part["raid_name"]:"-1" == md )));
    }


    global define list DeletedMDs ( string md )
	``{
	list ret = [];
	foreach( `dev, `devmap, targetMap,
		 ``{
	    ret = add( ret,
		       filter( `part, devmap["partitions"]:[],
			       ``(
				  part["raid_name"]:"" == md
				  &&
				  part["delete"]:false
				  &&
				  part["fsid"]:0 == Partitions::fsid_raid
				  )
			       )
		       );
	});

	return( flatten(ret) );
    }


    global define list DeleteMDs ()
	``{
	targetMap =  Storage::GetTargetMap();
	list to_bo_deleted = [];
	foreach( `dev, `devmap, targetMap, ``{	    
	    foreach( `part,  devmap["partitions"]:[], ``{	
		if (part["old_raid_name"]:"" != "" && part["delete"]:false)
		{
		    to_bo_deleted= add(to_bo_deleted, part["old_raid_name"]:"");
		}		    		   
	    });
	});
	
	y2milestone("mds to delete: %1", to_bo_deleted);
	
	if (OldAvailable)
	{
	    list mds = targetMap["/dev/md","partitions"]:[];
	    list new_mds = maplist( `md, mds ,``{
		if ( contains(to_bo_deleted, md["device"]:"")) 
		{
		    md["delete"] = true;
		}
		return (md);
	    });
	    y2milestone("new_mds: %1", new_mds );
	    map allmds =  targetMap["/dev/md"]:$[];
	    allmds["partitions"] = new_mds;
	    targetMap["/dev/md"] = allmds;
	    Storage::SetTargetMap(targetMap);
	}

    }  	
    

}

