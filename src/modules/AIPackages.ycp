/**
 * File:	AIPackages.ycp
 * Package:	Package selections for Auto-installation
 * Authors:	Anas Nashif (nashif@suse.de)
 * Summary:	Handle Package selections and packages
 *
 * $Id$
 */

{
    module "AIPackages";
    textdomain "autoinst";
    
    import "Packages";
    import "AIServer";    
    import "Summary";
    

    global boolean PkdInitialized = false;

    global string base = "";    
    
    global list addons = [];
           
    global list pacs = [];

  
    // all available selections
    global list Selections = [];

    /**
     *
     */    
    global define void AIPackages()
	``{
	if (SCR::Read(.target.size, "/var/lib/autoinstall/selections/current") > 0)
	{
	    y2milestone("Selection file found, reading...");
	    ReadSelections();
	}
	else
	{
	   
	    y2milestone("Rep URL: %1", base_url);
	    GetSelections();
	    SaveSelections();
	}
	return;
    }

    /**
     *
     */   
    global define boolean GetSelections()
	``{
	UI::OpenDialog(`opt(`decorated ),`Label(_("Evaluating package selections...")));
	    
	if (!PkdInitialized)
	{
	    string base_url = "dir://" + AIServer::PackageRep;
	    Pkg::SourceInit (base_url);
	}
	else
	{
	    y2milestone("Package Manager alrady called");
	}
	
	list basesel = maplist(`s, Pkg::GetSelections(`all, "base") , ``{
	    any data = Pkg::SelectionData(s);
	    if (is(data , map)) {
		return ([s, data["summary"]:"", data["category"]:"base"]);
	    }
	    else
	    {
		return ([]);
	    }
	});
	list addonsel = maplist(`s, Pkg::GetSelections(`all, "") , ``{
	    any data = Pkg::SelectionData(s);
	    if (is(data , map)) {
		return ([s, data["summary"]:"", data["category"]:"addon"]);
	    }
	    else
	    {
		return ([]);
	    }
	});
	Selections = union(basesel,  addonsel);
	
	    	
	UI::CloseDialog();
	return true;
    }
    
    /**
     *
     */   
    global define boolean SaveSelections()
	``{
	if (Selections != nil && is(Selections,list))
	{
	    SCR::Write(.target.ycp, "/var/lib/autoinstall/selections/current", Selections);
	    return true;
	}
	else
	{
	    return false;
	}	
    }

    /**
     *
     */       
    global define boolean ReadSelections()
	``{
	Selections = SCR::Read(.target.ycp, "/var/lib/autoinstall/selections/current");
	return ( size(Selections)>0 );
    }

    /**
     *
     */   
    global define string getSelDescr(string sel)
	``{
	string result = "Custom Selection";
	foreach(`s , Selections,``{
	    if (select(s,0,"") == sel)
		result = select( s , 1 , "");
	});
	return result;
    }

    /**
     * Set module data
     * @param settings $[..]
     * @return void
     */

    global define void Set(map settings)``{
	base = settings["base"]:"";
	addons =  settings["addons"]:[];
	pacs = settings["packages"]:[];
	return;
    }
    
    /**
     * Dump the settings to a map, for autoinstallation use.
     * @return map
     */
    global define map Export()``{

	return ($[
		  "base":base,
		  "addons":addons,
		  "packages": pacs		  
		]);
    }


    /**
     * Get all the configuration from a map.
     * When called by autoinst_packages (preparing autoinstallation data)
     * the map may be empty.
     * @param settings	$[...]
     * @return	success
     */  
    global define boolean Import(map settings)``{
	
	Set(settings);
	return true;
    }
    
    /**
     * @return Html formatted configuration summary
     */    
    global define string Summary()``{
	string summary = "";

	summary = Summary::AddHeader(summary, _("Base Selection"));
	summary = Summary::AddLine(summary, (base != "") ?
				   getSelDescr(base) + " (" + base + ")" : Summary::NotConfigured());
	summary = Summary::AddHeader(summary, _("Add-on Selections"));
	if (size(addons)>0) {
	    summary = Summary::OpenList(summary);
	    foreach(`a, addons, ``{
		summary = Summary::AddListItem(summary, getSelDescr(a));
	    });
	    summary = Summary::CloseList(summary);
	} else {
	    summary = Summary::AddLine(summary, Summary::NotConfigured());
	}
	summary = Summary::AddHeader(summary, _("Selected Packages"));
	summary = Summary::AddLine(summary, sformat("%1", size(pacs)));

	return summary;
    }


  
}
