/**
 * File:
 *   modules/AIClone.ycp
 *
 * Package:
 *   Autoinstallation Configuration System
 *
 * Summary:
 *   Create a control file from an exisiting machine
 *
 * Authors:
 *   Anas Nashif <nashif@suse.de>
 *
 * $Id$
 *
 *
 */
{
    module "AIClone";
    import "Mode";
    import "XML";
    import "Call";
    import "Profile";

    
    global map Profile = $[];

    include "autoinstall/xml.ycp";

    integer bytes_per_unit = 0;



    // spceial reatment for base resources
    global list base = [];

    // aditional configuration resources o be cloned
    global list additional = [];
	

    
    
    /**
     * Constructor
     */
    global define void AIClone()``{
	
	Mode::normal = true;
	return;
    }


    /**
     * Set root password
     */
    
    define root() ``{
	list shadow = SCR::Read(.etc.shadow);
	map rootacct = select(filter(map acct, shadow, ``(acct["username"]:"" == "root")), 0 , $[]);
	list users = [];
	map rootacct_mod = $[];
	rootacct_mod["user_password"] = rootacct["password"]:"";
	rootacct_mod["encrypted"] = true;
	rootacct_mod["username"] = "root";
	users = add(users, rootacct_mod);
	return users;
    }


    /**
     * Find mount points in running system
     */
    define string findMountpoint(string device, map p, list mounts) ``{
	string mountPoint = "";
	foreach(map mount , mounts, ``{
	    string m = sformat("%1%2", device ,  p["nr"]:"");
	    if (mount["spec"]:"" ==  m )
	    {
		mountPoint = mount["file"]:"";
	    }
	});
	return mountPoint;
    }

    /**
     * Convert units to size
     */

    define units_to_size (list region) ``{
	integer units = select(region,1,0);
	return (units * bytes_per_unit)  -  bytes_per_unit + 1;
    };




    /**
     * Create a partition plan for the calling client
     * @return list partition plan
     */
    global define list Partitioning()``{
	Mode::config = false;
	import "Storage";
	import "Partitions";
	map StorageMap = eval(Storage::GetTargetMap());

	StorageMap = Storage::GetFsysType(StorageMap);
	y2milestone("Storagemap %1", StorageMap);
	list mounts = SCR::Read(.etc.fstab);

	list drives = maplist(`k,`v, StorageMap, ``{
	    bytes_per_unit = v["cyl_size"]:1;
	    list partitions = [];
	    list winp = [];
	    list usepartitions = [];
	    foreach(`pe, v["partitions"]:[], ``{
		map new_pe = $[];
		boolean skipwin = false;
		if (haskey(pe,"fsid"))
		{
		    integer fsid = pe["fsid"]:131;
		    list wintypes = union(Partitions::fsid_wintypes, Partitions::fsid_dostypes);
		    list allwin = union(wintypes, Partitions::fsid_ntfstypes);
		    if (contains(allwin, fsid))
		    {
			y2milestone("Windows partitions found: %1", fsid );
			winp = add(winp, pe["nr"]:0);
			skipwin = true;
		    }

		    new_pe["partition_id"] = pe["fsid"]:131;
		}
		if (haskey(pe,"region"))
		{
		    new_pe["region"] = pe["region"]:[];
		    new_pe["size"] = sformat("%1", units_to_size(pe["region"]:[]));
		}
		if (haskey(pe,"used_fs"))
		{
		    new_pe["filesystem"] = pe["used_fs"]:`reiser;
		}
		if (haskey(pe,"nr"))
		{
		    if (!skipwin)
		    {
			y2milestone("Adding partition to be used: %1",  pe["nr"]:0);
			usepartitions = add(usepartitions, pe["nr"]:0);
		    }
		    new_pe["partition_nr"] = pe["nr"]:0;
		}
		string mountPoint = findMountpoint(k, pe, mounts);
		if (mountPoint != "") {
		    new_pe["mount"] = mountPoint;
		}

		if (!skipwin) {
		    partitions=add(partitions,new_pe);
		}
	    });


	    map drive = $[];
	    drive["partitions"]	= partitions;
	    drive["device"]	= k;

	    if (size(partitions) > 0 )
	    {
		if (size(winp) == 0 )
		{
		    drive["use"]	= "all";
		}
		else
		{
		    list up = [];
		    foreach(integer i, usepartitions, ``{
			up=add(up,sformat("%1", i));
		    });
		    drive["use"]	= mergestring(up, ",");
		}
	    }

	    return drive;
	});
	Mode::config = true;
	return drives;
    }

    /**
     * Return list of software packages of calling client
     * @return list list of installed software package
     */
    global define map Software()``{
	import "Packages";

	boolean ret = Pkg::TargetInit("/", false);
	list allInstalledPackages = Pkg::GetPackages(`installed, true);
	y2debug("installed packages %1", allInstalledPackages);

	map software = $[];
	software["packages"] = allInstalledPackages;
	software["base"] = "Minimal";

	return software;
    }
    

    /**
     * Bootloader options
     */
    global define map Bootloader()``{
	import "Bootloader";
	map bootloader = $[];

	boolean readret = Call::Function("bootloader_auto", ["Read", $[] ]);
	if (readret)
	{
	    bootloader = Call::Function("bootloader_auto", ["Result", $[] ]);
	}		

	return bootloader;

    };

    
    /**
     * General options
     */
    global define map General() ``{
	import "Language";
	import "Keyboard";
	import "Mouse";
	import "Timezone";

	map general = $[];
	general["language"] = Misc::SysconfigRead(.sysconfig.language.DEFAULT_LANGUAGE, Language::language );
	map keyboard = $[];
	keyboard["keymap"]  = Misc::SysconfigRead(.sysconfig.keyboard.YAST2_KBD,  Keyboard::GetKeyboardForLanguage( Language::language, "en_US") );

	general["keyboard"] = keyboard;
	map clock = $[];
	clock["timezone"]   = Misc::SysconfigRead(.sysconfig.clock.TIMEZONE, Timezone::timezone );
	string hwclock = "";
	if ( size( Storage::GetWinPrimPartitions( Storage::GetTargetMap() ) ) > 0 )
	{
	    // Win partitions present ==> assume local time.	    
	    hwclock = "--localtime";
	    y2milestone("Assuming local time");
	}
	else
	{
	    // No Win partitions ==> assume UTC.	    
	    hwclock = "-u";
	    y2milestone("Assuming UTC");
	}
	string hwc 	    = Misc::SysconfigRead(.sysconfig.clock.HWCLOCK, hwclock);
	if (hwc == "--localtime")
	{
	    clock["hwclock"] = "localtime";
	}
	else if (hwc == "-u")
	{
	    clock["hwclock"] = "GMT";
	}
	else
	{
	    clock["hwclock"] = "";
	}
	general["clock"]    = clock;

	map mouse = $[];
	mouse["id"]	    = Misc::SysconfigRead(.sysconfig.mouse.YAST_MOUSE, "probe" );
	general["mouse"]    = mouse;
	return general;
    }





     /**
      * Clone a Resource
      * @param resource name
      * @return list 
      */
     define boolean CommonClone(string resource, map resMap) ``{

	 
	 string data_type = resourceMap["AutoinstDataType"]:"map";
	 string tomerge = resourceMap["AutoinstMerge"]:"";
	 string tomergetypes = resourceMap["AutoinstMergeTypes"]:"";

	 string auto = sformat("%1_auto", resource);
	 resource = resourceMap["AutoinstResource"]:resource;

	 boolean readret = false;
	 
	 map mergedResource = $[];
	 if (size(tomerge) > 0 )
	 {
	     list MergeTypes = splitstring(tomergetypes, ",");
	     list Merge = splitstring(tomerge, ",");
	     integer i = 0;

	     boolean readret = Call::Function(auto , ["Read", $[] ]);
	  
	     
	     foreach ( string res, Merge, ``{
		 if ( MergeTypes[i]:"map" == "map") 
		     Profile::Flat[res] =    Call::Function(auto, ["Result", $[] ]) ;
		 else
		     Profile::Flat[res] = Call::Function(auto, ["Result", [] ]) ;
		 i = i + 1;
	     });
	     
	 }
	 else
	 {
	     if (data_type == "map")
	     {
		 readret = Call::Function(auto , ["Read", $[] ]);
		 Profile::Flat[resource]  = Call::Function(auto, ["Result", $[] ]) ;
	     }
	     else
	     {
		 readret = Call::Function(auto , ["Read", [] ]);
		 Profile::Flat[resource]  = Call::Function(auto, ["Result", [] ]) ;
	     }
	 }

	 return true;

     }

   

    /**
     * Build the profile
     * @return map Profile
     */
    global define void Process()
	``{
	Profile::Reset();
	foreach(string def_resource, map resourceMap, AutoInstall::ModuleMap, ``{
	    // Set resource name, if not using default value

	    string resource = resourceMap[def_resource, "AutoinstResource"]:def_resource;

	    if (contains(additional, resource))
	    {
		boolean ret = CommonClone(def_resource, resourceMap);
	    }

	});

	if (!contains(base, "partitioning"))
	{
	    Profile::Flat["partitioning"] = Partitioning();
	}
	else
	{
	    Profile::Flat["partitioning"] = [$["use":"all"]];
	}

	  
	if (!contains(base, "software"))
	{  
	    Profile::Flat["software"] = Software();
	}
	else
	{
	    Profile::Flat["software"] = $["base":"default"]; 
	}

	if (!contains(base, "bootloader"))
	{
	    Profile::Flat["bootloader"] = Bootloader();
	}

	Profile::Flat["general"] = General();
	Profile::Prepare();
	return;
    }

    /**
     * Write the profile to a defined path
     * @param outputFile Output file path    
     * @return boolean true on success
     */
    global define boolean Write(string outputFile)``{

	Process();	
	boolean ret =  Profile::Save( outputFile );
	return ret;
    }


    /**
     * Export profile, Used only from within autoyast2
     * @return void
     */
    global define map Export()
	``{
	
	import "Profile";
	Profile::Reset();
	Process();	
	return;
    }
}
