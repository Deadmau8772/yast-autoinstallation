/**
 * File:	modules/Y2ModuleConfig.ycp
 * Package:	Auto-installation
 * Summary:	Read data from Y2CC files
 * Author:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */

{
    module "Y2ModuleConfig";
    textdomain "autoinst";

    import "Mode";
    include "autoinstall/io.ycp";


    global map GroupMap = $[];
    global map ModuleMap = $[];

    /**
     * MenuTreeData
     * @return: list ofmodules
     */
    global  list MenuTreeData =[];


	global boolean x11_installed = false;


    /**
     * Constructor
     */
    global define void Y2ModuleConfig () ``{

	// Read module configuration data (y2cc)
	if (!Mode::initial)
	{

	    y2debug("Modules: %1", ModuleMap);
	    list MenuEntries = ReadMenuEntries();
	    ModuleMap = select(MenuEntries,0,$[]);
	    GroupMap = select(MenuEntries,1,$[]);
	    y2debug("Modules: %1 , Groups: %2", ModuleMap, GroupMap);
	}

	if (Mode::config)
	{
	    // construct the tree menu
	    ConstructMenu();
	}

    }

    /**
     * Read module configuration files
     * @return: map
     */

    global define list ReadMenuEntries() ``{
	list directory = SCR::Dir(.autoinst.menuentry.s);
	map configurations = $[];
	map groups = $[];
	foreach (`i, directory, ``{
	    path single_conf = add(.autoinst.menuentry.s, i);
	    list configuration = SCR::Dir(single_conf);

	    foreach(`s , configuration, ``{

		string name = select(splitstring(s, " "), 1 , "");
		string type = select(splitstring(s, " "), 0 , "");

		path main_section = add(.autoinst.menuentry.v, i);
		main_section = add(main_section, s);
		list vals = SCR::Dir(main_section);
		map values = $[];
		foreach(`v, vals, ``{
		    values[v]=SCR::Read(add(main_section,v));
		});

		if (type == "Y2Group")
		{
		    groups[name]=values;
		}
		else if (type == "Y2Module")
		{
			if (name == "x11")
				x11_installed = true;

		    if (values["Autoinst"]:"" == "configure" || values["Autoinst"]:"" == "all")
		    {
			string module_auto = "";
			// determine name of client, if not default name
			if (!haskey(values,"AutoClient"))
			{
			    string client =  name + "_auto";
			    values["AutoClient"] = client;
			}
			configurations[name]=values;
		    }
		}
	    });

	});
	return [configurations, groups];
    }

    /**
     * Get resource name
     */

    global define string getResource( string default_resource) ``{
	return ModuleMap[default_resource, "AutoinstResource"]:default_resource;
    }




    /**
     * Get resource data
     */

    global define any getResourceData( map resourceMap, string resource) ``{


	resource = resourceMap["AutoinstResource"]:resource;

	string data_type = resourceMap["AutoinstDataType"]:"map";
	string tomerge = resourceMap["AutoinstMerge"]:"";
	string tomergetypes = resourceMap["AutoinstMergeTypes"]:"";

	map mergedResource = $[];
	if (size(tomerge) > 0 )
	{
	    list MergeTypes = splitstring(tomergetypes, ",");
	    list Merge = splitstring(tomerge, ",");
	    integer i = 0;
	    foreach ( string res, Merge, ``{
		if ( MergeTypes[i]:"map" == "map")
		    mergedResource[res] = eval(Profile::Flat[res]:$[]);
		else
		    mergedResource[res] = eval(Profile::Flat[res]:[]);
		i = i + 1;
	    });
	    return mergedResource;
	}
	else
	{
	    if (data_type == "map")
		return (eval(Profile::Flat[resource]:$[]));
	    else
		return (eval(Profile::Flat[resource]:[]));
	}

    }




    define void CreateGroupTree (map Groups)
	``{
	include "readconfig.ycp";
        term groupwidget = `VBox ();
        list grouplist = [];
        grouplist = SortGroups (Groups, maplist (`rawname, `group, Groups, ``(rawname)));
        string is_first = "";
        foreach (`rawname, grouplist,
		 ``{
	    // string name    = Translate(Groups[rawname, "Name"]:"???");
	    string name    = ReadKey(Groups[rawname, "Textdomain"]:"base", "Name", Groups[rawname]:$[]);
	    map MeunTreeEntry = $["entry":rawname, "title":name];
	    MenuTreeData = add(MenuTreeData,MeunTreeEntry);
        });
	return;
    }


    define SortGroups (map GroupMap, list GroupList)
	``{
        return
	    sort (`x, `y, GroupList,
		  ``{
		string first = GroupMap[x, "SortKey"]:"";
		string second = GroupMap[y, "SortKey"]:"";
		return (first <= second);
	    });
    }


    define list ConstructMenu() ``{
	include "readconfig.ycp";
	CreateGroupTree(GroupMap);
	foreach(`m,`v, ModuleMap, ``{
	    string domain = v["Textdomain"]:"base";
	    string name = ReadKey (domain, "Name", v);
	    map menu_entry = $["entry":m, "title":name];
	    list menu_list = [];
	    if (haskey(v,"Group")) {
		string parent = v["Group"]:"";
		MenuTreeData = maplist (`k, MenuTreeData, ``{
		    if (k["entry"]:"" == parent) {
			list children = k["children"]:[];
			children = add(children,menu_entry);
			k["children"] = children;
			return(k);
		    }
		    else {
			return (k);
		    }
		});
	    } else {
		MenuTreeData = add(MenuTreeData,menu_entry);
	    }
	});
    }


}
