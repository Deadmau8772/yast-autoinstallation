/**
 * File:	modules/AIsoftware.ycp
 * Package:	Autoyast
 * Summary:	Software
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 *
 */
{
    module "AIsoftware";    
    textdomain "autoinst";

    import "Summary";

    global map Software = $[];
    
    global string base = "";
    global list addons = [];
    global list packages = [];
    global string kernel = "";
    global list post_packages = [];
    
    global list forcedPackages = [];



    
    /**
     * Import data
     * @param settings settings to be imported
     * @return true on success
     */
    global define boolean Import(map settings) ``{

	Software = settings;
	base = settings["base"]:"";
	addons = settings["addons"]:[];
	packages = settings["packages"]:[];
	kernel = settings["kernel"]:"";
	post_packages = settings["post-packages"]:[];
    }


    /**
     * Export data
     * @return dumped settings (later acceptable by Import())
     */
    global define map Export() ``{

	return eval($[
		      "base" 		: base,
		      "addons"		: addons,
		      "packages" 	: packages,
		      "kernel"		: kernel,
		      "post-packages"   : post_packages
		    ]);
    }
    
    /**
     * Summary
     * @return Html formatted configuration summary
     */
    global define string Summary()``{
	string summary = "";
	summary = Summary::AddHeader(summary, _("Base Selection"));
	summary = Summary::AddLine(summary, (base != "") ?
				   base : Summary::NotConfigured());
	summary = Summary::AddHeader(summary, _("Add-on Selections"));
	if (size( addons) > 0 )
	{
	    summary = Summary::OpenList(summary);
	    foreach(`a, addons, ``{
		summary = Summary::AddListItem(summary, a);
	    });
	    summary = Summary::CloseList(summary);
	}
	else
	{
	    summary = Summary::AddLine(summary, Summary::NotConfigured());
	}
	summary = Summary::AddHeader(summary, _("Individualy selected Packages"));
	summary = Summary::AddLine(summary, sformat("%1", size(packages)));

	return summary;
    }    



    


    /**
     * Configure software settings
     * @param void
     * @return boolean
     */
    global define boolean Write()
	``{
	boolean ok = true;
	boolean ret = false;
	
	// y2milestone("set Locale to %1", Language::language);
	Pkg::SetLocale (Language::language);
	
	Packages::Init(true);
	// Standard Packages
	boolean retval = false;
		
	string  base_selection = base;
	if (! Pkg::SetSelection( base_selection ))
	{
	    y2error("Error while setting base selection: %1", base_selection);
	    Report::Error(sformat(_("Could not set base selection: %1"), s));
	    return false;
	}

	foreach(`s, toset(addons),
		``{
	    if (!Pkg::SetSelection( s ))
	    {
		y2error("Error while setting-addon selection: %1", s);
		Report::Warning(sformat(_("Could not set add-on selection %1"), s));
	    }
	});

	// single selected packages

	if (!Pkg::ActivateSelections())
	{
	    return false;
	}

	list extraPackages = calcExtraPackages ();
	y2milestone("Packages selected in autoinstall mode: %1", extraPackages);
	
	if (size(extraPackages) > 0 )
	{
	    Pkg::DoProvide(extraPackages);
	}

	Pkg::DoProvide (Packages::ComputeSystemPackageList());
	Pkg::PkgSolve();


	SpaceCalculation::ShowPartitionWarning();
	y2milestone( "INSTALLING Software Selection: base(%1), addon(%2)",  Pkg::GetSelections(`selected, "base"), Pkg::GetSelections(`selected, ""));

	return (ok);
    }


    global define list calcExtraPackages ()
	``{
		
	list extra_packages = union( packages , forcedPackages);
	
	if (kernel != "")
	{
	    extra_packages = add ( extra_packages , kernel);
	}
	return extra_packages;
    }

    
}
