/**
 * File:	modules/AutoinstGeneral.ycp
 * Package:	Autoyast
 * Summary:	Configuration of general settings for autoyast
 * Authors:	Anas Nashif (nashif@suse.de)
 *
 * $Id$
 */

{

    module "AutoinstGeneral";
    textdomain "autoinst";

    import "AutoInstall";
    import "Summary";
    import "Keyboard";
    import "Mouse";
    import "Language";
    import "Keyboard";
    import "Timezone";
    import "Misc";
    import "Profile";


    // Language
    global string Language = "";

    // Hard Reboot
    global boolean Reboot = false;

    // Dont Hard Reboot
    global boolean ForceBoot = false;

    // Show Reboot Message
    global boolean RebootMsg = false;

    // Show proposal and ask user for confirmation to go on with auto-installation
    // Similar to interactive mode, without letting use change settings
    // Interactive mode implies confirmation as well..
    global boolean Confirm = true;

    // Keyboard
    global map Keyboard = $[];


    // Mouse, if not autoprobed
    global map  Mouse = $[];


    global map Clock = $[];


    global map Mode = $[];


    /**
     * Constructor
     */
    global define void AutoinstGeneral () ``{

	return;
    }



    /**
     * Summary of configuration
     * @return string Formatted summary
     */
    global define string Summary()``{

	string language_name		= "";
	string keyboard_name		= "";
	string mouse_name		= "";

	if ( Mouse["id"]:"" != "" && Mouse["id"]:"" != "probe")
	{
	    Mouse::Set(Mouse["id"]:"");
	    mouse_name = Mouse::MakeProposal(false, false);
	}
	else
	{
	    mouse_name = "probe";
	}

	if (Language != "")
	{
	    Language::Set(Language);
	    language_name= Language::MakeProposal(false, false);
	}

	if (Keyboard  != $[])
	{
	    Keyboard::current_kbd = "";
	    y2milestone("keymap: %1", Keyboard["keymap"]:"");
	    Keyboard::SetLanguage(Keyboard["keymap"]:"");
	    keyboard_name = Keyboard::Name();
	}


	string hwclock = (Clock["hwclock"]:""  == "UTC") ?  _("UTC") : _("Local time");


	string summary = "";
	summary = Summary::AddHeader(summary, _("Language"));
	summary = Summary::AddLine(summary, (language_name != "") ?
				   language_name : Summary::NotConfigured());

	summary = Summary::AddHeader(summary, _("Keyboard"));
	summary = Summary::AddLine(summary, (keyboard_name != "") ?
				   keyboard_name : Summary::NotConfigured());

	summary = Summary::AddHeader(summary, _("Time Zone"));
	summary = Summary::AddLine(summary, ( Clock["timezone"]:"" != "") ?
				   Clock["timezone"]:"" : Summary::NotConfigured());

	summary = Summary::AddHeader(summary, _("Hardware clock"));
	summary = Summary::AddLine(summary,  hwclock );

	summary = Summary::AddHeader(summary, _("Mouse"));
	summary = Summary::AddLine(summary, (mouse_name != "") ?
				   mouse_name : Summary::NotConfigured());

	summary = Summary::AddHeader(summary, _("Confirm installation?"));
	summary = Summary::AddLine(summary, (Mode["confirm"]:false) ?
				   _("Yes") : _("No"));

	summary = Summary::AddHeader(summary, _("Reboot after installation"));
	summary = Summary::AddLine(summary, (Mode["reboot"]:false) ?
				   _("Yes") : _("No"));

	summary = Summary::AddHeader(summary, _("Force Boot after Installation"));
	summary = Summary::AddLine(summary, (Mode["forceboot"]:false) ?
				   _("Yes") : _("No"));


	return summary;
    }

    /**
     * Import Configuration
     */

    global define boolean Import (map settings)
	``{
	Language = 	settings["language"]:"";
	Keyboard =      settings["keyboard"]:$[];;
	Clock	=	settings["clock"]:$[];
	Mouse = 	settings["mouse"]:$[];
	Mode  = 	settings["mode"]:$[];

	return true;
    }


    /**
     * Export Configuration
     */
    global define boolean Export ()
	``{

	map general = $[];

	general["language"] = Language ;
	if (haskey(Keyboard, "keyboard_values") || Keyboard::ExpertSettingsChanged )
	    Keyboard["keyboard_values"] = Keyboard::GetExpertValues();

	general["keyboard"] = Keyboard;
	general["clock"] = Clock;
	general["mouse"] = Mouse;
	general["mode"] = Mode;
	return general;
    }


    /**
     * Write Configuration
     */

    global define boolean Write() ``{
	// Process();
	y2milestone("Writing general settings: keymap -> %1, timezone -> %2",  Keyboard["keymap"]:"", Clock["timezone"]:"" );
	AutoInstall::Confirm = Mode["confirm"]:true;
	AutoInstall::interactive = Mode["confirm"]:true;;


	Keyboard::default_kbd = Keyboard["keymap"]:"";
	Keyboard::SetConsole( Keyboard["keymap"]:"" );
	Keyboard::SetX11( Keyboard["keymap"]:"" );

	// Timezone
	if (Clock["timezone"]:"" != "")
	{
	    Timezone::Set( Clock["timezone"]:"", true );
	}

	// Hardware Clock
	////////////////////////////////////////////////////////////////////////

	Timezone::hwclock =  (Clock["hwclock"]:"" == "UTC" || Clock["hwclock"]:"" == "GMT") ? "-u" : "--localtime";

	// mouse
	////////////////////////////////////////////////////////////////////////

	if ( Mouse["id"]:"" != "probe" && Mouse["id"]:"" != "")
	{
	    Mouse::Set(Mouse["id"]:"");
	}


	// Otherwise, try to find the mouse id from the DB using data supplied by user,
	// at least the device is needed.

	else if (haskey(Mouse,"device"))
	{
	    string device = Mouse["device"]:"none";
	    integer wheels = Mouse["wheels"]:0;

	    map mice = Misc::ReadAlternateFile ("mouse_db.ycp", "mouse_raw.ycp");

	    foreach(`f,`g, mice, ``{
		map data = select(g,1,$[]);
		if ( data["wheels"]:0 == wheels  && data["device"]:"" == device)
		{
		    Mouse["id"] =  f;
		}
	    });
	     Mouse::Set(Mouse["id"]:"");
	}
    }

}
