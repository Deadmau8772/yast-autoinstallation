/**
 * File:	modules/Profile.ycp
 * Module:	Auto-Installation
 * Summary:	Profile handling
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{
    module "Profile";
    textdomain "autoinst";

    import "Mode";
    import "AutoinstConfig";
    import "XML";    

    include "autoinstall/xml.ycp";


    // The Complete current Profile
    global map current = $[];

    // Flat control file with all resources on one level
    global map Flat = $[];

    // the install portion of the XML configuration file
    global map Install = $[];

    // the configure portion of the XML configuration file
    global map Configure = $[];

 
    // defined in Y2ModuleConfig
    global map ModuleMap = $[];


    global string Version = "";

    string Description = "";

    global boolean changed = false;

    /**
     * Constructor
     * @return void
     */
    global define void Profile ()
	``{
	if (Mode::initial)
	{
	    SCR::Execute(.target.mkdir, AutoinstConfig::profile_dir);
	}
	else
	{
	    //
	    // setup profile XML parameters for writing
	    //
	    profileSetup();
	}
	return;
    }


    
    define string DetectVersion()
	``{
	return "";
    }

    
    /**
     * Read Profile properties and Version
     *
     */
    global define void ReadProperties (map properties)
	``{
	Version = properties["version"]:"";
	
	Description = properties["description"]:"";

	if (Version != "3.0" || Version == "")
	{
	    Version = DetectVersion();
	    if (Version == "")
	    {
		y2milestone("Can't detect Profile Version");
		return;
	    }
	} else {
	    y2milestone("AutoYaST Profile Version  %1 Detected.", Version);
	}
		
	return;
    }
    
    /**
     * Import Profile
     * @param map profile
     */
    global define void Import(map profile)
	``{
	y2milestone("importing profile");
	current  = profile;

	ReadProperties(current["properties"]:$[]);

	//
	// Compat stuff here (FIXME)
	//
	
	Configure = profile["configure"]:$[];
	Install = profile["install"]:$[];
	Flat = union( Configure, Install );
	
	return;
    }
    
    /**
     * Prepare Profile for saving and remove empty data structs
     * @return void
     */
    global define void Prepare()
	``{
	// y2debug("Modulemap: %1", ModuleMap );
	y2debug("Flat: %1", Flat );
	
	foreach(string p, map d, ModuleMap, ``{
	    //
	    // Set resource name, if not using default value
	    //
	    
	    string resource = d["X-SuSE-YaST-AutoinstResource"]:"";
	    if (resource == "")
	    {
		resource = p;
	    }
	    string tomerge = d["X-SuSE-YaST-AutoinstMerge"]:"";	    
	    
	    integer s = 0;
	    if ( tomerge == "") {
		if ( d["X-SuSE-YaST-AutoinstDataType"]:"map" == "map" )
		{		
		    s = size(Flat[resource]:$[]);
		}
		else
		{
		    s = size(Flat[resource]:[]) ;
		}
	    }
	    
	    if ( s != 0 || tomerge != "")
	    {
		if (d["X-SuSE-YaST-AutoinstPath"]:"" == "install")
		{
		    if ( d["X-SuSE-YaST-AutoinstDataType"]:"map" == "map" )
		    {
			Install[resource] = Flat[resource]:$[];
		    }
		    else
		    {
			Install[resource] = Flat[resource]:[];
		    }
		}
		else
		{
		    string tomergetypes = d["X-SuSE-YaST-AutoinstMergeTypes"]:"";
		    list MergeTypes = splitstring(tomergetypes, ",");
		    if ( size(tomerge) > 0 )
		    {
			integer i = 0;
			foreach( string res, splitstring(tomerge, ",") , ``{
			    if ( MergeTypes[i]:"map" == "map" )
			    {
				if (Flat[res]:$[] != $[])
				    Configure[res] = Flat[res]:$[];
			    }
			    else 
			    {
				if ( Flat[res]:[] != [])
				    Configure[res] = Flat[res]:[];
			    }
			    i = i + 1;
			});
		    }
		    else if ( d["X-SuSE-YaST-AutoinstDataType"]:"map" == "map" )
		    {
			Configure[resource] = Flat[resource]:$[];
		    }
		    else
		    {
			Configure[resource] = Flat[resource]:[];
		    }
		}
	    }
	});


	if (Install != $[])
	{
	    current["install"] = Install;
	}
	else if (haskey(current,"install"))
	{
	    current=remove( current,"install");
	}

	if (Configure!=$[])
	{
	    current["configure"] = Configure;
	}
	else if (haskey(current,"configure"))
	{
	    current = remove(current,"configure");
	}

	
	return;

    }



    /**
     * Reset profile to initial status
     * @return void
     */
    global define void Reset () ``{
	y2milestone("Resetting profile contents");
	current = $[];
	Install = $[];
	Configure = $[];
	Flat = $[];
	return;
    }



    /**
     * Save YCP data into XML
     * @param  path to file
     * @return	boolean true on success
     */
    global define boolean Save (string file)
    ``{
	Prepare();
	y2debug("Saving data (%1) to XML file %2", current, file);	
	return (XML::YCPToXMLFile(`profile, current,  file));    
    }


    /**
     * Save the current data into a file to be read after a reboot.
     * @param	-
     * @return  true on success
     * @see	Restore()
     */
    global define boolean SaveProfileStructure ( string parsedControlFile)
	``{
	y2milestone("Saving control file in YCP format");
	return SCR::Write( .target.ycp, parsedControlFile, current );
    }

    /**
     * Read YCP data as the control file
     * @param ycp file
     * @return boolean
     */
    global define boolean ReadProfileStructure ( string parsedControlFile )
	``{
	current = (map) SCR::Read( .target.ycp, [ parsedControlFile, $[]] );
	if (current == $[])
	{
	    return false;
	}
	else
	{
	    Import (current);
	    return true;
	}
    }



    /**
     * Read XML into  YCP data
     * @param  path to file
     * @return	boolean
     */
    global define boolean ReadXML (string file)
	``{
	import "AutoinstCompat";

	y2debug("Reading %1", file);
	current = XML::XMLToYCPFile(file);

	if ( current != $[]  && size(current) == 0 )
	{
	    return (false);
	}	
	Import (current);	
	// FIXME: Flat = AutoinstCompat::Compat( Install, Configure);
	return (true);
    }

}
