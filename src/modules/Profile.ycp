/**
 * File:	modules/Profile.ycp
 * Module:	Auto-Installation
 * Summary:	Profile handling
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{
    module "Profile";
    textdomain "autoinst";
    import "XML";
    import "AutoInstall";
    import "Y2ModuleConfig";

    include "autoinstall/xml.ycp";



    // The Complete current Profile
    global map current = $[];


    // Flat control file with all resources on one level
    global map Flat = $[];

    // the install portion of the XML configuration file
    global map Install = $[];

    // the configure portion of the XML configuration file
    global map Configure = $[];

    // Configuration changes!
    global boolean changed = false;

    global string profile_dir	= "/tmp/profile";
    global string modified_profile = profile_dir + "/modified.xml";



    // Local

    // Aditional sysconfi vars
    list SysconfigVars = [];

    // additional forced packages
    list forcedPackages = [];



    /**
     * Constructor
     */

    global define void Profile ()
	``{
	if (Mode::initial)
	    SCR::Execute(.target.mkdir, profile_dir);
	
	// setup profile XML parameters
	profileSetup();	 
	return;
    }

    /**
     * Import Profile
     * @param map profile
     */
    global define void Import(map profile)
	``{
	current  = profile;
	Configure = profile["configure"]:$[];
	Install = profile["install"]:$[];
	Flat = union( Configure, Install );
	return;
    }
    /**
     * Prepare profile for saving and remove empty data structs
     * @return void
     */
    global define void Prepare()``{

	Install = $[];
	Configure = $[];
	current = $[];
	y2debug("FLAT: %1", Flat);
	foreach(`p,`d, Y2ModuleConfig::ModuleMap, ``{

	    // Set resource name, if not using default value
	    string resource = d["AutoinstResource"]:p;
	    string tomerge = d["AutoinstMerge"]:"";
	    if ( size(Flat[resource]:$[]) != 0 || tomerge != "")
	    {
		if (d["AutoinstPath"]:"" == "install")
		{
		    if ( d["AutoinstDataType"]:"map" == "map" )
		    {
			Install[resource] = Flat[resource]:$[];
		    }
		    else
		    {
			Install[resource] = Flat[resource]:[];
		    }
		}
		else
		{

		    string tomergetypes = d["AutoinstMergeTypes"]:"";
		    list MergeTypes = splitstring(tomergetypes, ",");
		    if ( size(tomerge) > 0 )
		    {
			integer i = 0;
			foreach( string res, splitstring(tomerge, ",") , ``{
			    if ( MergeTypes[i]:"map" == "map" && Flat[res]:$[] != $[])
				Configure[res] = Flat[res]:$[];
			    else if (  Flat[res]:[] != [] )
				Configure[res] = Flat[res]:[];
			    i = i + 1;
			});
		    }
		    else if ( d["AutoinstDataType"]:"map" == "map" )
		    {
			Configure[resource] = Flat[resource]:$[];
		    }
		    else
		    {
			Configure[resource] = Flat[resource]:[];
		    }
		}
	    }
	});

	// No interface for those yet...

	if ( Flat["lvm"]:[] != []  )
	    Install["lvm"] = Flat["lvm"]:[]  ;

	if ( Flat["raid"]:[] != [] )
	    Install["raid"] = Flat["raid"]:[];


	// y2milestone("Install: %1", Install);
	if (Install != $[])
	{
	    current["install"] = Install;
	}
	else if (haskey(current,"install"))
	{
	    current=remove( current,"install");
	}
	// y2milestone("Configure: %1", Configure);
	if (Configure!=$[])
	{
	    current["configure"] = Configure;
	}
	else if (haskey(current,"configure"))
	{
	    current=remove(current,"configure");
	}

	// y2milestone("Current Profile: %1", current);
	return;

    }



    /**
     * Reset profile to initial status
     * @return void
     */
    global define void Reset () ``{
	current = $[];
	Install = $[];
	Configure = $[];
	Flat = $[];
	return;
    }



    /**
     * Save YCP data into XML
     * @param  path to file
     * @return	boolean
     */
    global define boolean Save (string file)
    ``{
	Prepare();
	y2debug("Saving data (%1) to XML file %2", current, file);

	if ( find( file, "/") == -1 )
	{
	    return (XML::YCPToXMLFile(`profile, current, sformat("%1/%2", Repository, file)));
	}
	else
	{
	    return (XML::YCPToXMLFile(`profile, current,  file));
	}
    }


    /**
     * Save the current data into a file to be read after a reboot.
     * @param	-
     * @return  true on success
     * @see	Restore()
     */
    global define boolean SaveYCP ( string parsedControlFile)
	``{
	y2milestone("Saving control file in YCP format");
	return SCR::Write( .target.ycp, parsedControlFile, current );
    }

    /**
     * Read YCP data as the control file
     * @param ycp file
     * @return boolean
     */

    global define boolean ReadYCP( string parsedControlFile )
	``{
	current = SCR::Read( .target.ycp, [ parsedControlFile, $[]] );
	if (current == $[])
	{
	    return false;
	}
	else
	{
	    Install = current["install"]:$[];
	    Configure = current["configure"]:$[];
	    Flat = union ( Install, Configure);
	    return true;
	}
    }





    /**
     * Parse()
     * @param action: Reset or default
     * @return	void
     *
     * Parse XML Profile
     */

    global define void Parse (symbol action, string new_path)
    ``{
	if (action == `reset)
	{
	    current = $[];
	}
	else if (action == `load && new_path != "")
	    current = SCR::Read(.xml, new_path);
	else
	    current = SCR::Read(.xml, Repository + "/" + Profile_file);


	Install = current["install"]:$[];
	Configure = current["configure"]:$[];
	Flat = union ( Install, Configure);
	return;
    }



    /**
     * Read XML into  YCP data
     * @param  path to file
     * @return	boolean
     */
    global define boolean Read (string file)
	``{
	import "AutoinstCompat";
	
	y2debug("Reading %1", file);
	current = XML::XMLToYCPFile(file);

	if ( current != $[]  && size(current) == 0 )
	{
	    return (false);
	}

	y2debug("Profile: %1", current);

	Install = current["install"]:$[];
	Configure = current["configure"]:$[];
	Flat = AutoinstCompat::Compat( Install, Configure);			
	
	if (Mode::autoinst)
	{
	    import "AutoInstall";
	    AutoInstall::Profile = Profile::current;
	}
	return true;
    }






    /**
     * Add a single entry to the Sysconfig list of variables
     * @param string file name / path
     * @param string key
     * @param string value
     * @param string package name which uses this variable if installation of package has to be forced.
     * @return void
     */
    global define void addSysconfigVar(string file, string key, string value, string package)
	``{

	SysconfigVars=add(SysconfigVars, $["sysconfig_path":file, "sysconfig_key":key, "sysconfig_value": value]);

	// Add package needed with sysconfig variable to package stack.
	// FIXME
	if (package != "")
	{
	    forcedPackages = add(forcedPackages, package);
	}
    }


}
