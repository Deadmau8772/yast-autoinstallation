/**
 * File:	modules/Profile.ycp
 * Module:	Auto-Installation
 * Summary:	Profile handling
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{
    module "Profile";
    textdomain "autoinst";
    import "XML";
    import "AutoInstall";
    import "Y2ModuleConfig";
    
    include "autoinstall/xml.ycp";



    // The Complete current Profile
    global map current = $[];


    // Flat control file with all resources on one level
    global map Flat = $[];

    // the install portion of the XML configuration file
    global map Install = $[];

    // the configure portion of the XML configuration file
    global map Configure = $[];

    // Configuration changes!
    global boolean changed = false;




    // Local

    // Aditional sysconfi vars
    list SysconfigVars = [];

    // additional forced packages
    list forcedPackages = [];



    /**
     * Constructor
     */

    global define void Profile ()
    ``{
	 // setup profile XML parameters
	 profileSetup();
	 return;
     }

    /**
     * Import Profile
     * @param map profile
     */
    global define void Import(map profile)
	``{
	current  = profile;
	Configure = profile["configure"]:$[];
	Install = profile["install"]:$[];
	Flat = union( Configure, Install );
	return;
    }
      /**
     * Prepare profile for saving and remove empty data structs
     * @return void
     */
    global define void Prepare()``{

	Install = $[];
	Configure = $[];
	current = $[];
	y2debug("FLAT: %1", Flat);
	foreach(`p,`d, Y2ModuleConfig::ModuleMap, ``{

	    // Set resource name, if not using default value
	    string resource = d["AutoinstResource"]:p;
	    string tomerge = d["AutoinstMerge"]:"";
	    if ( size(Flat[resource]:$[]) != 0 || tomerge != "")
	    {
		if (d["AutoinstPath"]:"" == "install")
		{
		    if ( d["AutoinstDataType"]:"map" == "map" )
		    {
			Install[resource] = Flat[resource]:$[];
		    }
		    else
		    {
			Install[resource] = Flat[resource]:[];
		    }
		}
		else
		{
		    
		    string tomergetypes = d["AutoinstMergeTypes"]:"";
		    list MergeTypes = splitstring(tomergetypes, ",");
		    if ( size(tomerge) > 0 )
		    {
			integer i = 0;
			foreach( string res, splitstring(tomerge, ",") , ``{
			    if ( MergeTypes[i]:"map" == "map" && Flat[res]:$[] != $[])
				Configure[res] = Flat[res]:$[];
			    else if (  Flat[res]:[] != [] )
				Configure[res] = Flat[res]:[];
			    i = i + 1;
			});
		    }
		    else if ( d["AutoinstDataType"]:"map" == "map" )
		    {
			Configure[resource] = Flat[resource]:$[];
		    }
		    else
		    {
			Configure[resource] = Flat[resource]:[];
		    }
		}
	    }
	});

	// No interface for those yet...

	if ( Flat["lvm"]:[] != []  )
	    Install["lvm"] = Flat["lvm"]:[]  ;

	if ( Flat["raid"]:[] != [] )
	    Install["raid"] = Flat["raid"]:[];


	// y2milestone("Install: %1", Install);
	if (Install != $[])
	{
	    current["install"] = Install;
	}
	else if (haskey(current,"install"))
	{
	    current=remove( current,"install");
	}
	// y2milestone("Configure: %1", Configure);
	if (Configure!=$[])
	{
	    current["configure"] = Configure;
	}
	else if (haskey(current,"configure"))
	{
	    current=remove(current,"configure");
	}

	// y2milestone("Current Profile: %1", current);
	return;

    }



    /**
     * Reset profile to initial status
     * @return void
     */
    global define void Reset () ``{
	current = $[];
	Install = $[];
	Configure = $[];
	Flat = $[];
	return;
    }



    /**
     * Save YCP data into XML
     * @param  path to file
     * @return	boolean
     */
    global define boolean Save (string file)
    ``{
	Prepare();
	y2debug("Saving data (%1) to XML file %2", current, file);

	if ( find( file, "/") == -1 )
	{
	    return (XML::YCPToXMLFile(`profile, current, sformat("%1/%2", Repository, file)));
	}
	else
	{
	    return (XML::YCPToXMLFile(`profile, current,  file));
	}
    }


    /**
     * Save the current data into a file to be read after a reboot.
     * @param	-
     * @return  true on success
     * @see	Restore()
     */
    global define boolean SaveYCP ( string parsedControlFile)
	``{
	y2milestone("Saving control file in YCP format");
	return SCR::Write( .target.ycp, parsedControlFile, current );
    }

    /**
     * Read YCP data as the control file
     * @param ycp file
     * @return boolean
     */

    global define boolean ReadYCP( string parsedControlFile )
	``{
	current = SCR::Read( .target.ycp, [ parsedControlFile, $[]] );
	if (current == $[])
	{
	    return false;
	}
	else
	{
	    Install = current["install"]:$[];
	    Configure = current["configure"]:$[];
	    Flat = union ( Install, Configure);
	    return true;
	}
    }





    /**
     * Parse()
     * @param action: Reset or default
     * @return	void
     *
     * Parse XML Profile
     */

    global define void Parse (symbol action, string new_path)
    ``{
	if (action == `reset)
	{
	    current = $[];
	}
	else if (action == `load && new_path != "")
	    current = SCR::Read(.xml, new_path);
	else
	    current = SCR::Read(.xml, Repository + "/" + Profile_file);


	Install = current["install"]:$[];
	Configure = current["configure"]:$[];
	Flat = union ( Install, Configure);
	return;
    }



    /**
     * Read XML into  YCP data
     * @param  path to file
     * @return	boolean
     */
    global define boolean Read (string file)
	``{

	y2debug("Reading %1", file);
	current = XML::XMLToYCPFile(file);

	if ( current != $[]  && size(current) == 0 )
	    return (false);

	y2debug("Profile: %1", current);

	Install = current["install"]:$[];
	Configure = current["configure"]:$[];
	Flat = union ( Install, Configure );

	Compat();
	if (Mode::autoinst)
	{
	    import "AutoInstall";
	    AutoInstall::Profile = Profile::current;
	}
	return true;
    }




    /**
     * Provide Compatibility to older distributions.
     */

    define void Compat() ``{
	// 8.0 -> 8.1

	// scripts
	if (
	    haskey(Configure, "pre-scripts") ||
	    haskey(Configure, "post-scripts") ||
	    haskey(Configure, "chroot-scripts")
	    ) {
	    list pre = Configure["pre-scripts"]:[];
	    list post = Configure["post-scripts"]:[];
	    list chroot = Configure["chroot-scripts"]:[];
	    map scripts = $[
			    "pre-scripts":pre,
			    "post-scripts":post,
			    "chroot-scripts":chroot
	    ];
	    Configure = remove(Configure, "pre-scripts");
	    Configure = remove(Configure, "post-scripts");
	    Configure = remove(Configure, "chroot-scripts");

	    Configure["scripts"] = scripts;
	}
	// general
	boolean old = false;
	map general_options 	= Install["general"]:$[];
	map security 		= Configure["security"]:$[];
	map report		= Install["report"]:$[];


	foreach(string k, any v, general_options , ``{
	    if (k == "keyboard" && is(v, string))
	    {
		old = true;
	    }
	    else if (k == "mouse" && is(v, string))
	    {
		old = true;
	    }
	    else if (k == "encryption_method")
	    {
		old = true;
	    }
	    else if (k == "timezone" &&  is(v, string))
	    {
		old = true;
	    }
	});

	map new_general = $[];
	if (old) {
	    y2milestone("Old format, converting.....");
	    new_general["language"] 	= general_options["language"]:"";
	    map keyboard = $[];
	    keyboard["keymap"] 		= general_options["keyboard"]:"";
	    new_general["keyboard"]	= keyboard;

	    map clock = $[];
	    clock["timezone"] 		= general_options["timezone"]:"";
	    if ( general_options["hwclock"]:"" == "localtime")
	    {
		clock["hwclock"] = "localtime";
	    }
	    else if  ( general_options["hwclock"]:""  == "GMT")
	    {
		clock["hwclock"] = "GMT";
	    }
	    new_general["clock"]	= clock;

	    map mode = $[];
	    if (haskey(general_options, "reboot")) {
		mode["reboot"] =  general_options["reboot"]:false;
	    }
	    if (haskey(report, "confirm")) {
		mode["confirm"] 	= report["confirm"]:false;
		report = remove(report, "confirm");
	    }
	    new_general["mode"]	= mode;


	    if (haskey(general_options, "encryption_method"))
	    {
		security["encryption"] = general_options["encryption_method"]:"";
	    }

	    map net = Configure["networking"]:$[];
	    list ifaces = net["interfaces"]:[];

	    list newifaces = maplist(map iface , ifaces, ``{
		map newiface = mapmap(string k, string v, iface, ``{
		    return ([tolower(k), v]);
		});
		return newiface;
	    });

	    net["interfaces"] =  newifaces;

	    Install["general"] = new_general;
	    Install["report"] = report;
	    Configure["security"] = security;
	    Configure["networking"] = net;

	    Flat = union (Install, Configure);
	    changed = true;

	}
	return;
    }



    /**
     * Add a single entry to the Sysconfig list of variables
     * @param string file name / path
     * @param string key
     * @param string value
     * @param string package name which uses this variable if installation of package has to be forced.
     * @return void
     */
    global define void addSysconfigVar(string file, string key, string value, string package)
	``{

	SysconfigVars=add(SysconfigVars, $["sysconfig_path":file, "sysconfig_key":key, "sysconfig_value": value]);

	// Add package needed with sysconfig variable to package stack.
	// FIXME
	if (package != "")
	{
	    forcedPackages = add(forcedPackages, package);
	}
    }


}
