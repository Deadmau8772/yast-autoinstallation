/**
 * File:	modules/AutoinstScripts.ycp
 * Module:	Auto-Installation
 * Summary:	Custom scripts
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */

{
    module "AutoinstScripts";
    textdomain "autoinst";

    import "Mode";
    import "Label";
    import "Installation";
    import "Summary";


    global string tmpdir = (string)SCR::Read( .target.tmpdir );

    // Main directory for data generated during installation
    //
    global string var_dir = "/var/adm/autoinstall";

    // Directory for the pre/post and chroot scripts
    //
    global string scripts_dir = var_dir + "/scripts";

    // Directory where log files of pre/post and chroot scripts are kept
    //
    global string logs_dir = var_dir + "/logs";


    global list pre = [];
    global list post = [];
    global list chroot = [];

    global list merged = [];


    /**
     * merge all types of scripts into one single list
     * @param -
     * @return merged list
     */
    define list mergeScripts () ``{

	list result =	maplist (map p, pre,
				 ``{
				     p = add(p,"type","pre-scripts");
				     return p;
				 });
	result = union(result, 	maplist (map p, post,
					 ``{
					     p = add(p,"type","post-scripts");
					     return p;
					 })
		       );
	result = union(result, 	maplist (map p, chroot,
					 ``{
					     p = add(p,"type","chroot-scripts");
					     return p;
					 })
		       );
	return result;
    }



    
    /**
     * Constructor
     */
    define void AutoinstScripts()
	``{
	if ( !Mode::autoinst )
	{
	    merged = mergeScripts();
	}
    }


    /**
     * Dump the settings to a map, for autoinstallation use.
     * @return map
     */
    global define map Export()
	``{
	pre = [];
	post = [];
	chroot = [];
	y2milestone("Merged %1", merged);
	// split

	foreach(map s, merged, ``{
	    if (s["type"]:"" == "pre-scripts")
		pre = add(pre,s);
	    else if (s["type"]:"" == "post-scripts")
		post = add(post,s);
	    else if (s["type"]:"" == "chroot-scripts")
		chroot = add(chroot,s);
	});


	// clean
	list expre =  maplist (map p, pre,  ``{
	    return ($["filename":p["filename"]:"",
		      "interpreter": p["interpreter"]:"",
		      "source":p["source"]:""
		    ]);
	});
	list expost =  maplist (map p, post, ``{
	    return ($["filename":p["filename"]:"",
		      "interpreter": p["interpreter"]:"",
		      "source":p["source"]:""]
		    );
	});
	list exchroot =  maplist (map p, chroot, ``{
	    return ($["filename":p["filename"]:"",
		      "interpreter": p["interpreter"]:"",
		      "source":p["source"]:"",
		      "chrooted":p["chrooted"]:false
		    ]);
	});
	map result = $[];
	if (size(expre) > 0 )
	    result["pre-scripts"] = expre;
	if (size(expost) > 0 )
	    result["post-scripts"] = expost;
	if (size(exchroot) > 0 )
	    result["chroot-scripts"] = exchroot;

	return result;

    }


    /**
     * Get all the configuration from a map.
     * When called by autoinst_<module name> (preparing autoinstallation data)
     * the map may be empty.
     * @param settings	$[...]
     * @return	success
     */
    global define boolean Import(map s)
	``{
	pre = s["pre-scripts"]:[];
	post = s["post-scripts"]:[];
	chroot = s["chroot-scripts"]:[];
	
	merged = mergeScripts();
	return true;
    }



    global define string Summary() ``{
	string summary = "";
	summary = Summary::AddHeader(summary, _("Pre Scripts"));
	if (size( pre) > 0 )
	{
	    summary = Summary::OpenList(summary);
	    foreach(map script, pre, ``{
		summary = Summary::AddListItem(summary, script["filename"]:"" );
	    });
	    summary = Summary::CloseList(summary);
	}
	else
	{
	    summary = Summary::AddLine(summary, Summary::NotConfigured());
	}
	summary = Summary::AddHeader(summary, _("Post Scripts"));
	if (size( post) > 0)
	{
	    summary = Summary::OpenList(summary);
	    foreach(map script, post, ``{
		summary = Summary::AddListItem(summary, script["filename"]:"" );
	    });
	    summary = Summary::CloseList(summary);
	}
	else
	{
	    summary = Summary::AddLine(summary, Summary::NotConfigured());
	}
	summary = Summary::AddHeader(summary, _("Chroot Scripts"));
	if (size( chroot) > 0 )
	{
	    summary = Summary::OpenList(summary);
	    foreach(map script, chroot, ``{
		summary = Summary::AddListItem(summary, script["filename"]:"" );
	    });
	    summary = Summary::CloseList(summary);
	}
	else
	{
	    summary = Summary::AddLine(summary, Summary::NotConfigured());
	}
	return summary;
    }



    /**
     * delete a script from a list
     * @param script name
     * @return modified list of scripts
     */
    global define void  deleteScript(string scriptName)
	``{	
	list clean = filter(map s, merged, ``(s["filename"]:"" != scriptName));	
	merged = clean;
	return;
    }



    /**
     * Add or edit a script
     * @param scriptName script name
     * @param source source of script
     * @param interpreter interpreter to be used with script
     * @param type type of script
     * @return -
     */
    global define void AddEditScript(string scriptName, string source, string interpreter, string type)
	``{
	list newScripts = [];
	boolean modified = false;
	merged = maplist (map script , merged, ``{
	    // Edit
	    if (script["filename"]:"" == scriptName)
	    {
		map oldScript = $[];
		oldScript=add(oldScript,"filename", scriptName);
		oldScript=add(oldScript,"source", source);
		oldScript=add(oldScript,"interpreter", interpreter);
		oldScript=add(oldScript,"type", type);
		modified = true;
		return oldScript;
	    }
	    else {
		return script;
	    }
	});

	if (!modified)
	{
	    map script = $[];
	    script=add(script,"filename", scriptName);
	    script=add(script,"source", source);
	    script=add(script,"interpreter", interpreter);
	    script=add(script,"type", type);

	    merged=add(merged,script);
	}
	return;
    }


    /**
     * return type of script as formatted string
     * @param script type
     * @return type as translated string
     */
    global define string typeString(string type)``{
	if (type == "pre-scripts")
	{
	    return _("Pre");
	}
	else if (type == "post-scripts")
	{
	    return _("Post");
	}
	else if (type == "chroot-scripts")
	{
	    return _("Chroot");
	}
	return _("Unknown");
    }



    /**
     * Execute pre scripts
     * @param type of script
     * @return true on success
     */

    global define boolean Write( string type , boolean chrooted)
	``{

	list scripts = [];
	if (type == "pre-scripts")
	{
	    scripts = pre;
	}
	else if ( type == "chroot-scripts" && !chrooted)
	{
	    scripts = filter(map s, chroot, ``(!s["chrooted"]:false));
	}
	else if ( type == "chroot-scripts" && chrooted)
	{
	    scripts = filter(map s, chroot, ``(s["chrooted"]:false));
	}
	else if (type == "post-scripts")
	{
	    scripts = post;
	}
	else
	{
	    y2error("Unsupported script type");
	    return false;
	}


	string tmpdirString = "";
	string current_logdir = "";

	if (type == "pre-scripts")
	{
	    tmpdirString = sformat("%1/%2", tmpdir, type);
	    SCR::Execute (.target.mkdir, tmpdirString);

	    current_logdir = sformat("%1/logs", tmpdirString);
	    SCR::Execute (.target.mkdir,  current_logdir);
	}
	else if (type == "chroot-scripts")
	{
		tmpdirString = sformat("%1%2", (chrooted) ? "" : Installation::destdir,  scripts_dir);
	    SCR::Execute (.target.mkdir, (chrooted) ? scripts_dir : tmpdirString);

	    current_logdir = sformat("%1%2", (chrooted) ? "" : Installation::destdir, logs_dir);
	    SCR::Execute (.target.mkdir,  (chrooted) ? logs_dir : current_logdir);
	}
	else
	{
	    current_logdir = logs_dir;
	}


	foreach( map s, scripts,
		 ``{
	    string scriptInterpreter	= s["interpreter"]:"shell";
	    string scriptName = s["filename"]:type;
	    string scriptPath = "";

	    if (type == "pre-scripts")
	    {
		scriptPath = sformat("%1/%2/%3", tmpdir, type, scriptName);
		y2milestone("Writing pre script into %1", scriptPath);
		SCR::Write(.target.string, scriptPath, s["source"]:"echo Empty script!");
	    }
	    else if (type == "chroot-scripts")
	    {
		scriptPath = sformat("%1%2/%3", (chrooted) ? "/" : Installation::destdir,  scripts_dir,  scriptName);
		y2milestone("Writing chroot script into %1", scriptPath);
		SCR::Write(.target.string, scriptPath, s["source"]:"echo Empty script!");
	    }
	    else
	    {
		// disable all sources and finish target
		Pkg::SourceFinishAll();
		Pkg::TargetFinish();

		scriptPath = sformat("%1/%2", scripts_dir, scriptName);
		y2milestone("Writing  script into %1", scriptPath);
		SCR::Write(.target.string,  scriptPath, s["source"]:"echo Empty script!");
	    }

	    // string message =  sformat(_("Executing user supplied script: %1"), scriptName);
	    string executionString = "";
	    if (scriptInterpreter == "shell")
	    {
		executionString = sformat("/bin/sh -x %1  2&> %2/%3.log", scriptPath, current_logdir, scriptName);
		SCR::Execute (.target.bash, executionString);
	    }
	    else if (scriptInterpreter == "perl")
	    {
		executionString = sformat("/usr/bin/perl %1  2&> %2/%3.log", scriptPath, current_logdir, scriptName);
		SCR::Execute (.target.bash,executionString);
	    }
	    else if (scriptInterpreter == "python")
	    {
		executionString = sformat("/usr/bin/python %1  2&> %2/%3.log", scriptPath, current_logdir, scriptName);
		SCR::Execute (.target.bash,executionString);
	    }
	    else
	    {
		y2error("Unknown interpreter: %1", scriptInterpreter);
	    }
	    y2milestone("Script Execution command: %1", executionString );
	});

	return true;
    }



}
