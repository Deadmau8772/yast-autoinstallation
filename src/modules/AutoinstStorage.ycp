/**
 * File:	modules/AutoinstStorage.ycp
 * Module:	Auto-Installation
 * Summary:	Storage
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{

    module "AutoinstStorage";
    textdomain "autoinst";

    import "Partitions";
    import "Mode";
    import "Summary";
    include "partitioning/partition_defines.ycp";


    global list drives = [];

    global list configured_devices = [];

    global map targetMap = $[];

    global map lvm  = $[];
    global map raid = $[];

    /**
     * Dump the settings to a map, for autoinstallation use.
     * @return map
     */
    global define list Export()
	``{
	list clean_drives = maplist(`d, drives, ``{
	    list p = maplist(`part, d["partitions"]:[] ,
			     ``{

				 if (haskey(part, "fsid")) {
				     part = remove(part, "fsid");
				 }
				 if (haskey(part, "used_fs")) {
				     part = remove(part, "used_fs");
				 }
				 return part;
			     });
	    d["partitions"] = p;
	    return d;
	});

	return clean_drives;
    }


    /**
     * Get all the configuration from a map.
     * When called by autoinst_<module name> (preparing autoinstallation data)
     * the list may be empty.
     * @param settings a list	[...]
     * @return	success
     */
    global define boolean Import(list settings)
	``{

	drives = settings;

	return;
    }



    /**
     * Summary
     * @return  configuration summary dialog
     */

    global define string Summary() ``{
	string summary = "";
	summary = Summary::AddHeader(summary, _("Drives"));
	integer num = size(drives);
	summary = Summary::AddLine( summary, sformat(_("Total of %1 drive", "Total of %1 drives", num), num));
	summary = Summary::OpenList(summary);
	foreach(map drive, drives, ``{
	    summary = Summary::AddListItem(summary, drive["device"]:_("No specific device configured") );
	});
	summary = Summary::CloseList(summary);
	return summary;
    }


    /**
     * Create partition plans
     * @param void
     * @return boolean
     */
    global define boolean Write()
	``{
	import "Storage";
	import "Partitions";
	import "Bootloader";
	import "BootCommon";

	include "autoinstall/partitioning.ycp";

	map init_targetmap = Storage::GetTargetMap();
	y2milestone("Initial Target map: %1", init_targetmap);


	list alldrives = maplist( `k, `v, init_targetmap ,
				  ``{
				      return($["device":k, "size": v["cyl_size"]:0 ]);
				  }
				  );


	map physical_targetmap = filter(`k, `v, init_targetmap , ``(Storage::IsRealDisk(k, v) ));

        list physical_drives = maplist( `k, `v, physical_targetmap ,
                                  ``{
                                      return($["device":k, "size": v["cyl_size"]:0 ]);
                                  });

        list physical_devices = maplist( `k, `v, physical_targetmap ,
                                  ``{
                                      return(k);
                                  });

	y2milestone("Drives=%1", alldrives);

	string mbrDisk = lookup(select(physical_drives,0,$[]),"device", BootCommon::mbrDisk);

	y2milestone("MBR disk= %1", mbrDisk );
	Storage::SetPartDisk(mbrDisk);

	// Set devices if missing

	y2milestone("Drives: %1", drives);

	boolean abort = false;

	targetMap =  listmap (map drive, drives, ``{
	    boolean first_set = false;
	    string device = "";
	    y2milestone("Drive: %1", drive);

	    if (drive["device"]:"" == "ask"  && size(physical_drives) > 1 )
	    {
		y2milestone("Manual selection of device...");
		any dev = DiskSelection();
		if (dev != nil)
		{
		    first_set = true;
		    device = dev;
		}
		if (contains(physical_devices, device))
		{
		    configured_devices=add(configured_devices, device);
		}

		return ( [device , drive ] );
	    }


	    if (!first_set && ( drive["device"]:"" == ""  || drive["device"]:"" == "ask"))
	    {
		device = Storage::GetPartDisk();
		first_set = true;

		if (contains(physical_devices, device))
		{
		    configured_devices=add(configured_devices, device);
		}

		return ( [device , drive ] );
	    }
	    else if (drive["device"]:"" != "")
	    {
		if (contains(physical_devices, drive["device"]:""))
		{
		    configured_devices=add(configured_devices, drive["device"]:"");
		}

		return([drive["device"]:"", drive ]);
	    }

	});

	// Add MD devices as well

	if (haskey(targetMap, "/dev/md"))
	{
	     configured_devices=add(configured_devices, "/dev/md");
	}


	y2milestone("New Auto-Install tagetMap=%1", targetMap);
	if ( targetMap == $[] || abort )
	{
	    // Something went really wrong..
	    Report::Error(_("An error occurred while trying to create the partitioning plans.
Make sure the control file has the correct syntax and values.
"));
	    return false;
	}

	// Initialize disks if needed
	boolean init_done = false;
	foreach (string device, map data, targetMap,
		 ``{
	    if (data["initialize"]:false)
	    {
		    map thisDevice = init_targetmap[device]:$[];
		    thisDevice["partitions"] = [];
		    init_targetmap[device] = thisDevice;
		    Storage::SetTargetMap(init_targetmap);
		    init_done = true;
	    }
	});


	if (init_done)
	{
	    map afterinit_targetmap = Storage::GetTargetMap();
	    y2milestone("Target map after initialzing disk: %1", afterinit_targetmap);
	}

	if ( size(targetMap) > 0)
	{
	    boolean ok = true;
	    foreach (string device, map data, targetMap,
		     ``{
		if ( Storage::IsRealDisk( device, data) )
		{
		    y2milestone("Creating partition plans for %1", device);
		    boolean ret = AutoPartition(device);
		    if (!ret)
		    {
			ok = false;
		    }
		}
	    });
	    if (!ok)
	    {
		return false;
	    }
	}

	lvm	= filter(`k,`v, AutoinstStorage::targetMap, ``(v["is_lvm_vg"]:false));
	raid	= filter(`k,`v, AutoinstStorage::targetMap, ``(k == "/dev/md"));

	if ( size(raid) != 0)
	{
	    y2milestone("Configuring RAID");
	    autoRAID();
	}

	if ( size(lvm) != 0)
	{
	    y2milestone("Configuring LVM");
	    if (!autoLVM() )
		return false;
	}

	return true;
    }


    /**
     * Initialize devices
     */
    global define void Initialize () ``{
	import "Storage";

	foreach (string device, map data, targetMap,
		 ``{
	    if (data["initialize"]:false && !data["is_lvm_vg"]:false && data["device"]:"" != "/dev/md" )
	    {
		integer zero_ret = Storage::ZeroDevice( device );
		y2milestone("Initializing device: %1 --> %2", device, zero_ret);
	    }
	});
	return;
    }



    global define DiskSelection() ``{

	y2milestone("Selecting disk manually....");
	map tm = Storage::GetTargetMap();
	term contents = `Dummy();


	if( size(tm) > 0)
	{
	    term buttonbox = `VBox();

	    integer i = 0;
	    foreach( `tname, `tdata, tm,
		     ``{
		if( Storage::IsRealDisk( tname, tdata ))
		{
		    string tlinename = tdata["name"]:"?";
		    string tline = "&" + (i+1) + ":    " + tlinename;
		    boolean sel = Storage::GetPartDisk()==tname &&
			Storage::GetPartMode()!="CUSTOM";
		    buttonbox = add( buttonbox,
				     `Left(`RadioButton(`id(tname), tline, sel )));
		    i = i + 1;
		}
	    });

	    buttonbox = add(buttonbox, `VSpacing(0.8) );


	    // This dialog selects the target disk for the installation.
	    // Below this label, all targets are listed that can be used as
	    // installation target

	    // heading text
	    contents = `Frame( _("Choose a hard disk"),
			       `RadioButtonGroup(`id(`options),
						 `VBox( `VSpacing(0.4),
							`HSquash(buttonbox),
							`VSpacing(0.4)
							)
						 )
			       );
	}
	else
	{

	    contents = `Label (_("No disks found."));
	}

	// There are several hard disks found. Linux is completely installed on
	// one hard disk - this selection is done here
	// "Preparing Hard Disk - Step 1" is the description of the dialog what to
	// do while the following locale is the help description
	// help part 1 of 1
	string help_text = _("<p>
All hard disks automatically detected on your system
are shown here. Select the hard disk on which to install SuSE Linux.
</p>
");
	import "Label";
	term buttons = `HBox(
			 `PushButton(`id(`ok), `opt(`default), Label::OKButton ),
			 `PushButton(`id(`abort), Label::AbortButton )
			);



	term ask_device_dialog = `HBox(
				     `VSpacing( 15 ),       // force dialog height
				     `VBox(
					   `HSpacing( 30 ), // force help text width
					   `RichText( help_text )
					   ),
				     `HSpacing( 3 ),
				     `VBox(
					   `VSpacing( 1 ),
					   `Heading(_("Hard Disk Selection") ),
					    contents,
					   `VStretch(),
					   buttons

					   ),
				     `HSpacing( 3 )
				     );

	UI::OpenDialog(`opt(`decorated), ask_device_dialog);

	any ret = nil;
	any option = nil;

	repeat
	    {
		ret = Wizard::UserInput();
		y2milestone("ret=%1", ret);
		if( ret == `ok )
		{
		    option = UI::QueryWidget(`id(`options), `CurrentButton);
		    y2milestone( "selected disk: %1", option );
		    if( option == nil )
		    {
			// there is a selection from that one option has to be
			// chosen - at the moment no option is chosen
			UI::MessagePopup(_("Select one of the options to continue."));
			continue;
		    }
		}
	    } until ( ret == `ok || ret == `abort );

	UI::CloseDialog();
	return option;
    }


    /**
     * StringFS2Symbol()
     * @param any filesystem string
     * @return symbol filesystem type
     */
    global define StringFS2Symbol (any fs) ``{
	if (is(fs,symbol))
	{
	    return fs;
	}

	map filesystems =
	    $[
	      "ext2":	`ext2,
	      "ext3":	`ext3,
	      "reiser":	`reiser,
	      "lvm":	`lvm,
	      "raid":	`raid,
	      "jfs":	`jfs,
	      "fat32":	`fat32,
	      "xfs":	`xfs,
	      "fat16":	`fat16,
	      "swap":	`swap
	    ];
	return filesystems[fs]:Partitions::default_fs;
    }




    global define list DeletedMDs ( string vgname )
	``{
	map tm = Storage::GetTargetMap();
	list ret = [];
	foreach( `dev, `devmap, tm,
		 ``{
	    ret = add( ret,
		       filter( `part, devmap["partitions"]:[],
			       ``(
				  part["lvm_group"]:"" == vgname
				  &&
				  part["delete"]:false
				  &&
				  ( part["fsid"]:0 == Partitions::fsid_lvm ||
				    part["fsid"]:0 == Partitions::fsid_raid ||
				    part["fsid"]:0 == Partitions::fsid_native )
				  )
			       )
		       );
	});

	return( flatten(ret) );
    }

}
