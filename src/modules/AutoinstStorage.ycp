/**
 * File:	modules/AutoinstScripts.ycp
 * Module:	Auto-Installation
 * Summary:	Storage
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{

    module "AutoinstStorage";
    textdomain "autoinst";

    import "Partitions";
    import "Mode";
    import "Summary";
    include "partitioning/partition_defines.ycp";


    global list drives = [];
       

    global map targetMap = $[];

    global map lvm  = $[];
    global map raid = $[];
    

    
    /**
     * Dump the settings to a map, for autoinstallation use.
     * @return map
     */
    global define list Export()
	``{
	list clean_drives = maplist(`d, drives, ``{
	    list p = maplist(`part, d["partitions"]:[] ,
			     ``{

				 if (haskey(part, "fsid")) {
				     part = remove(part, "fsid");
				 }
				 if (haskey(part, "used_fs")) {
				     part = remove(part, "used_fs");
				 }
				 return part;
			     });
	    d["partitions"] = p;
	    return d;
	});

	return clean_drives;
    }


    /**
     * Get all the configuration from a map.
     * When called by autoinst_<module name> (preparing autoinstallation data)
     * the list may be empty.
     * @param settings a list 	[...]
     * @return	success
     */
    global define boolean Import(list settings)
	``{

	drives = settings;
    
	return;
    }



    /**
     * Summary
     * @return  configuration summary dialog
     */

    global define string Summary() ``{
	string summary = "";
	summary = Summary::AddHeader(summary, _("Drives"));
	integer num = size(drives);
	summary = Summary::AddLine( summary, sformat(_("Total of %1 drive", "Total of %1 drives", num), num));
	summary = Summary::OpenList(summary);
	foreach(map drive, drives, ``{
	    summary = Summary::AddListItem(summary, drive["device"]:_("No specific device configured") );
	});
	summary = Summary::CloseList(summary);
	return summary;
    }



    /**
     * Create partition plans
     * @param void
     * @return boolean
     */
    global define boolean Write()
	``{
	import "Storage";
	import "Partitions";
	import "Bootloader";
	import "BootCommon";

	include "autoinstall/partitioning.ycp";

	/*
	if ( lvm[ 0, "destroy_old"]:false && !Mode::test)
	{
	    Storage::DestroyLvmOnAllDisks();
	}

	
	if ( raid[ 0, "destroy_old"]:false && !Mode::test)
	{
	    Storage::DestroyMdOnAllDisks();	   
	}

	*/

	map init_targetmap = Storage::GetTargetMap();
	y2milestone("Initial Target map: %1", init_targetmap);
		
	
	list alldrives = maplist( `k, `v, init_targetmap ,
				  ``{				      
				      return($["device":k, "size": v["cyl_size"]:0 ]);
				  }
				  );
	

	map physical_targetmap = filter(`k, `v, init_targetmap , ``(Storage::IsRealDisk(k, v) ));
	
        list physical_drives = maplist( `k, `v, physical_targetmap ,
                                  ``{
                                      return($["device":k, "size": v["cyl_size"]:0 ]);
                                  });
	
	
	y2milestone("Drives=%1", alldrives);
	string mbrDisk = lookup(select(physical_drives,0,$[]),"device", BootCommon::mbrDisk);
	y2milestone("MBR disk= %1", mbrDisk );
	Storage::SetPartDisk(mbrDisk);
	
	// Set devices if missing
	
	targetMap =  listmap (map drive, drives, ``{
	    boolean first_set = false;
	    string device = "";
	    
	    if (!first_set && drive["device"]:"" == "")
	    {
		device = Storage::GetPartDisk();
		first_set = true;
		return ([device,drive]);
	    }
	    else if (drive["device"]:"" != "")
	    {
		return([drive["device"]:"", drive ]);
	    }

	});


	y2milestone("New Auto-Install tagetMap=%1", targetMap);
	
	if ( targetMap == $[] )
	{
	    // Something went really wrong..
	    Report::Error(_("An error occurred while trying to create the partitioning plans.
Make sure the control file has the correct syntax and values.
"));
	    return false;
	}

	// Initialize disks if needed
	boolean init_done = false;
	
	foreach (string device, map data, targetMap,
		 ``{
	    // FIXME: initialize LVM and RAID
	    
	    if (data["initialize"]:false)
	    {
		    map thisDevice = init_targetmap[device]:$[];		 
		    thisDevice["partitions"] = [];
		    init_targetmap[device] = thisDevice;
		    Storage::SetTargetMap(init_targetmap);
		    init_done = true;
	    }		    
	});

	/*
	if (size(raid) > 0  && md_avail)
	{
	    y2milestone("init raid: %1", raid_to_init);
	    map tg =  Storage::GetTargetMap();
	    map md = tg["/dev/md"]:$[];
	    list mdlist = tg["/dev/md", "partitions"]:[];
	    md["partitions"] = filter(map md_device, mdlist, ``((!contains(toset(raid_to_init), md_device["device"]:"") )));	    
	    tg["/dev/md"] = md;
	    Storage::SetTargetMap(tg);
	}
	*/

	
	if (init_done)
	{
	    map afterinit_targetmap = Storage::GetTargetMap();
	    y2milestone("Target map after initialzing disk: %1", afterinit_targetmap);
	}

	
	if ( size(targetMap) > 0)
	{
	    
	    boolean ok = true;
	    foreach (string device, map data, targetMap,
		     ``{
		if ( Storage::IsRealDisk( device, data) )
		{
		    y2milestone("Creating partition plans for %1", device);
		    boolean ret = AutoPartition(device);
		    if (!ret)
		    {
			ok = false;
		    }
		}
	    });
	    if (!ok)
	    {
		return false;
	    }
	}

	lvm 	= filter(`k,`v, AutoinstStorage::targetMap, ``(v["is_lvm_vg"]:false));
	raid 	= filter(`k,`v, AutoinstStorage::targetMap, ``(k == "/dev/md"));

	
	if ( size(raid) != 0)
	{
	    autoRAID();
	}

	if ( size(lvm) != 0)
	{
	    autoLVM();
	}

	return true;
    }


    
    /**
     * Initialize devices
     */
    global define void Initialize () ``{
	import "Storage";

	foreach (string device, map data, targetMap,
		 ``{
	    if (data["initialize"]:false)
	    {			    
		integer zero_ret = Storage::ZeroDevice( device );
		y2milestone("Initializing device: %1 --> %2", device, zero_ret);		
	    }		    
	});
	return;
    }


    /**
     * StringFS2Symbol()
     * @param any filesystem string
     * @return symbol filesystem type
     */
    global define StringFS2Symbol (any fs) ``{
	if (is(fs,symbol))
	{
	    return fs;
	}

	map filesystems =
	    $[
	      "ext2":	`ext2,
	      "ext3":	`ext3,
	      "reiser":	`reiser,
	      "lvm":	`lvm,
	      "raid":	`raid,
	      "jfs":	`jfs,
	      "fat32":	`fat32,
	      "xfs":	`xfs,
	      "fat16":	`fat16,
	      "swap":	`swap
	    ];
	return filesystems[fs]:Partitions::default_fs;
    }


    
}
