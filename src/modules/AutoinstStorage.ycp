/**
 * File:	modules/AutoinstScripts.ycp
 * Module:	Auto-Installation
 * Summary:	Storage
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{

    module "AutoinstStorage";
    textdomain "autoinst";

    import "Partitions";
    import "Mode";
    import "Summary";
    include "partitioning/partition_defines.ycp";


    global list drives = [];

    global list lvm = [];

    global list raid = [];

    global map targetMap = $[];

    
    /**
     * Dump the settings to a map, for autoinstallation use.
     * @return map
     */
    global define list Export()
	``{
	list clean_drives = maplist(`d, drives,
				    ``{
					list p = maplist(`part, d["partitions"]:[] ,
							 ``{

							     if (haskey(part, "fsid")) {
								 part = remove(part, "fsid");
							     }
							     if (haskey(part, "used_fs")) {
								 part = remove(part, "used_fs");
							     }
							     return part;
							 });
					d["partitions"] = p;
					return d;
				    });

	return clean_drives;
    }


    /**
     * Get all the configuration from a map.
     * When called by autoinst_<module name> (preparing autoinstallation data)
     * the list may be empty.
     * @param settings a list 	[...]
     * @return	success
     */
    global define boolean Import(list settings)
	``{
	if (Mode::autoinst)
	{
	    drives = settings[0]:[];
	    lvm = settings[1]:[];
	    raid = settings[2]:[];
	}
	else
	{
	    drives = settings;
	}
	return;
    }



    /**
     * Summary
     * @return  configuration summary dialog
     */

    global define string Summary() ``{
	string summary = "";
	summary = Summary::AddHeader(summary, _("Drives"));
	summary = Summary::AddLine( summary, sformat(_("Total of %1 drives"), size(drives)));
	summary = Summary::OpenList(summary);
	foreach(map drive, drives, ``{
	    summary = Summary::AddListItem(summary, drive["device"]:_("No specific device configured") );
	});
	summary = Summary::CloseList(summary);
	return summary;
    }



    /**
     * Create partition plans
     * @param void
     * @return void
     */
    global define void Write()
	``{
	import "Storage";
	import "Partitions";
	include "autoinstall/partitioning.ycp";
	import "Bootloader";
	import "BootCommon";


	if ( lvm[ 0, "destroy_old"]:false && !Mode::test)
	{
	    Storage::DestroyLvmOnAllDisks();
	}

	map init_targetmap = Storage::GetTargetMap();
	y2milestone("Initial Target map: %1", init_targetmap);
	
	list alldrives = maplist( `k, `v, init_targetmap ,
			      ``{
				  return($["device":k, "size": v["cyl_size"]:0 ]);
	});

	y2milestone("Drives: %1, MBR disk: %2", alldrives , BootCommon::mbrDisk);

	Storage::SetPartDisk(lookup(select(alldrives,0,$[]),"device", BootCommon::mbrDisk));

	// Set devices if missing
	targetMap =  listmap (map drive, drives, ``{
	    boolean first_set = false;
	    string device = "";
	    if (!first_set && drive["device"]:"" == "")
	    {
		device = Storage::GetPartDisk();
		first_set = true;
		return([device,drive]);
	    }
	    else if (drive["device"]:"" != "")
	    {
		return([drive["device"]:"",drive]);
	    }

	});


	y2milestone("New Auto-Install tagetMap: %1", targetMap);
	if ( targetMap == $[] )
	{
	    // Something went really wrong..
	    Report::Error(_("An error occurred while trying to create the partitioning plans.
Make sure the control file has the correct syntax and values.
"));
	    return `abort;
	}

	// Initialize disks if needed
	boolean init_done = false;
	foreach (string device, map data, targetMap,
		 ``{
	    if (data["initialize"]:false)
	    {
		    map thisDevice = init_targetmap[device]:$[];
		    thisDevice["partitions"] = [];
		    init_targetmap[device] = thisDevice;
		    Storage::SetTargetMap(init_targetmap);		    	
	    }		    
	});

	map afterinit_targetmap = Storage::GetTargetMap();
	y2milestone("Target map after initialzing disk: %1", afterinit_targetmap);
	
	if ( size(targetMap) > 0)
	{
	    foreach (string device, map data, targetMap,
		     ``{
		y2milestone("Creating partition plans for %1", device);
		boolean ret = AutoPartition(device);
	    });
	}
	else
	{
	    map firstDrive = alldrives[0]:$[];
	    boolean ret = AutoPartition(firstDrive["device"]:"/dev/hda");
	}



	if ( size(raid) != 0)
	{
	    autoRAID();
	}

	if ( size(lvm) != 0)
	{
	    autoLVM();
	}

    }

    /**
     * Initialize devices
     */
    global define Initialize () ``{
	foreach (string device, map data, targetMap,
		 ``{
	    if (data["initialize"]:false)
	    {			    
		integer zero_ret = InitDevice(device);
		y2milestone("Initializing device: %1 --> %2", device, zero_ret);		
	    }		    
	});
	
    }


}
