/**
 * File:	modules/AutoinstStorage.ycp
 * Module:	Auto-Installation
 * Summary:	Storage
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{

    module "AutoinstStorage";
    textdomain "autoinst";

    import "Partitions";
    import "FileSystems";
    import "Mode";
    import "Summary";
    import "Report";

    include "partitioning/partition_defines.ycp";
    include "autoinstall/partition_dialogs.ycp";

    // Partition plan as parsed from control file
    global list AutoPartPlan = [];

    // All configured devices
    global list ConfiguredDevices = [];

    // Prepared target map from parsed data
    global map AutoTargetMap = $[];


    map PhysicalTargetMap = $[];
    list PhysicalDrives = [];
    list PhysicalDevices = [];

  
    /**
     * Dump the settings to a map, for autoinstallation use.
     * @return map
     */
    global define list Export()
	``{
	list clean_drives = maplist(`d, drives, ``{
	    list p = maplist(`part, d["partitions"]:[] ,
			     ``{

				 if (haskey(part, "fsid")) {
				     part = remove(part, "fsid");
				 }
				 if (haskey(part, "used_fs")) {
				     part = remove(part, "used_fs");
				 }
				 return part;
			     });
	    d["partitions"] = p;
	    return d;
	});

	return clean_drives;
    }


    /**
     * Get all the configuration from a map.
     * When called by autoinst_<module name> (preparing autoinstallation data)
     * the list may be empty.
     * @param settings a list	[...]
     * @return	success
     */
    global define boolean Import(list settings)
	``{

	AutoPartPlan = settings;
	return;
    }



    /**
     * Summary
     * @return  configuration summary dialog
     */

    global define string Summary() ``{
	string summary = "";
	summary = Summary::AddHeader(summary, _("Drives"));
	integer num = size(AutoPartPlan);
	summary = Summary::AddLine( summary, sformat(_("Total of %1 drive", "Total of %1 drives", num), num));
	summary = Summary::OpenList(summary);
	foreach(map drive, AutoPartPlan, ``{
	    summary = Summary::AddListItem(summary, drive["device"]:_("No specific device configured") );
	});
	summary = Summary::CloseList(summary);
	return summary;
    }


    /**
     * Create partition plan
     * @param void
     * @return boolean
     */
    global define boolean Write()
	``{
	import "AutoinstLVM";
	import "AutoinstRAID";
	import "Storage";
	import "Partitions";
	import "Bootloader";
	import "BootCommon";

	include "autoinstall/partitioning.ycp";

	map InitialTargetMap = Storage::GetTargetMap();
	y2milestone("Initial Target map: %1", InitialTargetMap);

	list alldrives = maplist( `k, `v, InitialTargetMap ,  ``{
	    return($["device":k, "size": v["cyl_size"]:0 ]);
	});

	PhysicalTargetMap = filter(`k, `v, InitialTargetMap , ``(Storage::IsRealDisk(k, v) ));

        PhysicalDrives = maplist( `k, `v, PhysicalTargetMap ,
                                  ``{
                                      return($["device":k, "size": v["cyl_size"]:0 ]);
                                  });

        PhysicalDevices = maplist( `k, `v, PhysicalTargetMap ,
                                  ``{
                                      return(k);
                                  });

	y2milestone("Drives=%1", alldrives);

	map FirstDrive = PhysicalDrives[0]:$[];
	
	string mbrDisk = FirstDrive["device"]:BootCommon::mbrDisk;
	
	y2milestone("MBR disk= %1", mbrDisk );
	
	Storage::SetPartDisk(mbrDisk);
	
	y2milestone("Drives: %1", AutoPartPlan);

	boolean abort = false;

	// Start the real work
	
	PreProcess();

	y2milestone("New Auto-Install tagetMap=%1", AutoTargetMap);
	if ( AutoTargetMap == $[] || abort )
	{
	    // Something went really wrong..
	    Report::Error(_("An error occurred while trying to create the partitioning plans.
Make sure the control file has the correct syntax and values.
"));
	    return false;
	}

	// Initialize disks if needed
	boolean DriveInitialized = false;
	foreach (string device, map data, AutoTargetMap,
		 ``{
	    if (data["initialize"]:false)
	    {
		    map thisDevice = InitialTargetMap[device]:$[];
		    thisDevice["partitions"] = [];
		    InitialTargetMap[device] = thisDevice;
		    Storage::SetTargetMap(InitialTargetMap);
		    DriveInitialized = true;
	    }
	});

	if (DriveInitialized)
	{	    
	    y2milestone("Target map after initialzing disk: %1", Storage::GetTargetMap());
	}

	if ( size(AutoTargetMap) > 0)
	{
	    boolean ok = true;
	    foreach (string device, map data, AutoTargetMap,
		     ``{
		if ( Storage::IsRealDisk( device, data) )
		{
		    y2milestone("Creating partition plans for %1", device);
		    boolean ret = AutoPartition(device);
		    if (!ret)
		    {
			ok = false;
		    }
		}
	    });
	    if (!ok)
	    {
		return false;
	    }
	}

	AutoinstLVM::lvm   = filter(`k,`v, AutoinstStorage::AutoTargetMap, ``(v["is_lvm_vg"]:false));
	AutoinstRAID::raid = filter(`k,`v, AutoinstStorage::AutoTargetMap, ``(k == "/dev/md"));

	if ( size(AutoinstRAID::raid) != 0)
	{
	    y2milestone("Configuring RAID");
	    AutoinstRAID::Write();
	}
	else
	{
	    import "AutoinstRAID";
	    AutoinstRAID::DeleteMDs();	    
	}


	if ( size(AutoinstLVM::lvm) != 0)
	{
	    y2milestone("Configuring LVM");
	    if (!AutoinstLVM::Write() )
	    {
		return false;
	    }
	}

	return true;
    }

    /**
     * Preprocess partition plan and prepare for creating partitions.
     */

    global define PreProcess() ``{

	AutoTargetMap =  listmap (map drive, AutoPartPlan, ``{
	    boolean first_set = false;
	    string device = "";
	    y2milestone("Working on drive: %1", drive);

	    if (drive["device"]:"" == "ask"  && size(PhysicalDrives) > 1 )
	    {
		any dev = DiskSelection();
		if (dev != nil)
		{
		    first_set = true;
		    device = dev;
		}
		if (contains(PhysicalDevices, device))
		{
		    ConfiguredDevices=add(ConfiguredDevices, device);
		}

		return ( [device , drive ] );
	    }

	    if (!first_set && ( drive["device"]:"" == ""  || drive["device"]:"" == "ask"))
	    {
		device = Storage::GetPartDisk();
		first_set = true;
		if (contains(PhysicalDevices, device))
		{
		    ConfiguredDevices=add(ConfiguredDevices, device);
		}

		return ( [device , drive ] );
	    }
	    else if (drive["device"]:"" != "")
	    {
		if (contains(PhysicalDevices, drive["device"]:""))
		{
		    ConfiguredDevices=add(ConfiguredDevices, drive["device"]:"");
		}

		return([drive["device"]:"", drive ]);
	    }

	});

	// Add MD devices as well
	if (haskey(AutoTargetMap, "/dev/md"))
	{
	    ConfiguredDevices=add(ConfiguredDevices, "/dev/md");
	}

	return;
    }

    
    /**
     * Initialize devices
     */
    global define void Initialize () ``{
	import "Storage";

	foreach (string device, map data, AutoTargetMap,
		 ``{
	    if (data["initialize"]:false && !data["is_lvm_vg"]:false && data["device"]:"" != "/dev/md" )
	    {
		integer zero_ret = Storage::ZeroDevice( device );
		y2milestone("Initializing device: %1 --> %2", device, zero_ret);
	    }
	});
	return;
    }




    /**
     * StringFS2Symbol()
     * @param any filesystem string
     * @return symbol filesystem type
     */
    global define StringFS2Symbol (any fs) ``{
	if (is(fs,symbol))
	{
	    return fs;
	}

	map filesystems =
	    $[
	      "ext2":	`ext2,
	      "ext3":	`ext3,
	      "reiser":	`reiser,
	      "lvm":	`lvm,
	      "raid":	`raid,
	      "jfs":	`jfs,
	      "fat32":	`fat32,
	      "xfs":	`xfs,
	      "fat16":	`fat16,
	      "swap":	`swap
	    ];
	return filesystems[fs]:Partitions::default_fs;
    }




    global define list DeletedMDs ( string vgname )
	``{
	map tm = Storage::GetTargetMap();
	list ret = [];
	foreach( string dev, map devmap, tm,
		 ``{
	    ret = add( ret,
		       filter( `part, devmap["partitions"]:[],
			       ``(
				  part["lvm_group"]:"" == vgname
				  &&
				  part["delete"]:false
				  &&
				  ( part["fsid"]:0 == Partitions::fsid_lvm ||
				    part["fsid"]:0 == Partitions::fsid_raid ||
				    part["fsid"]:0 == Partitions::fsid_native )
				  )
			       )
		       );
	});

	return( flatten(ret) );
    }

}
