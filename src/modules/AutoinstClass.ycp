/**
 * File:
 *	modules/AutoinstClass.ycp
 *
 * Module:
 *	AutoinstClass
 *
 * Summary:
 *	This module handles the configuration for auto-installation
 *
 * Authors:
 *	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */

{
    module "AutoinstClass";

    import "AutoinstConfig";
    import "XML";
    import "Summary";
    include "autoinstall/xml.ycp";




    global string classDir = AutoinstConfig::Repository + "/classes";

    global string ClassConf = "/etc/autoinstall";

    global list profile_conf = [];

    global list Profiles = [];

    global list Classes = [];

    global list confs = [];

    string class_file = "classes.xml";

    string classPath = sformat("%1/%2", ClassConf, class_file);



    /*
     * Constructor
     *
     */

    global define void AutoinstClass()
	``{
	classSetup();
	Read();
	return;
    }




    global define map MergeClasses(map configuration,
			       string base_profile,
			       string resultFileName
			       )
	``{
	string tmpdir = SCR::Read( .target.tmpdir );
	string MergeCommand = "/usr/bin/xsltproc --novalid --param replace \"'false'\" --param dontmerge \"'addon'\" --param with ";
	MergeCommand = MergeCommand + "\"'" + findPath(configuration["name"]:"") + "'\"  ";
	MergeCommand = MergeCommand + "--output " +  tmpdir + "/" + resultFileName + " ";
	MergeCommand = MergeCommand + " /usr/share/autoinstall/xslt/merge.xslt ";
	MergeCommand = MergeCommand +   base_profile + " ";


	y2debug("Merge command: %1", MergeCommand);

	map out = SCR::Execute(.target.bash_output, MergeCommand, $[]);
	y2debug("Merge stdout: %1, stderr: %2", out["stdout"]:"", out["stderr"]:"");
	return (out);
    }



    /**
     * Read classes
     */
    global define void Read()
	``{
	if (SCR::Read(.target.size, classPath) != -1)
	{
	    // TODO: use XML module
	    map tmp = SCR::Read(.xml, classPath);
	    Classes = tmp["classes"]:[];
	}
	return;
    }



    /**
     * Read files from class directories
     * @return void
     */
    global define void Files()
	``{
	confs = [];
	foreach(map class, Classes,
		``{
	    list files = SCR::Read(.target.dir, classDir + "/" + class["name"]:"xxx");
	    if (files != nil ) {
		y2milestone("Files in class %1: %2", class["name"]:"xxx", files);
		list tmp_confs = maplist(string file , files , ``{
		    map conf = $[];
		    conf["class"] =  class["name"]:"xxx";
		    conf["name"]  = file;
		    return (conf);
		});
		y2milestone("Configurations: %1", tmp_confs);
		confs = union(confs, tmp_confs);
	    }
	});
	y2milestone("Configurations: %1", confs);
	return;
    }



    /**
     * Save Class definitions
     */

    global define Save()
	``{
	map tmp = $[ "classes":Classes];
	y2debug("saving classes: %1", classPath);
	return (XML::YCPToXMLFile(`class, tmp, classPath));
    }



    /**
     * Import configuration
     */

    global define boolean Import(list settings)
	``{
	profile_conf = settings;
	return true;
    }

    /**
     * Export configuration
     */

    global define list Export()
	``{

	return profile_conf;
    }

    /**
     * Configuration Summary
     */

    global define string Summary() ``{
	string summary = "";

	foreach(map c, profile_conf, ``{
	    summary = Summary::AddHeader(summary, c["class_name"]:"None");
	    summary = Summary::AddLine(summary,  c["configuration"]:"None");
	});
	if (size(summary) == 0 ) {
	    return Summary::NotConfigured();
	}
	return summary;
    }


    /**
     * find a profile path
     * @param string profile name
     * @return string profile Path
     *
     */
    global define findPath(string name)
	``{
	map result = select(filter(map c,  confs,
				   ``(lookup(c,"name","")== name)),0,$[]);

	string profile_path = sformat("%1/%2/%3", AutoinstConfig::classDir, result["class"]:"", result["name"]:"default");
	return profile_path;
    }

}
