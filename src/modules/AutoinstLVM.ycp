/**
 * File:	modules/AutoinstLVM.ycp
 * Module:	Auto-Installation
 * Summary:	LVM
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{

    module "AutoinstLVM";
    textdomain "autoinst";

    import "Storage";
    import "AutoinstStorage";

    include "partitioning/partition_defines.ycp";
    include "partitioning/lvm_ui_lib.ycp";
    include "partitioning/lvm_pv_lib.ycp";



    global map modify_targets = $[];

    global map ExistingLVM = $[];

    global list ExistingVGs = [];

    global boolean OldAvailable = false;


    global map Volumes = $[];

    global boolean PVsNotConfigured = false;

    
    list region = [0,0];
    map targetMap = $[];
    integer pesize = 0;


    /**
     * Constructor
     *
     */
    global define void AutoinstLVM () ``{

	targetMap 	= Storage::GetTargetMap();
	modify_targets	= Storage::GetModifyTargets();
	ExistingLVM 	= filter(`k,`v, targetMap, ``(v["is_lvm_vg"]:false));
	
	y2milestone("Existing LVM: %1", ExistingLVM);
	
	ExistingVGs 	= maplist (`d, `g, ExistingLVM, ``{
	    return (substring(d, 5) );
	});

	y2milestone("Existing VGs: %1", ExistingVGs );
	
	foreach (`v, ExistingVGs, ``{
	    string dev = sformat("/dev/%1", v);
	    if (size(ExistingLVM[dev,"partitions"]:[]) > 0 )
	    {
		OldAvailable = true;
	    }
	});
	return;
    }


    global define void RemoveVG (string vgname) ``{
	map remove_vg = $[
			  "use_module" : "lvm_ll",
			  "type"       : "remove_vg",
			  "vgname"     : vgname
	];
	modify_targets = addTargetModification( modify_targets, remove_vg );
	return;
    }





    global define void CreateVG (string vgname) ``{

	map create_vg = $[
			  "use_module" : "lvm_ll",
			  "type"       : "create_vg",
			  "vgname"     : vgname,
			  "pesize"     : pesize,
			  "devices"    : []
	];
	modify_targets = addTargetModification( modify_targets, create_vg );

	return ( $[
		   "name"      : vgname,
		   "cyl_count" : 0,
		   "cyl_size"  : pesize,
		   "is_lvm_vg" : true,
		   "partitions": []
		 ]
		 );
    }




    global define void CreatePV (string vgname, string device) ``{

	map create_pv = $[
			      "use_module" : "lvm_ll",
			      "type"       : "create_pv",
			      "vgname"     : vgname,
			      "device"     : device
	];

	modify_targets = addTargetModification( modify_targets, create_pv );

    }


    global define RemoveLV (string vgname, string lvname) ``{
	map remove_lv = $[
			      "use_module" : "lvm_ll",
			      "type"       : "remove_lv",
			      "name"       : lvname,
			      "vgname"     : vgname,
			      "target_map_entry":$[]
	];
	modify_targets = addTargetModification( modify_targets, remove_lv );
    }


    global define RemovePV (string vgname, string device) ``{
	map remove_pv = $[
			  "use_module"	: "lvm_ll",
			  "type"		: "remove_pv",
			  "vgname"		: vgname,
			  "device"		: device
	];
	modify_targets = addTargetModification( modify_targets, remove_pv );
    }


    global define map CreateLV (string vgname, map lv) ``{

	string lvsize_str	= lv["size"]:"";
	string lv_name		= lv["lv_name"]:"";

	integer lvsize		= kmgt_str_to_byte(lvsize_str);


	if (pesize == 0 )
	{
	    pesize = 1;
	}


	integer virtual_cyl_end = lvsize / pesize;
	region = [0, virtual_cyl_end ];
	integer bytes_of_part	= 0;
	integer cyl_size		= pesize;
	integer nb_cyl			= region[1]:0;

	bytes_of_part =  ( nb_cyl ) * cyl_size;


	region = [0, virtual_cyl_end ];
	map create_lv = $[
			      "use_module" : "lvm_ll",
			      "type"       : "create_lv",
			      "name"       : lv_name,
			      "size"       : bytes_of_part,
			      "vgname"     : vgname,
			      "stripes"    : lv["stripes"]:1
	];
	modify_targets = addTargetModification( modify_targets, create_lv );

	symbol lv_fs = AutoinstStorage::StringFS2Symbol( lv["filesystem"]:"ext2");

	return ($[
		  "create"		: true,
		  "fs_options"		: lv["fs_options"]:$[],
		  "use_module"		: "lvm_ll",
		  "fsid"		: 142,
		  "fstype"		: "LV",
		  "nr"			: lv_name,
		  "ori_nr"		: lv_name,
		  "region"		: [0, virtual_cyl_end ],
		  "size_bytes"		: bytes_of_part,
		  "mount"		: lv["mount"]:"" ,
		  "used_fs"		: lv_fs,
		  "format"		: lv["format"]:true ,
		  "crypt_fs"		: lv["crypt"]:false ,
		  "crypt_key"		: lv["crypt_key"]:"",
		  "type"		: `lvm,
		  "device"		: "/dev/" + vgname + "/" + lv_name
		]);

    };

    global define map ResizeLV (string vgname, map lv) ``{

	string lvsize_str	= lv["size"]:"";
	string lv_name		= lv["lv_name"]:"";

	integer lvsize		= kmgt_str_to_byte(lvsize_str);


	if (pesize == 0 )
	{
	    pesize = 1;
	}


	integer virtual_cyl_end = lvsize / pesize;
	region = [0, virtual_cyl_end ];
	integer bytes_of_part	= 0;
	integer cyl_size		= pesize;
	integer nb_cyl			= region[1]:0;

	bytes_of_part =  ( nb_cyl ) * cyl_size;


	region = [0, virtual_cyl_end ];
	
	map resize_lv = $[
			      "use_module" : "lvm_ll",
			      "type"       : "resize_lv",
			      "name"       : lv_name,
			      "size"       : bytes_of_part,
			      "vgname"     : vgname			   
	];
	modify_targets = addTargetModification( modify_targets, resize_lv );

	symbol lv_fs = AutoinstStorage::StringFS2Symbol( lv["filesystem"]:"ext2");

	return ($[
		  "changed_size"	: true,
		  "stripes"		: lv["stripes"]:1,
		  "fs_options"		: lv["fs_options"]:$[],
		  "use_module"		: "lvm_ll",
		  "fsid"		: 142,
		  "fstype"		: "LV",
		  "nr"			: lv_name,
		  "ori_nr"		: lv_name,
		  "region"		: [0, virtual_cyl_end ],
		  "size_bytes"		: bytes_of_part,
		  "mount"		: lv["mount"]:"" ,
		  "used_fs"		: lv["used_fs"]:`unknown,
		  "format"		: lv["format"]:false ,
		  "crypt_fs"		: lv["crypt"]:false ,
		  "crypt_key"		: lv["crypt_key"]:"",
		  "type"		: `lvm,
		  "device"		: "/dev/" + vgname + "/" + lv_name
		]);

    };
    global define map KeepLV (string vgname, map lv) ``{

	
	string lv_name		= lv["lv_name"]:"";
	integer lvsize		= kmgt_str_to_byte(lvsize_str);



	return ($[
		  "create"		: false,		  		  
		  "fsid"		: 142,
		  "fstype"		: "LV",
		  "nr"			: lv_name,		
		  "mount"		: lv["mount"]:"" ,
		  "used_fs"		: lv["used_fs"]:`reiser,
		  "format"		: lv["format"]:false ,		
		  "type"		: `lvm,
		  "device"		: "/dev/" + vgname + "/" + lv_name
		]);

    };

    

    global define void SetPESIZE (string pesize_str) ``{
	pesize	=  pesize_str_to_byte( pesize_str );
	return;

    }


    /**
     *	Return only those PVs on disks touched by the control file, dont add PVs of
     * 	unconfigured disks.
     */
    
    global define list ExistingPVs ( string vgname )
	``{
	map tm = $[];
	y2milestone("Possible devices: %1", AutoinstStorage::configured_devices );
	foreach(`k, `v, targetMap, ``{
	    
	    if (contains(AutoinstStorage::configured_devices, k))
		tm[k] = v;
		}
		);
	y2milestone("Target Map of allowed devices: %1 (%2)", tm, targetMap);
	
	list all_possible_pvs = filter( `part, get_possible_pvs( targetMap ),  ``( part["lvm_group"]:"" == vgname ));
	list possible_pvs = filter( `part, get_possible_pvs( tm ),  ``( part["lvm_group"]:"" == vgname ));

	y2milestone("Possible PVs: %1 (%2)",  all_possible_pvs,  possible_pvs);
	if (all_possible_pvs != possible_pvs)
	    PVsNotConfigured = true;
	
	return (possible_pvs);

    }


    global define list DeletedPVs ( string vgname )
	``{
	list ret = [];
	foreach( `dev, `devmap, targetMap,
		 ``{
	    ret = add( ret,
		       filter( `part, devmap["partitions"]:[],
			       ``(
				  part["lvm_group"]:"" == vgname
				  &&
				  part["delete"]:false
				  &&
				  ( part["fsid"]:0 == Partitions::fsid_lvm ||
				    part["fsid"]:0 == Partitions::fsid_raid ||
				    part["fsid"]:0 == Partitions::fsid_native )
				  )
			       )
		       );
	});

	return( flatten(ret) );
    }

}

