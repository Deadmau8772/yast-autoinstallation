/**
 * File:	clients/inst_autoconf.ycp
 * Package:	Auto-installation
 * Author:      Anas Nashif <nashif@suse.de>
 * Summary:	This module finishes auto-installation and configures
 *		the system as described in the profile file.
 *
 * $Id$
 */

{

    textdomain "autoinst";

    import "AutoInstall";
    import "Product";
    import "Progress";

    include "autoinstall/misc_writes.ycp";


    // Help text for last dialog of base installation
    string help_text = _("<p>
Please wait while the system is being configured.
</p>");

    list progress_stages =
	[
			 _("Configure System"),
			 _("Create user accounts and set root password"),
			 _("Execute post-install user scripts")
	];


    list progress_descriptions =
	[
			 _("Configuring System..."),
			 _("Creating user accounts and setting root password"),
			 _("Executing post-install user scripts...")
	];


    Progress::New(
                        _("Configuring System according to auto-install settings"),
                        "",     // progress_title
			size( progress_stages ),	// progress bar length
			progress_stages,
			progress_descriptions,
                        help_text );


    SCR::Execute(.target.remove, "/var/lib/YaST2/runme_at_boot");

    Progress::NextStage();
    string resource = "";
    string module_write = "";
    boolean result = false;

    map install = AutoInstall::Profile["install"]:$[];
    map configure = AutoInstall::Profile["configure"]:$[];

    // make some adaptions
    if (haskey(configure,"x11"))
    {
	map x11conf = configure["x11"]:$[];
	if (haskey(x11conf, "start_x11"))
	{
	    boolean start_xdm = configure["x11", "start_x11"]:false;
	    map runlevels = configure["runlevels"]:$[];
	    if (start_xdm)
	    {
		runlevels["default"] = "5";
	    }
	    else
	    {
		runlevels["default"] = "3";
	    }
	    configure["runlevels"] = runlevels;
	}
    }
    // Now we write additional data without a _write client, i.e. fstab


    AutoInstall::CopyFiles();

    y2debug("Module map: %1", AutoInstall::ModuleMap);
    foreach(`p,`d, AutoInstall::ModuleMap,
	    ``{

	if (d["Autoinst"]:"" == "all" || d["Autoinst"]:"" == "write")
	{
	    if (haskey(d,"AutoinstResource"))
		resource = d["AutoinstResource"]:"unknown";
	    else
		resource = p;
	    y2milestone("current resource: %1", resource);

	    // determine name of client, if not default name
	    if (haskey(d,"WriteClient"))
		module_write = d["WriteClient"]:"none";
	    else
		module_write = sformat("%1_write", p);


	    y2debug("Writing configuration for %1", d["Name"]:"");
	    if (haskey(install, resource) || haskey(configure, resource) )
	    {
		if (d["AutoinstDataType"]:"map" == "map")
		{
		    if (d["AutoinstPath"]:"configure" == "install")
			result = WFM::CallModule(module_write, [eval(install[resource]:$[])]);
		    else
			result = WFM::CallModule(module_write, [eval(configure[resource]:$[])]);
		}
		else
		{
		    if (d["AutoinstPath"]:"configure" == "install")
			result = WFM::CallModule(module_write, [install[resource]:[]]);
		    else
			result = WFM::CallModule(module_write, [configure[resource]:[]]);
		}
	    }
	}
    });


    Progress::NextStage();
    list users = configure["users"]:[];
    if (size(users)>0)
    {
	import "Users";
	if (UserDefs::encryption == `md5)
	{
	    Users::encryptionMethod = "md5";
	}
	else if (UserDefs::encryption == `blowfish)
	{
	    Users::encryptionMethod = "blowfish";
	}

        boolean set_root = false;
        foreach (map user, users, ``{
            if (user["username"]:"" == "root") {
                set_root = true;
				Users::rootPassword =  user["user_password"]:"";
                if (!user["encrypted"]:false) {
					Users::cryptRootPassword();
                }

            }
        });
        // Root password and user account
        if (!Users::SetRootPassword())
        {
            // Error msg
            y2error("Error while adding the root user");
            Report::Error(_("The root password could not be set!
You will not be able to login!
"));
        }

        Progress::Title(_("Adding user accounts.."));
        if (!(size(users) == 1 && set_root)) {
            CallFunction(`users_write(users));
        }
    }

    Progress::NextStage();


    string output = "";
    foreach(`mod, `conf, configure["custom_variables"]:$[], ``{
        foreach(`k,`v, conf, ``{
            output = output + sformat("%1=\"%2\"\n", k , v );
        });
        string filename = sformat("/var/adm/autoinstall/variables/%1", mod);
        SCR::Write(.target.string, filename, output);
        output = "";
    });

    AutoInstall::scriptSettings("post-scripts");


    Progress::Finish();

    return `next;
}
