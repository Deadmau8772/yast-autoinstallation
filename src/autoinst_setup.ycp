/**
 * File:	clients/autoinst_setup.ycp
 * Package:	Auto-installation
 * Summary:	Setup and prepare system for auto-installation
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */

{

    textdomain "autoinst";

    import "AutoInstall";
    import "Installation";
    import "Keyboard";
    import "Kernel";
    import "Mouse";
    import "Language";
    import "Timezone";
    import "Console";
    import "Storage";
    import "Progress";
    import "Boot";
    import "Report";
    import "Packages";
    import "SpaceCalculation";

    string help_text = UI(_("<P>
Please wait while the system is prepared for autoinstallation.
</P>
"));
    list progress_stages =
	[
	 _("Load and configure additional kernel modules"),
	 _("Configure Language, Keyboard and Time zone "),
	 _("Configure Mouse"),
	 _("Execute pre-install user scripts"),
	 _("Create partition plans"),
	 _("Configure Bootloader"),	 
	 _("Configure Software selections")
	 ];

    list progress_descriptions =
	[
	 _("Loading and configuring additional kernel modules"),
	 _("Configuring language, Keyboard and Time zone..."),
	 _("Configuring Mouse..."),
	 _("Executing pre-install user scripts..."),
	 _("Creating partition plans..."),
	 _("Configuring Bootloader..."),	 
	 _("Configuring Software selections...")
	 ];

    Progress::New(
		  _("Preparing System for Automated Installation"),
		  "",     // progress_title
		  size( progress_stages ),	// progress bar length
		  progress_stages,
		  progress_descriptions,
		  help_text );

    
    Progress::NextStage();
    // Additional Kernel modules
    ///////////////////////////////////////////////////////////////////////
    if (is(AutoInstall::loadKernelModules, list) && size(AutoInstall::loadKernelModules) > 0 )
    {
	foreach(`m, AutoInstall::loadKernelModules, ``{
	    if (m["module"]:"" != "")
	    {
		ModuleLoading::Load(m["module"]:"",
				    m["module_arguments"]:"",
				    m["vendor"]:"Additional Module",
				    m["device"]:"Additional Module",
				    false,
				    m["modprobe"]:false);
		if (m["configure"]:false)
		{
		    ModulesConf::ModuleArgs (m["module"]:"",m["module_arguments"]:"" );
		}
	    }
	
	});
    }

    if (is(AutoInstall::configureKernelModules, list) && size(AutoInstall::configureKernelModules) > 0 )
    {
	foreach(`m, AutoInstall::configureKernelModules, ``{
	    if (m["module"]:"" != "")
	    {	
		ModulesConf::ModuleArgs (m["module"]:"",m["module_arguments"]:"" );
	
	    }
	
	});
    }   

    

    
    //Keyboard
    ///////////////////////////////////////////////////////////////////////
    // Set it in Keyboard module.
    Progress::NextStage();
    
    Progress::Title(_("Configuring Keyboard"));

    map install = AutoInstall::Profile["install"]:$[];
    map configure = AutoInstall::Profile["configure"]:$[];

    
    
    AutoInstall::generalSettings();
    
    string keyboard = AutoInstall::Keyboard;
    y2milestone("Setting keyboard to: %1", keyboard);
    
    Keyboard::SetConsole( keyboard );
    Keyboard::SetX11( keyboard );
 

    // Timezone
    
    Progress::Title(_("Configuring Timezone"));
    if (AutoInstall::Timezone != "")
    {
	Timezone::Set(AutoInstall::Timezone);
    }

    // Hardware Clock
    ////////////////////////////////////////////////////////////////////////
    
    Timezone::hwclock = AutoInstall::Hwclock;

    // mouse
    ////////////////////////////////////////////////////////////////////////
    
    Progress::NextStage();
    if (AutoInstall::Mouse!="probe")
    {
	Mouse::Set(AutoInstall::Mouse);
    }

    // Scripts
    ///////////////////////////////////////////////////////////////////////////

    Progress::NextStage();
    AutoInstall::scriptSettings("pre-scripts");

    // Partitioning and Storage
    ////////////////////////////////////////////////////////////////////////

    Progress::NextStage();
    AutoInstall::partitionSettings();

    // Bootloader
    /////////////////////////////////////////////////////////////////////////

    Progress::NextStage();
    AutoInstall::bootloaderSettings();

 
    // Software
    //////////////////////////////////////////////////////////////////////////
    Progress::NextStage();
    AutoInstall::softwareSettings();

    Progress::Finish();

    return `next;
}
