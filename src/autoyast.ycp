/**
 * File:	clients/autoyast.ycp
 * Summary:	Main file for client call
 * Authors:*	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{
    textdomain "autoinst";
    import "Wizard";
  
    import "Mode";
    Mode::config = true;

    import "Profile";
    import "AIConfig";    
    import "AIServer";
    import "AIClone";
    import "AIClass";

    import "Summary";




    include "ui/common_popups.ycp";
    include "ui/common_messages.ycp";
    include "wizard/sequencer.ycp";    


    include "autoinstall/dialogs.ycp";
    include "autoinstall/help.ycp";
    include "autoinstall/conftree.ycp";
    include "autoinstall/classes.ycp";
    include "autoinstall/packageMgmt.ycp";    
    include "autoinstall/imports.ycp";
    include "autoinstall/io.ycp";
    
    boolean popup_open = false;
    symbol ct = `single;



    
    list menuitems = [`menu_open,
		      `menu_delete,
		      `menu_save,
		      `menu_saveas,
		      `menu_alice,
		      `menu_kickstart,
		      `menu_new,
		      `menu_iso,
		      `menu_exit,
		      `menu_source,
		      `menu_tree,
		      `menu_reps,
		      `menu_general,
		      `menu_clone
    ];

    
    global map dialogs = $[			 
			   "file"		:	``(   FileDialog() ),
			   "tree"		:	``(   ConfTree() ),
			   "profiles"		:	``(   ManageProfiles() ),
			   "classes"		:	``(   ManageClasses() ),
			   "profile"		:	``(   Profile()),
			   "merge"		:	``(   MergeDialog()),
			   "save"		:	``(   SaveDialog() ),
			   "preferences"	:	``(   Preferences()),			   
			   "cloneSystem"	:	``(   cloneSystem()),					   
			   "alice"		:	``(   aliceImportOptions() ),
			   "aliceList"		:	``(   aliceImportList() ),
			   "kickstart"		:	``(   kickstartImport() ),
			   "hosts"		:	``(   hostConf() ),
			   "processTemplate"	:	``(   processTemplate() ),
			   "iso"		:	``(   isoDialog() ),
			   "createiso"		:	``(   createISO() ),
			   "openProfile"	:	``(   openProfile() )

    ];


    /**
     * Whole configuration of autoyast
     * @return `back, `abort or `next
     */

    global define symbol AutoSequence () ``{

	map sequence = $[
			 "ws_start" : "tree",		
			 "alice":
			 $[
			   `abort	: `abort,
			   `next	: "aliceList"
			 ],
			 "aliceList":
			 $[
			   `abort	: `abort,			  
			   `save	: "save",
			   `load	: "tree"
			  
			 ],
			 "hosts":
			 $[
			   `abort	: `abort,
			   `next	: "tree"
			 ],
			 "kickstart":
			 $[
			   `abort	: `abort,
			   `next	: "tree",
			   `save	: "save",
			   `load	: "tree",
			   `failed	: "tree"
			 ],
			 "cloneSystem":
			 $[
			   `load	: "tree",
			   `save	: "save"

			 ],			
			 "iso":
			 $[
			   `next	: "createiso",			   
			   `abort	: `abort
			 ],
			 "openProfile":
			 $[
			   `next	: "iso", // FIXME -> iso
			   `abort	: `abort
			 ],
			 "createiso":
			 $[
			   `next	: "tree",
			   `abort	: `abort
			 ],			
		
			 "file":
			 $[
			   `abort	: `abort,
			   `open	: "tree",
			   `next	: "tree",
			   `merge	: "processTemplate"
			 ],
			 "processTemplate":
			 $[
			   `next	: "save",
			   `abort	: `abort

			 ],
			 "profiles":
			 $[
			   `abort	: `abort,
			   `add		: "classes",
			   `new		: "tree",
			   `edit	: "tree",
			   `next	: "merge"
			 ],
			 "tree":
			 $[			
			   `next	: `ws_finish
			 ],
			 "classes":
			 $[
			   `next	: "profiles",
			   `abort	: `abort

			 ],
			 "profile":
			 $[
			   `abort	: `abort,
			   `next	: "profiles"
			 ],
			 "merge":
			 $[
			   `abort	:`abort,
			   `next	: "save",
			   `profiles	: "profiles"
			 ],
			 "save":
			 $[
			   `abort	: `abort,
			   `edit	: "tree",			   
			   `next	: `ws_finish
			 ],
			 "preferences":
			 $[
			   `abort	: `abort,
			   `next	: "tree"
			 ]
	];


	// Translators: dialog caption
	string caption = _("Autoinstall Configuration");
	term contents = `Label (_("Initializing ..."));

	Wizard::CreateDialog ();
	Wizard::SetContentsButtons ( caption,
				     contents,
				     "",
				     BackButtonLabel (),
				     NextButtonLabel ());


	any ret = WizardSequencer (dialogs, sequence);

	UI::CloseDialog ();
	return ret;
    }



    any ret = AutoSequence ();
    Wizard::RestoreScreenShotName (); 
    return ret;
}
