/**
 * File:	clients/autoyast.ycp
 * Summary:	Main file for client call
 * Authors:*	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{
    textdomain "autoinst";
    import "Wizard";
    // Wizard::image_prefix = "autoyast_";

    import "Mode";
    Mode::config = true;

    import "AIConfig";
    import "AIServer";
    import "AIClone";
    import "AIClass";

    import "Summary";




    include "ui/common_popups.ycp";
    include "ui/common_messages.ycp";
    include "wizard/sequencer.ycp";
    include "ui/file_popups.ycp";


    include "autoinstall/dialogs.ycp";
    include "autoinstall/help.ycp";
    include "autoinstall/conftree.ycp";
    include "autoinstall/classes.ycp";
    include "autoinstall/packageMgmt.ycp";
    // include "autoinstall/mediaManagement.ycp";
    include "autoinstall/imports.ycp";
    include "autoinstall/io.ycp";


    define initPM ()
	``{
	if (AIConfig::PMcalled) {
	    return `found_descr;
	}
	
	UI::OpenDialog(`opt(`decorated ),`Label(_("Reading package information; One moment please...")));

	// start package manager
	list sources = Pkg::SourceStartCache(true);
	if (size (sources) <= 0)
	{
	    UI::CloseDialog();
	    return `unknown_descr;
	}

	AIConfig::sourceData	= Pkg::SourceGeneralData(sources[0]:-1);
	AIConfig::productData	= Pkg::SourceProductData(sources[0]:-1);
	AIConfig::mediaData	= Pkg::SourceMediaData(sources[0]:-1);
	
	string tmprep = SCR::Read(.target.tmpdir);
	SCR::Execute(.target.mkdir, tmprep);
	y2milestone("Fake root %1", tmprep);

	if (tmprep != nil)
	{
	    Pkg::TargetInit (tmprep, true);
	}


	UI::CloseDialog();
	
	AIConfig::PMcalled = true;
	return `found_descr;

    };	// initPM

	
    
    boolean popup_open = false;
    global map dialogs = $[
			   "configurationType"	:	``(   configurationType() ),
			   "file"		:	``(   FileDialog() ),
			   "tree"		:	``(   ConfTree() ),
			   "profiles"		:	``(   ManageProfiles() ),
			   "classes"		:	``(   ManageClasses() ),
			   "profile"		:	``(   Profile()),
			   "merge"		:	``(   MergeDialog()),
			   "save"		:	``(   SaveDialog() ),
			   "preferences"	:	``(   Preferences()),			   
			   "cloneSystem"	:	``(   cloneSystem()),					   
			   "alice"		:	``(   aliceImportOptions() ),
			   "aliceList"		:	``(   aliceImportList() ),
			   "kickstart"		:	``(   kickstartImport() ),
			   "hosts"		:	``(   hostConf() ),
			   "processTemplate"	:	``(   processTemplate() ),
			   "iso"		:	``(   isoDialog() ),
			   "createiso"		:	``(   createISO() ),
			   "openProfile"	:	``(   openProfile() )

    ];


    /**
     * Whole configuration of autoyast
     * @return `back, `abort or `next
     */

    global define symbol AutoSequence () ``{

	map sequence = $[
			 "ws_start" : "configurationType",
			 "configurationType":
			 $[
			   `abort	: `abort,
			   `single	: "file",
			   `profiles	: "profiles",
			   `pref	: "preferences",			   
			   `clone	: "cloneSystem",			  
			   `alice	: "alice",
			   `kickstart   : "kickstart",
			   `hostConf	: "hosts",
			   `directmedia : "openProfile"
			 ],
			 "alice":
			 $[
			   `abort	: `abort,
			   `next	: "aliceList"
			 ],
			 "aliceList":
			 $[
			   `abort	: `abort,
			   `next	: "configurationType",
			   `save	: "save",
			   `load	: "tree",
			   `failed	: "configurationType"
			 ],
			 "hosts":
			 $[
			   `abort	: `abort,
			   `next	: "configurationType"
			 ],
			 "kickstart":
			 $[
			   `abort	: `abort,
			   `next	: "configurationType",
			   `save	: "save",
			   `load	: "tree",
			   `failed	: "configurationType"
			 ],
			 "cloneSystem":
			 $[
			   `load	: "tree",
			   `save	: "save"

			 ],			
			 "iso":
			 $[
			   `next	: "createiso",			   
			   `abort	: `abort
			 ],
			 "openProfile":
			 $[
			   `next	: "iso", // FIXME -> iso
			   `abort	: `abort
			 ],
			 "createiso":
			 $[
			   `next	: "configurationType",
			   `abort	: `abort
			 ],			
		
			 "file":
			 $[
			   `abort	: `abort,
			   `open	: "tree",
			   `next	: "tree",
			   `merge	: "processTemplate"
			 ],
			 "processTemplate":
			 $[
			   `next	: "save",
			   `abort	: `abort

			 ],
			 "profiles":
			 $[
			   `abort	: `abort,
			   `add		: "classes",
			   `new		: "tree",
			   `edit	: "tree",
			   `next	: "merge"
			 ],
			 "tree":
			 $[
			   `abort	: `abort,
			   `single	: "save",
			   `profiles	: "profile",
			   `clone	: "save",
			   `alice	: "save",
			   `kickstart	: "save",
			   `next	: "save"
			 ],
			 "classes":
			 $[
			   `next	: "profiles",
			   `abort	: `abort

			 ],
			 "profile":
			 $[
			   `abort	: `abort,
			   `next	: "profiles"
			 ],
			 "merge":
			 $[
			   `abort	:`abort,
			   `next	: "save",
			   `profiles	: "profiles"
			 ],
			 "save":
			 $[
			   `abort	: `abort,
			   `edit	: "tree",			   
			   `next	: `ws_finish
			 ],
			 "preferences":
			 $[
			   `abort	: `abort,
			   `next	: "configurationType"
			 ]
	];


	// Translators: dialog caption
	string caption = _("Autoinstall Configuration");
	term contents = `Label (_("Initializing ..."));

	Wizard::CreateDialog ();
	Wizard::SetContentsButtons ( caption,
				     contents,
				     "",
				     BackButtonLabel (),
				     NextButtonLabel ());


	any ret = WizardSequencer (dialogs, sequence);

	UI::CloseDialog ();
	return ret;
    }


    /**
     * Main dialog
     * @return symbol
     */

    global define symbol configurationType()
	``{
	Wizard::SetScreenShotName ("autoyast-configurationType");
	symbol ct = AIConfig::config_type;
	y2milestone("type %1", ct);
	// Translators: dialog caption
	string caption = _("Autoinstallation Configuration System");
	term contents =
	    `VBox(
		  `RadioButtonGroup (
				     `id (`ctg),
				     `VBox (
					    `VSpacing (1),
					    `Left(`Label(_("Profile Management"))),
					    `VSpacing (0.5),
					    `HBox(
						  `HWeight(10,
							   `Empty()
							   ),
						  `HWeight(90,
							   `Left (
								  `RadioButton (`id (`single),
										`opt (`notify),
										_("Create or Edit Configurati&ons"),
										ct == `single)
								  )
							   )
						  ),
					    /*
					      `HBox(
						  `HWeight(10,
							   `Empty()
							   ),
						  `HWeight(90,
							   `Left (
								  `RadioButton (`id (`hostConf),
										`opt (`notify),
										_("&Host Configuration"),
										ct == `host)
								  )
							   )
						  ),
					    */
					    `HBox(
						  `HWeight(10,
							   `Empty()
							   ),
						  `HWeight(90,
							   `Left (
								  `RadioButton (`id (`profiles),
										`opt (`notify),
										_("&Create or Edit Classes"),
										ct == `profiles)
								  )
							   )
						  ),
					    `HBox(
						  `HWeight(10,
							   `Empty()
							   ),
						  `HWeight(90,
							   `Left (
								  `RadioButton (`id (`clone),
										`opt (`notify),
										_("C&lone this machine"),
										ct == `clone)
								  )
							   )
						  ),
					     `VSpacing (1),
					    `Left(`Label(_("Media Management"))),
					    `VSpacing (0.5),
					    /*
					    `HBox(
						  `HWeight(10,
							   `Empty()
							   ),
						  `HWeight(90,
							   `Left (
								  `RadioButton (`id (`server),
										`opt (`notify),
										_("Pr&epare Server"),
										ct == `server)
								  )
							   )
						  ),
					    */
					    `HBox(
						  `HWeight(10,
							   `Empty()
							   ),
						  `HWeight(90,
							   `Left (
								  `RadioButton (`id (`directmedia),
										`opt (`notify),
										_("&Create ISO Image"),
										ct == `directmedia)
								  )
							   )
						  ),
					    /*
					    `HBox(
						  `HWeight(10,
							   `Empty()
							   ),
						  `HWeight(90,
							   `Left (
								  `RadioButton (`id (`netboot),
										`opt (`notify),
										_("&Create Netboot Image"),
										ct == `netboot)
								  )
							   )
						  ),
					    */
					    `VSpacing (1),
					    `Left(`Label(_("Import data"))),
					    `VSpacing (0.5),
					    `HBox(
						  `HWeight(10,
							   `Empty()
							   ),
						  `HWeight(90,
							   `Left (
								  `RadioButton (`id (`alice),
										`opt (`notify),
										_("Import Alice confi&guration"),
										ct == `alice)
								  )
							   )
						  ),
					    `HBox(
						  `HWeight(10,
							   `Empty()
							   ),
						  `HWeight(90,
							   `Left (
								  `RadioButton (`id (`kickstart),
										`opt (`notify),
										_("&Import Kickstart file"),
										ct == `kickstart)
								  )
							   )
						  ),
					    `VStretch(),
					    `PushButton(`id(`pref), _("&Preferences")),
					    `VSpacing(1)
					    )
				     )

		  );


	Wizard::SetContentsButtons (caption,
				    contents,
				    ConfigurationTypeHelp(),
				    BackButtonLabel (),
				    NextButtonLabel ());

	initPM();
	any ret = nil;
	while (true)
	{
	    ct = UI::QueryWidget (`id (`ctg), `CurrentButton);

	    ret = UI::UserInput ();
	    if (ret == `back || ret == `pref || ret == `next  || (ret == `abort && UI::ReallyAbortPopup (AIConfig::changed)))
	    {
		break;
	    }
	}
	AIConfig::config_type=ct;

	if (ret == `back   || ret == `abort || ret == `pref)
	{
	    return ret;
	}
	else
	{
	    return ct;
	}
    }
    any ret = AutoSequence ();
    Wizard::RestoreScreenShotName ();

    if (SCR::Read(.target.size, "/var/lib/autoinstall/selections.cache") > 0)
    {
	SCR::Execute(.target.remove, "/var/lib/autoinstall/selections.cache");
    }
    return ret;
}
