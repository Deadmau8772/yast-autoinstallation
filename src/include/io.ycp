/**
 * File:	include/autoinstall/io.ycp
 * Package:	Autoinstallation Configuration System
 * Summary:	I/O
 * Authors:	Anas Nashif<nashif@suse.de>
 *
 * $Id$
 */
{
    textdomain "autoinst";

    /**
     * Translate messages
     * @param string
     * @return Translated string
     */
    global define string Translate (string text)
	``{
	// remove _(" and ")
	if (regexpmatch (text, ".*_\\(.*\"(.*)\".*\\).*"))
	{
	    text = regexpsub (text, ".*_\\(.*\"(.*)\".*\\).*", "\\1");
	    //Workaround for 7.3 Bug
	    //text = regexpsub (text, "(.*)\".*\\).*", "\\1");
	}
	locale l = text;
	list retl = splitstring((string)eval (l), "\n");
	string ret = mergestring(retl, " ");
	return (ret);
    }

    
    /**
     * return basename
     */
    global define string basename (string filePath)
	``{
	list pathComponents = splitstring(filePath, "/");
	string ret = pathComponents[size(pathComponents) -1 ]: "";
	return ( ret );
    }



    /**
     * return dirname
     */
    global define string dirname (string filePath)
	``{
	   list pathComponents = splitstring(filePath, "/");
	   string last = pathComponents[size(pathComponents) -1]:"";
	   string ret = substring(filePath, 0 , size(filePath) - size(last));
	   return (ret);
    }


    /**
     * Get control files from different sources
     *
     */
    global define boolean Get(string Scheme,
			      string Host,
			      string Path ,
			      string port,
			      string user,
			      string pass,
			      string Localfile)
	``{
	boolean ok = false;

	if ( Scheme == "http" )
	{
	    import "HTTP";
	    string full_url = "";
	    string port_str = "";
	    
	    if (port !=  "")
	    {
		port_str = sformat(":%1", port);
	    }
	    if (user == ""  && pass  == "")
	    {
		full_url = sformat("http://%1%2", Host , port_str,  Path );
	    }
	    else
	    {
		full_url = sformat("http://%1:%2@%3%4%s", user, pass, Host , port_str,  Path );
	    }

	    map res = HTTP::Get(full_url, Localfile);
	    if (res["code"]:0 == 200)
	    {
		return (true);
	    }
	    else
	    {
		y2error("Can't find URL: %1", full_url);
		return (false);
	    }
	}
	if ( Scheme == "ftp" )
	{
	    import "FTP";
	    string full_url = "";
		if (user!= ""  && pass != "")
		{
			full_url = sformat("ftp://%1%2", Host ,  Path );
		}
		else
		{
			full_url = sformat("ftp://%1:%2@%3%4", user, pass, Host ,  Path );
		}

	    map res = FTP::Get(full_url, Localfile);
	    if (SCR::Read(.target.size, Localfile) > 0)
	    {
		return (true);
	    }
	    else
	    {
		y2error("Can't find URL: %1", full_url);
		return (false);
	    }
	}
	else if (Scheme == "file")
	{
	    string file = sformat("%1/%2", Installation::sourcedir, Path);
	    if (SCR::Read(.target.size, file) > 0 )
	    {
		string cpcmd = sformat("cp %1 %2", file, Localfile);
		y2milestone("Copy profile: %1", cpcmd);
		SCR::Execute(.target.bash, cpcmd);
	    }
	    else
	    {
		string cpcmd = sformat("cp %1 %2", Path , Localfile);
		y2milestone("Copy profile: %1", cpcmd);
		SCR::Execute(.target.bash, cpcmd);
	    }

	    if (SCR::Read(.target.size, Localfile) > 0 )
	    {
		ok = true;
	    }
	    else
	    {
		y2milestone("Try on installation media: %1", Mode::boot);
		if (Mode::boot == "cd")
		{
		    string cdrom = (string)SCR::Read (.etc.install_inf.Cdrom);
		    integer shellret =  (integer) SCR::Execute(.target.bash, "/bin/mount /dev/" + cdrom + " /mnt");
		    if (shellret != 0 )
		    {
			y2warning("Mount failed");
		    }
		    else
		    {
			string cpcmd = sformat("cp /mnt/%1 %2", Path , Localfile);
			y2milestone("Copy profile: %1", cpcmd);
			SCR::Execute(.target.bash, cpcmd);
		    }
		    shellret =  (integer) SCR::Execute(.target.bash, "/bin/umount  /mnt");
		    if (SCR::Read(.target.size, Localfile) > 0 )
		    {
			return (true);
		    }
		}

		ok = false;
	    }
	}
	else if (Scheme == "nfs")  // NFS
	{
	    if (Mode::boot != "nfs")
	    {
		y2milestone("Starting portmap: %1", SCR::Execute (.target.bash, "/sbin/portmap") );	
	    }

	    integer shellret =  (integer)SCR::Execute(.target.bash, "/bin/mount " + Host + ":" + dirname(Path) +" /mnt -t nfs");
	    
	    if (shellret != 0 )
	    {
		y2warning("Mount failed");
		return (false);
	    }

	    if (SCR::Execute (.target.bash, "/bin/cp /mnt/" + basename(Path) + " " + Localfile) == 0)
	    {
		ok = true;
	    }
	    else
	    {
		y2error("Control file can't be found");

	    }

	    WFM::Execute(.local.bash, "/bin/umount /mnt");

	}
	else if (Scheme == "floppy")
	{
	    import "StorageDevices";
	    if (StorageDevices::FloppyReady())
	    {
		SCR::Execute(.target.mount, [StorageDevices::FloppyDevice, "/media/floppy"], "-t auto");

		if (SCR::Execute (.target.bash, "/bin/cp /media/floppy/" + Path + " " + Localfile) != 0)
		{
		    y2error("Control file can't be found");
		}
		else
		{
		    ok = true;
		}
		SCR::Execute(.target.umount, "/media/floppy");
	    }
	}
	else if (Scheme == "device") // Device
	{
	    if ( Host != "" && Path != "")
	    {
		SCR::Execute(.target.mount, [sformat("/dev/%1", Host) , "/mnt"], "-t auto");

		if (SCR::Execute (.target.bash, "/bin/cp /mnt" +  Path + " " + Localfile) != 0 )
		{
		    y2error("Control file can't be found");
		}
		else
		{
		    ok = true;
		}
		SCR::Execute(.target.umount, "/mnt");
	    }
	}
	else if (Scheme == "tftp") // Device
	{
	    import "TFTP";
	    if (TFTP::Get( Host,  Path, Localfile ))
	    {
		ok = true;
	    }
	    else
	    {
		y2error("Control file can't be found");
	    }
	}
	else
	{
	    y2error("Protocol not supported");
	    ok = false;
	}


	return ( ok );
    }

    
}
