/**
 * File:	include/autoinstall/io.ycp
 * Package:	Autoinstallation Configuration System
 * Summary:	I/O
 * Authors:	Anas Nashif<nashif@suse.de>
 *
 * $Id$
 */
{
    textdomain "autoinst";

    /**
     * Translate messages
     * @param string
     * @return Translated string
     */
    global define Translate (string text)
	``{
	// remove _(" and ")
	if (regexpmatch (text, ".*_\\(.*\"(.*)\".*\\).*"))
	{
	    text = regexpsub (text, ".*_\\(.*\"(.*)\".*\\).*", "\\1");
	    //Workaround for 7.3 Bug
	    //text = regexpsub (text, "(.*)\".*\\).*", "\\1");
	}
	locale l = text;
	return mergestring (splitstring (eval (l), "\n"), " ");
    }


    global define string createISOCmd(boolean nojoliet, string source , string dest )``{
	string params = "";
	string isotmp = SCR::Read (.target.tmpdir);
	string sortfile = isotmp + "/sortfile";
	if (nojoliet)
	    params =  "-r -T -pad";
	else
	    params = "-r -T -J -pad";

	string suseDir = source + "/suse";
	string bootDir = suseDir + "/images/boot";
	if (SCR::Read(.target.dir, suseDir)!=nil && SCR::Read(.target.dir, bootDir)!=nil )
	{
	    // map exec = SCR::Execute (.target.bash_output, "find /usr/lib/YaST2/clients -name \"*_auto.ycp\" -exec basename {} _auto.ycp \\;");
	    string findstring = "find " + source + "/suse/images/boot -printf \"%p 1\\n\" > " + sortfile;
	    SCR::Execute (.target.bash, findstring);
	    params = params + sformat(" -sort %1 -no-emul-boot -boot-load-size 4 -boot-info-table -b suse/images/boot/isolinux.bin -c suse/images/boot.catalog", sortfile);
	    y2milestone("found boot image. Making CD bootable.");
	    SCR::Execute(.target.mkdir, sformat("%1/suse/images/boot", isotmp));

	}
	else
	{
	    y2milestone("found no boot image. No bootable CD.");
	}
	string distident_cmd = sformat("fgrep DIST_IDENT %1/suse/setup/descr/info | awk -F' ' '{ printf  $2 } '", source);
	map exec = SCR::Execute (.target.bash_output,distident_cmd);
	string distident = lookup (exec, "stdout", "");
	if (distident != "") {
	    params = params + sformat(" -A %1", distident);
	}

	string mkisofs = sformat("mkisofs -p \"Custom CD\" -P \"SuSE Linux AG\" %1 -o %2 %3 %4", params, dest, isotmp, source);
	return mkisofs;
    }



    /**
     * Go through resources and properties and set types accordingly
     *
     */
    global define ConvertType(any value) ``{
	if (is(value, boolean))
	    return value;
	else if (is(value, integer))
	    return value;
	else if (is(value, symbol))
	    return value;
	else if (is(value, string)) {
	    if (value == "")
		return value;
	    else if (value == "true")
	    {
		return true;
	    }
	    else if ( value == "false")
	    {
		return false;
	    }
	    else if  ( findfirstnotof( value, "0123456789") == nil  )
	    {
		return(tointeger(value));
	    }
	    else
	    {
		return value;
	    }
	} else {
	    return value;
	}
    }


    /**
     * Get a resource configuration map from control file
     * @param string parent
     * @param string resource
     * @param boolean convert types
     * @return map configuration list
     */
    global define map GetMap (map parent, string resource, boolean convert)
	``{
	map result = parent[resource]:$[];

	if (!convert)
	{
	    return result;
	}

	map ret = mapmap(`k,`v, result,
			 ``{
			     if (is(v, map) || is(v,list)) {
				 return ([k,v]);
			     }
			     else
			     {
				 return ([k,ConvertType(v)]);
			     }
			 });
	return ret;

    }

    /**
     * Geta configuration list from Profile
     * @param string parent
     * @param string resource
     * @param boolean convert types
     * @return list configuration list
     */
    global define list GetList (map parent, string resource, boolean convert)``{
	list result = parent[resource]:[];
	if (!convert)
	{
	    return result;
	}

	list ret = maplist(`k, result,
			 ``{
			     if (is(v, map) || is(v,list)) {
				 return (v);
			     }
			     else
			     {
				 return (ConvertType(v));
			     }
			 });
	return ret;

    }

    /**
     * Get Configuration Map
     * @return map  Configuration Map
     */
    global define GetConfMap (string type, boolean convert)``{
	map result = Configure[type]:$[];
	if (!convert)
	    return result;

	map ret = mapmap(`k,`v, result,
			 ``{
			     if (is(v, map) || is(v,list)) {
				 return ([k,v]);
			     }
			     else
			     {
				 return ([k,ConvertType(v)]);
			     }
			 });
	return ret;

    }
    /**
     * Get configuration list
     *
     */
    global define GetConfList (string type, boolean convert )
	``{
	list result =  Configure[type]:[];
	if (!convert)
	    return result;

	list ret = maplist(`v, result,
			   ``{
			       if (is(v, map) || is(v,list)) {
				   return (v);
			       }
			       else
			       {
				   return (ConvertType(v));
			       }
			   });
	return ret;
    }

    /**
     * Convert a Map to accepted values
     *
     */
    global define map ConvertMap (map MyMap)
	``{
	map ret = mapmap(`k,`v, MyMap,
			 ``{
			     if (is(v, map) || is(v,list)) {
				 return ([k,v]);
			     }
			     else
			     {
				 return ([k,ConvertType(v)]);
			     }
			 });
	return ret;
    }




}
