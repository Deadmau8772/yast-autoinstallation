/**
 * File:	include/autoinstall/profileLocation.ycp
 * Package:	Auto-installation
 * Summary:	Parses XML profile
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 *
 */

{

    textdomain "autoinst";

    import "StorageDevices";
    import "Mode";
    import "TFTP";
    import "HTTP";
    include "network/ip.ycp";


    /**
     * ProtocolMessag()
     * @param map containing location data of profile
     * @return message descriping location
     */

    global define ProtocolMessage(map cmdLine) ``{
	string Protocol = lookup(cmdLine, "scheme", "default");
	string message = "";

	if (Protocol == "floppy")
	{
	    message =  _("Retrieving control file from floppy.");
	}
	else if (Protocol == "tftp")
	{
	    message =  sformat ( _("Retrieving control file from TFTP server %1."),  lookup(cmdLine, "host", "unknown") );
	}
	else if (Protocol == "nfs")
	{
	    message =  sformat ( _("Retrieving control file from NFS server %1."),  lookup(cmdLine, "host", "unknown") );
	}
	else if (Protocol == "http")
	{
	    message =  sformat ( _("Retrieving control file from HTTP server %1."),  lookup(cmdLine, "host", "unknown") );
	}
	else if (Protocol == "file")
	{
	    message =  sformat ( _("Copying control file from file %1."),  lookup(cmdLine, "path", "unknown") );
	}
	else if (Protocol == "device")
	{
	    message =  sformat ( _("Copying control file from device /dev/%1."),  lookup(cmdLine, "path", "unknown") );
	}
	else if (Protocol == "default")
	{
	    message =   _("Copying control file from default file.");
	}
	else
	{
	    message =   _("Source unknown.");
	}
	return message;
    }

    /**
     * Return MAC address of active device
     */

    global define string getMAC() ``{
	string mac = "";
	list ifconfig = SCR::Read(.run.ifconfig);
	string device  = SCR::Read (.etc.install_inf.Netdevice);
	foreach(`dev, ifconfig, ``{
	    if (dev["name"]:"" == device)
	    {
		string link = dev["value", "link"]:"";
		list linktok = splitstring(link, " ");
		list clean = filter(`tok, linktok, ``(tok != ""));
		y2milestone("mac line: %1", clean);
		mac = clean[3]:"";
	    }

	});
	string cleanmac = deletechars(tolower(mac), ":");
	return cleanmac;
    }

    /**
     * Retrieve the profile using TFTP
     * @param autoyast Map with value of the autoyast keyword (command line)
     * @param localfile Location where the retrieved file should be copied
     * @return true for success
     * @example UseTFTP ($[<cmdline>], "/tmp/profile.xml")
     */

    global define UseTFTP(map cmdLine, string localfile)
	``{
	string ip = "";
	string path_to_file = lookup(cmdLine, "path","");
	string server = cmdLine["host"]:"";
	boolean ok = false;
	string remote = "";
	if (substring(path_to_file, size(path_to_file) -1) == "/")
	{
	    ip = SCR::Read(.etc.install_inf.IP);
	    string tmp_hex_ip = ip2hex(ip);


	    y2milestone("Trying to load: %1%2", path_to_file, tmp_hex_ip );
	    remote = sformat("%1/%2",  path_to_file , tmp_hex_ip);

	    if (TFTP::Get(server, remote, localfile))
	    {
		y2milestone("tftp success");
		ok = true;
	    }
	    else
	    {
		while (size(tmp_hex_ip) != 1)
		{
		    tmp_hex_ip = substring(tmp_hex_ip, 0 , size(tmp_hex_ip)-1);
		    y2milestone("Trying to load: %1%2", path_to_file, tmp_hex_ip );

		    remote = sformat("%1/%2",  path_to_file , tmp_hex_ip);
		    if (TFTP::Get(server, remote, localfile ))
		    {
			y2milestone("tftp success");
			ok = true;
			break;
		    }
		}
		if (!ok)
		{
		    string mac = getMAC();
		    y2warning("Trying to load: %1/%2", path_to_file, mac);

		    tftpmap = change(tftpmap, "serverstr", server + ":" + path_to_file + mac);
		    remote = sformat("%1/%2",  path_to_file, mac);
		    if (!TFTP::Get(server, remote, localfile))
		    {
			y2error("Control file can't be found");
		    }
		    else
		    {
			y2milestone("tftp success");
			ok = true;
		    }
		}
		if (!ok)
		{
		    y2warning("Trying to load: %1default", path_to_file);

		    tftpmap = change(tftpmap, "serverstr", server + ":" + path_to_file + "default");
		    remote = sformat("%1/default",  path_to_file);
		    if (!TFTP::Get(server, remote, localfile))
		    {
			y2error("Control file can't be found");
		    }
		    else
		    {
			y2milestone("tftp success");
			ok = true;
		    }
		}
	    }
	}
	else
	{
	    if (TFTP::Get(server,  path_to_file, localfile ))
	    {
		ok = true;
	    }
	    else
	    {
		y2error("Control file can't be found");
	    }
	}
	return(ok);
    }

    /**
     * Retrieve the profile using NFS
     * @param parameters Map with value of the autoyast keyword (command line)
     * @param localfile Location where the retrieved file should be copied
     * @return true for success
     * @example UseNFS ($[<cmdline>], "/tmp/profile.xml")
     */

    global define UseNFS(map parameters, string localfile)
	``{
	string ip = SCR::Read(.etc.install_inf.IP);
	boolean ok = false;

	string path_to_file = parameters["path"]:"";
	list pathComp = splitstring(path_to_file, "/");

	string server = parameters["host"]:"";
	boolean is_directory = false;
	string FileName = "";
	string mount_dir = "";

	if (select(pathComp, size(pathComp) -1, "none") == "")
	{
	    is_directory = true;
	    mount_dir = path_to_file;
	}
	else
	{
	    FileName = select(pathComp, size(pathComp) -1,  "none");
	    pathComp = remove(pathComp, size(pathComp) -1);
	    mount_dir = mergestring(pathComp, "/");
	}

	y2milestone("filename: %1", FileName);
	y2milestone("dir to mount: %1", mount_dir);


	integer ret_from_shell =  SCR::Execute(.target.bash, "/bin/mount " + server + ":" + mount_dir +" /mnt -t nfs");
	if (ret_from_shell != 0 )
	{
	    y2warning("Mount failed");
	    return (ok);
	}

	if (is_directory)
	{
	    string tmp_hex_ip = ip2hex(ip);
	    if (size(tmp_hex_ip)==0)
	    {
		return false;
	    }
	    y2warning("Trying to load: %1%2", path_to_file, tmp_hex_ip );
	    if (SCR::Execute (.target.bash, "/bin/cp /mnt/" + tmp_hex_ip + " " + localfile) == 0)
	    {
		y2milestone("copy from nfs success");
		ok = true;
	    }
	    else
	    {
		while (size(tmp_hex_ip) != 1)
		{
		    tmp_hex_ip = substring(tmp_hex_ip, 0 , size( tmp_hex_ip) - 1 );
		    y2warning("Trying to load: %1%2", path_to_file, tmp_hex_ip );
		    if (SCR::Execute (.target.bash, "/bin/cp /mnt/" + tmp_hex_ip + " " + localfile) == 0)
		    {
			y2milestone("Autoinstall: nfs success");
			ok = true;
			break;
		    }
		}
		if (!ok)
		{
		    string mac = getMAC();
		    y2warning("Trying to load: %1/%2", path_to_file, mac);
		    if (SCR::Execute (.target.bash, "/bin/cp /mnt/" + mac + " " + localfile) == 0)
		    {
			y2milestone("Autoinstall: nfs success");
			ok = true;

		    }
		    else
		    {
			y2error("Control file can't be found");
		    }
		}
		if (!ok)
		{
		    y2warning("Trying to load: %1default", path_to_file);
		    if (SCR::Execute (.target.bash, "/bin/cp /mnt/default " + localfile) == 0)
		    {
			y2milestone("Autoinstall: nfs success");
			ok = true;

		    }
		    else
		    {
			y2error("Control file can't be found");
		    }
		}
	    }

	}
	else
	{
	    if (SCR::Execute (.target.bash, "/bin/cp /mnt/" + FileName+ " " + localfile) == 0)
	    {
		ok = true;
	    }
	    else
	    {
		y2error("Control file can't be found");

	    }
	}

	WFM::Execute(.local.bash, "/bin/umount /mnt");
	return(ok);
    }


    /**
     * Retrieve the profile from a floppy disk
     * @param parameters Map with value of the autoyast keyword (command line)
     * @param localfile Location where the retrieved file should be copied
     * @return true for success
     * @example UseFLOPPY ($[<cmdline>], "/tmp/profile.xml")
     */

    global define UseFLOPPY(map parameters, string localfile)
	``{
	boolean ok = false;
	if (StorageDevices::FloppyReady())
	{
	    SCR::Execute(.target.mount, [StorageDevices::FloppyDevice, "/media/floppy"], "-t auto");

	    if (SCR::Execute (.target.bash, "/bin/cp /media/floppy/" + parameters["path"]:"" + " " + localfile) != 0) {
		y2error("Control file can't be found");
	    }
	    else
	    {
		ok = true;
	    }
	    SCR::Execute(.target.umount, "/media/floppy");
	}
	return(ok);
    }


    global define basename(string filePath) ``{
	list pathComponents = splitstring(filePath, "/");
	return (select(pathComponents, size(pathComponents) -1, "default"));
    }


    /**
     * Retrieve the profile from a www server
     * @param parameters Map with value of the autoyast keyword (command line)
     * @param localfile Location where the retrieved file should be copied
     * @return true for success
     * @example UseHTTP ($[<cmdline>], "/tmp/profile.xml")
     */

    global define UseHTTP(map parameters, string localfile)
	``{
	string ip = "";
	boolean ok = false;
	string server = parameters["host"]:"";

	string path_to_file = lookup(parameters, "path","");
	y2milestone("Path to remote control file: %1", path_to_file);

	boolean is_directory = false;
	string FileName = basename(path_to_file);
	string http_dir = "";

	if (FileName == "")
	{
	    is_directory = true;
	    http_dir = path_to_file;
	}
	else
	{
	    http_dir = path_to_file;
	}

	y2milestone("filename: %1", FileName);
	y2milestone("http dir: %1", http_dir);

	map res = $[];
	if (is_directory)
	{

	    ip = SCR::Read(.etc.install_inf.IP);
	    y2milestone("my IP: %1", ip);
	    string tmp_hex_ip = ip2hex(ip);
	    if (size(tmp_hex_ip)==0)
	    {
		return false;
	    }
	    y2milestone("Trying to load: %1%2", path_to_file, tmp_hex_ip );
	    string full_url = sformat("http://%1/%2/%3", server,  http_dir, tmp_hex_ip );

	    res = HTTP::Get(full_url, localfile);
	    if (res["code"]:0 == 200)
	    {
		y2milestone("copy from http success");
		ok = true;
	    }
	    else
	    {
		while (size(tmp_hex_ip) != 1)
		{
		    tmp_hex_ip = substring(tmp_hex_ip, 0 , size(tmp_hex_ip)-1);
		    y2warning("Trying to load: %1%2", path_to_file, tmp_hex_ip );

		    string full_url = sformat("http://%1%2/%3", server ,  http_dir, tmp_hex_ip );
		    res = HTTP::Get(full_url, localfile);
		    if (res["code"]:0 == 200)
		    {
			y2milestone("Autoinstall: HTTP success");
			ok = true;
			break;
		    }
		}

		if (!ok)
		{
		    string mac = getMAC();
		    y2warning("Trying to load: %1%2", path_to_file, mac);
		    string full_url = sformat("http://%1%2/%3", server ,  http_dir , mac);
		    res = HTTP::Get(full_url, localfile);
		    if (res["code"]:0 == 200)
		    {
			y2milestone("Autoinstall: HTTP success");
			ok = true;
		    }
		    else
		    {
			y2error("Control file can't be found");
		    }
		}
		if (!ok)
		{
		    y2warning("Trying to load: %1default", path_to_file);
		    string full_url = sformat("http://%1%2/default", server ,  http_dir );
		    res = HTTP::Get(full_url, localfile);
		    if (res["code"]:0 == 200)
		    {
			y2milestone("Autoinstall: HTTP success");
			ok = true;
		    }
		    else
		    {
			y2error("Control file can't be found");
		    }
		}
	    }

	}
	else
	{
	    string full_url = sformat("http://%1%2", server ,  http_dir );
	    res = HTTP::Get(full_url, localfile);
	    if (res["code"]:0 == 200)
	    {
		ok = true;
	    }
	    else
	    {
		y2error("Control file can't be found");
	    }
	}
	return(ok);
    }


    /**
     * Retrieve the profile from a harddisk/any device
     * @param parameters Map with value of the autoyast keyword (command line)
     * @param localfile Location where the retrieved file should be copied
     * @return true for success
     * @example fetchFromDevice ($[<cmdline>], "/tmp/profile.xml")
     */

    global define fetchFromDevice(map parameters, string localfile)
	``{
	boolean ok = false;
	string device = parameters["host"]:"";
	string path_to_file =  parameters["path"]:"";

	if (device != "" && path_to_file != "")
	{
	    SCR::Execute(.target.mount, [sformat("/dev/%1", device) , "/mnt"], "-t auto");

	    if (SCR::Execute (.target.bash, "/bin/cp /mnt" +  path_to_file + " " + localfile) != 0)
	    {
		y2error("Control file can't be found");
	    }
	    else
	    {
		ok = true;
	    }
	    SCR::Execute(.target.umount, "/mnt");
	}

	return(ok);
    }



}
