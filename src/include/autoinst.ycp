/**
 * File:	include/autoinstall/autoinst.ycp
 * Package:	Auto-installation
 * Summary:	autoinstallation routines
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{

    define any lookup_value (list<map> section, string key,
            any default)
        ``{
            any ret = default;
            foreach (map m, section, ``{
                    if (m["key"]:"" == key)
                    ret =
                    m["value"]:default;
                    });
            return ret;
        }

    /**
     * Configure bootloader settings
     * @return boolean
     */
    /*
    define boolean bootloaderSettings()``{
	import "Bootloader";
	import "BootCommon";
        import "Profile";
        import "Kernel";
        import "Initrd";
        import "Arch";

	boolean ret = false;

	// Bootloader::manual_location = true;
	map ai = Profile::Flat["bootloader"]:$[];

	y2debug ("Importing settings %1", ai);
	if (ai == $[] )
	{
	    Bootloader::Propose ();
	    return true;
	}
	map <string, any> exp = $[
	    "loader_type" : ai["loader_type"]:"",
	    "location" : ai["location"]:"",
	    "loader_device" : ai["loader_device"]:"",
	    "specific" : $[],
	];
	// global PPC stuff
	if (ai["loader_type"]:"" == "ppc")
	{
	    foreach (string k, ["iseries_streamfile", "iseries_write_slot_a",
		"iseries_write_slot_b", "iseries_write_streamfile",
		"iseries_write_prepboot", "prep_boot_partition",
		"of_defaultdevice", "board_type", ],
	    {
		if (haskey (ai, k))
		{
		    exp["specific", k] = ai[k]:nil;
		}
	    });
	}


	string parameters = ai["kernel_parameters"]:"";
	if ( size(parameters) > 0)
	{
	    foreach ( string parameter, splitstring(parameters, " "),
		     ``{
		list param_value_list = splitstring (parameter, "=");
		if (size (param_value_list) > 0)
		{
		    Kernel::AddCmdLine (param_value_list[0]:"", param_value_list[1]:"");
		}
	    });
	}

	map current = Initrd::Export();
	y2milestone("Current initrd modules: %1", current);
	list modlist = current["list"]:[];
	map modsett = current["settings"]:$[];
        foreach(map mod, ai["initrd_modules"]:[], ``{
            modlist = add(modlist, mod["module"]:"");
            modsett = add(modsett, mod["module"]:"", mod["module_args"]:$[]);
        });
        if (size(modlist) > 0 )
            exp["initrd"] = $[ "list": modlist, "settings" : modsett ];

	// sections stuff
	exp["specific", "sections"] = maplist (list<map<string,any> > s,
	    ai["sections"]:[],
	``{
	    return s;
	});
	// global options stuff
	exp["specific", "global"] = ai["global"]:[];

	string default_key = BootCommon::getDefaultKey ();
	if (haskey (ai, "default"))
	{
	    any default_val = nil;
	    if (BootCommon::getDefaultType () == `index)
	    {
		integer index = BootCommon::getDefaultFirstIndex () -1;
		foreach (map s, ai["sections"]:[], ``{
		    index = index + 1;
		    if (s["title"]:"" == ai["default"]:"")
			default_val = index;
		});
	    }
	    else
	    {
		default_val = ai["default"]:"";
	    }
	    if (default_val != nil) // TODO check section existence
	    {
		exp["specific", "global"] = filter (
		    map m,
		    exp["specific", "global"]:[],
		``(
		    m["key"]:"" != default_key
		));
		exp["specific", "global"] = add (exp["specific", "global"]:[],
		    $[
			"key" : default_key,
			"value" : default_val,
		    ]
		);
	    }
	}
	ai["default"] = nil;
	any default_val
	    = lookup_value (exp["specific", "global"]:[], default_key, nil);
	string default = nil;
	if (default_val != nil)
	{
	    if (BootCommon::getDefaultType () == `index)
	    {
		default = (string)(ai["sections", (integer)default_val, "title"]:nil);
	    }
	    else
	    {
		default = (string) default_val;
	    }
	}
	if (default != nil)
	    ai["default"] = default;

	y2debug ("Bootloader: Importing settings");
	ret = Bootloader::Import(exp);
	y2debug ("Importing done, result %1", Bootloader::Export ());
	BootCommon::DetectDisks ();
	y2debug ("Proposing - fix");
	Bootloader::Propose ();
	y2debug ("Proposing done");

    }
    */

}
