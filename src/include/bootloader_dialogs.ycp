/**
 * File:	include/autoinstall/bootloader_dialogs.ycp
 * Package:	Autoinstallation Configuration System
 * Summary:	Bootloader
 * Authors:	Anas Nashif<nashif@suse.de>
 *
 * $Id$
 */
{
    textdomain "autoinst";
    
    /**
     * Configure Bootloader Options
     * @param void
     * @return symbol
     */

    define symbol Bootloader()
	``{		
	string boot_parameters = AIBootloader::Settings["kernel_parameters"]:"";
	string loc = AIBootloader::Settings["location"]:"";
       
	term buttons = `VBox(
			     `VStretch(),
			     `Left(
				   `RadioButton( `id( "none" ), `opt(`notify),
						 _("&Do not configure the bootloader (Done automatically)"), loc == "none")
				   ),
			     `Left(
				   `RadioButton( `id( "mbr" ), `opt(`notify),
						 _("&Write LILO to the boot disk ('&MBR')"), loc == "mbr")
				   )
			     );
    
	buttons = add ( buttons,
			`Left(
			      `RadioButton( `id( "floppy" ),`opt(`notify),
					    _("Create a boot &floppy"),
					    loc == "floppy")
			      )
			);

	buttons = add ( buttons,
			`Left(
			      `RadioButton( `id("boot"),`opt(`notify),
					    _("Do &not use LILO (a different boot manager is required)"), loc == "other")
			      )
			);

	string default_text = "";
	boolean custom = false;
	if (substring (loc, 0, 5) == "/dev/")
	{
	    default_text = loc;
	    custom = true;
	}

	buttons = add ( buttons,
			`VSquash(
				 `HBox(
				       `Left(
					     `Bottom(
						     `RadioButton( `id("custom"),`opt(`notify),
								   _("Write LILO to a  &partition:"), custom
								   )
						     )
					     ),
				       `HWeight(1,
						`Bottom(
							`TextEntry( `id(`custom_partition), "", default_text)
							)
						)
				       )
				 )
			);

    
	// Input field for boot parameters
    
	buttons = add ( buttons, `VStretch() );
	
	buttons = add ( buttons,
			`HBox(
			      `HSpacing(4),
			      `HWeight(75, `VCenter(
						    `VBox(
							  `Left(`TextEntry(
									   `id( `boot_params ),
									   _("&Kernel boot parameters:"),
									   boot_parameters
									   )
								),
							  `VSpacing(0.8),
							  `Left(`CheckBox(
									  `id( `linear ),
									  _("Use the '&linear' option"), AIBootloader::Settings["linear"]:false
									  )
								),
							  `VSpacing(0.8),
							  `Left(`CheckBox(
									  `id( `activate ),
									  _("Ac&tivate LILO partition"), AIBootloader["activate"]:false
									  )
								)
							  )
						    )
				       ),
			      `HWeight(25, `HStretch() )
			      )
			);
    
	buttons = add ( buttons, `VStretch() );

	// determine  location of lilo boot loader
	term contents = `VCenter(`HSquash(`RadioButtonGroup(`id(`options), buttons) ) );
			 
	Wizard::SetContents(_("Bootloader Configuration"),
			    contents, "", true, true);

	any ret = "";
	boolean has_error = false;
	repeat {
	    ret = UI::UserInput();
					
	    if (ret ==`next && !has_error)
	    {
		any option = UI::QueryWidget(`id(`options), `CurrentButton);
		if (option == nil)
		{
		   
		    // User MUST choose one of the options
		    UI::MessagePopup(_("You must choose one of the
options to continue.
"));
		    has_error = true;

		    UI::ChangeWidget(`id(`key), `CurrentItem, "bootloader");
		    continue;
       
		}
		else if (is(option,string))
		{
		    if (option == "mbr")
		    {
			AIBootloader::Settings["location"] =  option;
		    }
		    else if (option == "floppy")
		    {
			AIBootloader::Settings["location"] = option;
		    }
		    else if (option == "boot")
		    {
			AIBootloader::Settings["location"] = "other";
		    }
		    else if (option == "custom")
		    {
			option = UI::QueryWidget(`id(`custom_partition), `Value);
			if ((ret == `key)
			    && ((!is(option, string))
				|| (option == "")
				|| (substring (option, 0, 5) != "/dev/")))
			{
			    UI::MessagePopup(_("You did not enter a partition!"));
			    has_error = true;
			    UI::ChangeWidget(`id(`key), `CurrentItem, "bootloader");
			    continue;
			}
			if (is(option,string))
			{
			    AIBootloader::Settings["location"]= option;
			}     
		    }
		}
		has_error = false;
		option = UI::QueryWidget(`id(`boot_params), `Value);
		if (is (option, string))
		{
		    AIBootloader::Settings["kernel_parameters"]=option;
		}
		option = UI::QueryWidget(`id(`linear), `Value);
		if (is (option, boolean))
		{
		    AIBootloader::Settings["linear"] =option;
		}
		option = UI::QueryWidget(`id(`activate), `Value);
		if (is (option, boolean))
		{
		    AIBootloader::Settings["activate"] = option;
		}
	    }	  		
	} until (ret == `next || ret == `abort  || ret == `back);
	
	return ret;	
    }



}
