/**
 * File:   	conftree.ycp
 * Module: 	Autoinstall
 * Summary: 	This module handles the configuration for auto-installation
 * Authors: 	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{

    textdomain "autoinst";
    import "HTML";
    import "Call";

    include "readconfig.ycp";
    
    
    /**
     * Create a list to be used with the table widget
     * @param tree data
     * @return list
     */

    global define CreateTableList( list MenuTreeData)
    ``{
	list menu_options = maplist(`e, MenuTreeData,
	``{
	    if ((e["children"]:[]>0))
	    {
		list childrenlist = CreateTableList(lookup(e,"children",[]));
		return `item(`id(e["entry"]:""), e["title"]:"",false, childrenlist);
	    }
	    else
	    {
		return `item(`id(e["entry"]:""),e["title"]:"", false);
	    }
	});
	return menu_options;
    }



    
    global define content_dialog(map mod, any settings) ``{
	string summary =  Call::Function(module_auto, ["Summary", settings]);
	string caption = d["Name"]:"Configurtion";
	string buttonLabel = d["Helptext"]:"Configure";
	term contents =
	    `VBox(		
		  `RichText( `id(`summary), summary),		  
		  `HBox(
			// push button label
			`PushButton(`id(`configure), _("Configur&e") ),
			`HStretch(),
			// push button label
			`PushButton(`id(`reset), _("Reset Confi&guration"))
			)
		  );
	// caption of lan auto configuration
	Wizard::SetContents(
			    Translate(caption),
			    contents, "", true, true);
    }



    /**
     * Module configuration dialog
     *
     */
    global define module_contents(map d, any settings ) ``{

	any original_settings = settings;
	
	string module_auto = d["AutoClient"]:"none";	
	content_dialog( d , settings);
	any ret= nil;

	
	repeat {
	    ret = UI::UserInput();
	    
	    if( ret == `configure )
	    {
		any seq = Call::Function(module_auto, ["Change", settings]);
		
		if (seq == `accept || seq == `next || seq == `finish)
		{
		    settings = Call::Function(module_auto, ["Result", settings]);
		}
		y2milestone("New Settings: %1", settings);
		content_dialog(d,settings);
	    }
	    else if( ret == `reset)
	    {		
		settings = Call::Function(module_auto, ["Reset", settings]);		
		content_dialog( d , settings );
	    }
	     
	    if ( settings != original_settings )
	    {				
		Profile::changed = true;
	    }  
	    Profile::Flat[resource] =  settings;
	    
	} until (ret == `back ||  ret == `abort ||  ret == `next || ret ==`key || contains(menuitems, ret) );		
	
	return ret;
    }


    global define void CreateTreeWidget() ``{

	list menu_options = CreateTableList(AIConfig::MenuTreeData);
	Wizard::ReplaceButtonBox(`VSpacing(0.6));
	UI::ReplaceWidget(`id(`helpSpace) ,
			  `VBox(			
				`Tree(
				      `id(`key),
				       `opt(`notify,`vstretch),
				       "Untitled",
				       menu_options
				       ),
				`VSpacing(1))
			  );
	
	UI::ChangeWidget(`id(`key), `Label, sformat(_("Fi&le: %1"), AIConfig::currentFile));
	return; 
    }
    
    /**
     * Menu interface
     */
    global define symbol ConfTree()
	``{
	Wizard::SetScreenShotName ("autoyast-conftree");
	include "autoinstall/io.ycp";
	include "autoinstall/help.ycp";	

	term menu =
	    `VBox(
		  `Left(
			`HBox(		
			      `MenuButton( _("&File"),
					   [
					    `item(`id(`menu_new), _("&New")      ),
					    `item(`id(`menu_open), _("&Open")      ),
					    `item(`id(`menu_save), _("&Save")      ),
					    `item(`id(`menu_saveas), _("Save &As")      ),
					    `menu( _("Im&port") ,
						   [
						    `item(`id(`menu_alice), _("Import A&lice data")),
						    `item(`id(`menu_kickstart), _("Import &Kickstart file"))
						    ]
						   ),
					    `menu( _("&Preferences"),
						   [
						    `item(`id(`menu_general), _("General")),
						    `item(`id(`menu_reps), _("Reposi&tories")),
						    
						    ]),
					    `item(`id(`menu_exit), _("E&xit")      )
					    ]
					   ),
			      `MenuButton( _("&View"),
					   [
					    `item(`id(`menu_tree), _("Configu&ration Tree")      ),
					    `item(`id(`menu_source), _("So&urce")      )
					    ]
					   ),
			      `MenuButton( _("&Tools"),
					   [
					    `item(`id(`menu_iso), _("&Create ISO image")      ),
					    `item(`id(`menu_clone), _("Clone t&his system")      )
					    ]
					   )			      		
			      )
			),
		  `VSpacing(1)
		  );
	
	
	UI::ReplaceWidget(`id(`image) , menu);	
	CreateTreeWidget();


	
	string tree_item = "System";
	any ret = `key;
	any func_ret = "";

	repeat {
	    if (size(AIConfig::GroupMap) == 0)
	    {
		UI::ErrorPopup(_("Error while reading configuration data"));
		ret = `next;
		break;
	    }
	    if (haskey(AIConfig::GroupMap, tree_item))
	    {
		string html = "";
		foreach(`k,`v, AIConfig::ModuleMap, ``{
		    if (v["Group"]:"" == tree_item)
		    {								
			string colored = HTML::Colorize( HTML::Link(ReadKey(v["Textdomain"]:"", "Name", v), k), "#8BC460");
			html = html + HTML::Heading(colored);
			html = html + HTML::Para(ReadKey(v["Textdomain"]:"", "Helptext", v));
		    }
		});

		if (html == "")
		{
		    html = HTML::Heading(_("No modules available in this group."));
		}
		term contents = `RichText(html);

		if (ret != `menu_source)
		{
		    Wizard::SetContents(_("Available modules"),
					contents, "", true , true);
		}

		while ( true )
		{
		    ret = Wizard::UserInput();
		    y2milestone("INPUT: %1", ret);
		    
		    if (ret == `key)
		    {
			tree_item = UI::QueryWidget(`id(`key), `CurrentItem);
			break;
		    }
		    else if (ret == `next || ret == `back || ret == `abort)
		    {
			break;
		    }
		    else if (contains(menuitems, ret) )
		    {			
			break;
		    }
		    else
		    {
			tree_item = ret;
			break;
		    }

		}

	    }
	 
	    foreach(`p,`d, AIConfig::ModuleMap, ``{
		
		if (tree_item == p)
		{
		    // Set resource name, if not using default value
		    string resource = AIConfig::getResource(p);		    
		  		    		    
		    string data_type = d["AutoinstDataType"]:"map";
		    if ( data_type == "map")
			ret = module_contents(d, Profile::Flat[resource]:$[]);
		    else
			ret = module_contents(d, Profile::Flat[resource]:[]);		   		    		    
		}
	    });

	    if (ret == `key)
	    {
		tree_item = UI::QueryWidget(`id(`key), `CurrentItem);
		if (tree_item == nil)
		{
		    tree_item = "System";
		}
	    }
	    else if (ret  == nil)
	    {
		UI::ErrorPopup(_("Error while reading configuration data"));
		ret = `back;		
	    }
	    else if ( contains(menuitems,ret) )
	    {
		y2milestone("MENU: %1", ret);
		boolean exit_after = false;
		if (ret == `menu_reps)
		{
		    Wizard::RestoreHelp("");
		    Wizard::ReplaceButtonBox(Wizard::CancelAcceptButtonBox());
		    ret = Preferences();
		    CreateTreeWidget();
		}	
		else if ( ret == `menu_alice)
		{
		    y2milestone("Importing ALICE data");
		    Wizard::RestoreHelp("");
		    Wizard::ReplaceButtonBox(Wizard::CancelAcceptButtonBox());
		    ret = aliceImportList();
		    CreateTreeWidget();		    
		}
		else if ( ret == `menu_clone)
		{
		    Wizard::RestoreHelp("");
		    Wizard::ReplaceButtonBox(Wizard::CancelAcceptButtonBox());
		    ret = cloneSystem();		    
		    CreateTreeWidget();		    
		}
		else if ( ret == `menu_iso)
		{
		    import "ISO";
		    Wizard::RestoreHelp("");
		    Wizard::ReplaceButtonBox(Wizard::CancelAcceptButtonBox());
		    
		    ret = isoSequence();

		    
		    CreateTreeWidget();		    
		}		
		else if (ret == `menu_exit) // EXIT
		{
		    if (Profile::changed)
		    {
			string current = "";
			if (AIConfig::currentFile == "")
			    current = "Untitled";
			else
			    current = AIConfig::currentFile;
			
			symbol answer = UI::AnyQuestionPopup3(_("Control file changed."),
							      sformat(_("Do you want to save the changes to %1?"), current),
							      UI::YesButtonLabel(),
							      UI::NoButtonLabel(),
							      UI::CancelButtonLabel(),
							      `focus_yes
							      );
			if (answer == `no)
			{	
			    ret = `exit;
			}
			else if (answer == `yes)
			{
			    ret = `menu_save;
			    exit_after = true;
			}
			else
			{
			    continue;
			}			
		    }
		    else
		    {
			ret = `exit;
		    }
		}



		
		
		if (ret == `menu_open) // OPEN
		{
		    string filename = UI::AskForExistingFile( AIConfig::Repository, "*", _("Open file") );
		    if (filename!=nil)
		    {			
			y2milestone("file: %1", filename);
			AIConfig::currentFile = filename;
			list pathComponents = splitstring(  filename, "/");
			string base = select(pathComponents, size(pathComponents) -1, "default");
			UI::ChangeWidget(`id(`key), `Label, sformat(_("Fi&le: %1"), base));
			Profile::Read(filename);
			
		    }
		}
		else if (ret == `menu_kickstart)
		{
		    string filename = UI::AskForExistingFile( AIConfig::Repository, "*", _("Import Kickstart file") );
		    if (filename!=nil) {
			map ksConfig = readKS(filename);
			Profile::Import(ks2ay(ksConfig));
		    }
		}
		else if (ret == `menu_save) // SAVE
		{
		    if (AIConfig::currentFile == "")
		    {
			string filename = UI::AskForSaveFileName( AIConfig::Repository, "*", "Save file" );
			if (filename != nil)
			{
			    AIConfig::currentFile = filename;
			  
			}
			else
			{
			    continue;
			}
		    }
		    
		    if ( Profile::Save( AIConfig::currentFile ))
		    {
			UI::MessagePopup(sformat(_("File %1 was saved successfully."), AIConfig::currentFile));
			Profile::changed = false;
			if (exit_after)
			    ret = `next;
		    }
		    else
		    {
			UI::WarningPopup(_("An error occured while saving the file."));
		    }
		    
		}
		else if (ret == `menu_saveas) // SAVE AS
		{
		    string filename = UI::AskForSaveFileName( AIConfig::Repository, "*", "Save as..." );
		    if (filename!=nil) {
			AIConfig::currentFile = filename;
			if ( Profile::Save( AIConfig::currentFile ))
			{
			    UI::MessagePopup(sformat(_("File %1 was saved successfully."), AIConfig::currentFile));
			    Profile::changed=false;
			    list pathComponents = splitstring(  filename, "/");
			    string base = select(pathComponents, size(pathComponents) -1, "default");
			    UI::ChangeWidget(`id(`key), `Label, sformat(_("Fi&le: %1"), base));
			}
			else
			{
			    UI::WarningPopup(_("An error occured while saving the file."));
			}
		    }
		}
		else if (ret == `menu_source) // Show SOURCE
		{
		    y2milestone("Showing source...");
		    Profile::Prepare();
		    string source = XML::YCPToXMLString(`profile, Profile::current);
		    UI::ReplaceWidget(`id(`rep_button_box), `VSpacing(0.6));

		   
		    term sourceView =
			`RichText( `id(`class_source ),
				   `opt(`plainText),
				   source
				   );
		    Wizard::SetContents(_("Source"),
					sourceView , "", true , true);
		    tree_item = "System"; 		    		    
		}
		else if ( ret == `menu_tree) {
		    tree_item = UI::QueryWidget(`id(`key), `CurrentItem);
		}
		else if (ret == `menu_new) // NEW
		{
		    Profile::Reset();
		    AIConfig::currentFile = "";
		    UI::ChangeWidget(`id(`key), `Label, sformat(_("Fi&le: %1"), "Untitled"));
		    	
		}		
		
	    }

	} until ( ret == `exit );

	Wizard::RestoreHelp("");
	Wizard::RestoreScreenShotName ();
	return ret;
    
    }
}
