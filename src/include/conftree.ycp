/**
 * File:		conftree.ycp
 * Module:		Autoinstall
 * Summary:		This module handles the configuration for auto-installation
 * Authors:		Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{

    textdomain "autoinst";
    import "HTML";
    import "XML";
    import "Call";
    import "Label";
    import "Report";


    any SaveAs() {
        any filename = UI::AskForSaveFileName(AutoinstConfig::Repository,  "*", _("Save as..."));
        if ( filename != nil && (string)filename!="")
        {
            AutoinstConfig::currentFile = (string)filename;
            if ( Profile::Save( AutoinstConfig::currentFile ))
            {
                Popup::Message(sformat(_("File %1 was saved successfully."), AutoinstConfig::currentFile));
                Profile::changed=false;
                list pathComponents = splitstring(  (string)filename, "/");
                string base = (string) select(pathComponents, size(pathComponents) -1, "default");
                UI::ChangeWidget(`id(`key), `Label, sformat(_("Fi&le: %1"), base));
            }
            else
            {
                Popup::Warning(_("An error occured while saving the file."));
            }
        }
        return `next;
    }



    /**
     * Create a list to be used with the table widget
     * @param tree data
     * @return list
     */
    define list<term> CreateTreeList( list<map> MenuTreeData, string current)
	``{
	list<term> tree_items = maplist(map e, MenuTreeData, ``{

	    if (size(e["children"]:[]) > 0 )
	    {
		string title=   e["title"]:"" ;
		string entry = "group@" + e["entry"]:"";
		list childrenlist = CreateTreeList(e["children"]:[], current);
		return `item(`id(entry), title, ( entry  == current ) , childrenlist);
	    }
	    else
	    {
		string title=   e["title"]:"" ;
		string entry =  "module@" + e["entry"]:"";
		return `item(`id(entry), title ,( entry == current ));
	    }
	});
	return tree_items;
    }


    /**
     * Module Summary dialog
     * @return void
     */
    define void content_dialog( string resource, map resourceMap, string module_auto) ``{

	string summary =  (string)Call::Function(module_auto, ["Summary", Y2ModuleConfig::getResourceData(resourceMap , resource)]);
	string caption = resourceMap["Name"]:"";
	string buttonLabel = resourceMap["GenericName"]:"Configure";
	term contents =
	    `VBox(
		  `RichText( `id(`summary), summary),
		  `HBox(
			// push button label
			`PushButton(`id(`reset), _("Reset Confi&guration")),
			`HStretch(),
			// push button label
			`PushButton(`id(`configure), _("Configur&e") )
			)
		  );
	// caption of lan auto configuration
	Wizard::SetContents(
			    caption,
			    contents, "", true, true);
	return;
    }


    any resetModule(string resource)
    {
        resource = Y2ModuleConfig::getResource(resource);
        map resourceMap = Y2ModuleConfig::ModuleMap[resource]:$[];
	string module_auto = resourceMap["X-SuSE-YaST-AutoInstClient"]:"none";

        string tomerge = resourceMap["X-SuSE-YaST-AutoInstMerge"]:"";
        string tomergetypes = resourceMap["X-SuSE-YaST-AutoInstMergeTypes"]:"";
        list MergeTypes = splitstring(tomergetypes, ",");
        if (size(tomerge) > 0 )
        {
            any result = Call::Function(module_auto, ["Export",  Y2ModuleConfig::getResourceData(resourceMap , resource) ]);
            integer i = 0;
            foreach( string res, splitstring(tomerge, ",") , ``{
                    if ( MergeTypes[i]:"map" == "map")
                    Profile::Flat[res] = $[];
                    else
                    Profile::Flat[res] = [];
                    i = i + 1;
                    });
        }
        else
        {
            Profile::Flat[resource]  =  Call::Function(module_auto, ["Export",  Y2ModuleConfig::getResourceData(resourceMap , resource) ]);
        }

        Profile::Flat[resource]  = Call::Function(module_auto, ["Reset",  Y2ModuleConfig::getResourceData(resourceMap , resource) ]);
        return `next;
    }

    /**
      * Configure module
      */
    any configureModule(string resource)
    {
        resource = Y2ModuleConfig::getResource(resource);
        map resourceMap = Y2ModuleConfig::ModuleMap[resource]:$[];
	string module_auto = resourceMap["X-SuSE-YaST-AutoInstClient"]:"none";
	any original_settings = Y2ModuleConfig::getResourceData(resourceMap , resource);
        any seq = Call::Function(module_auto, ["Change", Y2ModuleConfig::getResourceData(resourceMap ,resource)]);

        y2debug("Change response: %1", seq);
        if (seq == `accept || seq == `next || seq == `finish)
        {
            string tomerge = resourceMap["X-SuSE-YaST-AutoInstMerge"]:"";
            string tomergetypes = resourceMap["X-SuSE-YaST-AutoInstMergeTypes"]:"";
            list MergeTypes = splitstring(tomergetypes, ",");
            any result = Call::Function(module_auto, ["Export",  Y2ModuleConfig::getResourceData(resourceMap , resource) ]);
            if (size(tomerge) > 0 )
            {
                integer i = 0;
                foreach( string res, (list<string>)splitstring(tomerge, ",") , ``{
                        if ( MergeTypes[i]:"map" == "map")
                        {
                        Profile::Flat[res] = lookup( (map) result, "res", $[]);
                        }
                        else
                        {
                        Profile::Flat[res] = lookup( (map) result, res, [] );
                        }
                        i = i + 1;
                        });
            }
            else
            {
                Profile::Flat[resource]  =  result;
            }
        }
        if ( original_settings != Y2ModuleConfig::getResourceData(resourceMap , resource) )
        {
            Profile::changed = true;
        }
        return (seq);
    }


    /**
     * Module
     * @param string resource
     * @param map resource map
     * @param list menu items
     * Module configuration dialog
     * @return symbol
     */
    define symbol module_contents(string resource) ``{

        resource = Y2ModuleConfig::getResource(resource);
        map resourceMap = Y2ModuleConfig::ModuleMap[resource]:$[];

	any original_settings = Y2ModuleConfig::getResourceData(resourceMap , resource);

	string module_auto = resourceMap["X-SuSE-YaST-AutoInstClient"]:"none";

	// Import Data
	Call::Function(module_auto, ["Import", Y2ModuleConfig::getResourceData(resourceMap ,resource)]);
        // Show Summary
	content_dialog( resource , resourceMap, module_auto);

        any ret = `next;
        /*
	any ret= nil;

	repeat {
	    ret = UI::UserInput();

	    if( ret == `configure )
	    {
		y2milestone("New Settings: %1", Profile::Flat);
		content_dialog( resource , resourceMap, module_auto);
	    }
	    else if( ret == `reset)
	    {
		string tomerge = resourceMap["X-SuSE-YaST-AutoInstMerge"]:"";
		string tomergetypes = resourceMap["X-SuSE-YaST-AutoInstMergeTypes"]:"";
		list MergeTypes = splitstring(tomergetypes, ",");
		if (size(tomerge) > 0 )
		{
		    any result = Call::Function(module_auto, ["Export",  Y2ModuleConfig::getResourceData(resourceMap , resource) ]);
		    integer i = 0;
		    foreach( string res, splitstring(tomerge, ",") , ``{
			if ( MergeTypes[i]:"map" == "map")
			    Profile::Flat[res] = $[];
			else
			    Profile::Flat[res] = [];
			i = i + 1;
		    });
		}
		else
		{
		    Profile::Flat[resource]  =  Call::Function(module_auto, ["Export",  Y2ModuleConfig::getResourceData(resourceMap , resource) ]);
		}

		Profile::Flat[resource]  = Call::Function(module_auto, ["Reset",  Y2ModuleConfig::getResourceData(resourceMap , resource) ]);
		content_dialog(resource,  resourceMap, module_auto);
	    }

	    if ( original_settings != Y2ModuleConfig::getResourceData(resourceMap , resource) )
	    {
		Profile::changed = true;
	    }
	} until (ret == `back ||  ret == `abort || ret == `cancel || ret == `next || ret ==`key || contains(menuitems, ret) );

        */
	return (symbol)ret;
    }



    /**
     * Create tree widget
     * @param string
     * @return void
     */
    define void CreateTreeWidget(string current ) ``{

	list menu_options = CreateTreeList(Y2ModuleConfig::MenuTreeData, current);
	// y2milestone("menu options: %1", menu_options);
	Wizard::ReplaceButtonBox(`VSpacing(0.6));
	UI::ReplaceWidget(`id(`helpSpace) ,
			  `VBox(
				`Tree(
				      `id(`tree),
				      `opt(`notify,`vstretch),
				      _("Untitled"),
				      menu_options
				      ),
				`VSpacing(1))
			  );

	UI::ChangeWidget(`id(`tree), `Label, sformat(_("Fi&le: %1"), AutoinstConfig::currentFile));
	return;
    }



    /**
     * @return menu term
     */
    define term menuTerm () {
	term image = Wizard::HeaderImage(false);
	term topmenu =
	    `VBox(
		  image,
		  `VSpacing(0.5),
		  `Left(
			`HBox(
			      `MenuButton( _("&File"),
					   [
					    `item(`id(`menu_new), _("&New")      ),
					    `item(`id(`menu_open), _("&Open")      ),
					    `item(`id(`menu_save), _("&Save")      ),
					    `item(`id(`menu_saveas), _("Save &As")      ),
					    `menu( _("Im&port") ,
						   [
						    `item(`id(`menu_alice), _("Import A&lice Data")),
						    `item(`id(`menu_kickstart), _("Import &Kickstart File"))
						    ]
						   ),
					    `menu( _("&Preferences"),
						   [
						    `item(`id(`menu_reps), _("Reposi&tories"))

						    ]),
					    `item(`id(`menu_exit), _("E&xit")      )
					    ]
					   ),
			      `MenuButton( _("&View"),
					   [
					    `item(`id(`menu_tree), _("Configu&ration Tree")      ),
					    `item(`id(`menu_source), _("So&urce")      )
					    ]
					   ),
			      `MenuButton( _("&Classes"),
					   [
					    // `item(`id(`menu_rules), _("R&ules")      ),
					    `item(`id(`menu_classes), _("Cla&sses")      ),
					    `item(`id(`menu_merge), _("Me&rge Classes")      ),
					    ]
					   ),
			      `MenuButton( _("&Tools"),
					   [
					    `item(`id(`menu_clone), _("Create Reference Pro&file")      )
					    ]
					   )
			      )
			),
		  `VSpacing(0.5)
		  );
                  return topmenu;
    }

    /**
     * Get Group name
     */
    string groupName (string tree_item) {
        list<string> tok = splitstring(tree_item, "@");
        string type = tok[0]:"";
        if (type == "group")
            return tok[1]:"";
        else
            return "";
    }

    /**
     * Get module name
     */
    string moduleName (string tree_item) {
        list<string> tok = splitstring(tree_item, "@");
        string type = tok[0]:"";
        if (type == "module")
            return tok[1]:"";
        else
            return "";
    }

    /**
     * Return HTML list of available modules
     * @param string
     * @return term richtext window with modules listed and linked.
     */
    term modules (string tree_item) {
        string html = "";
        foreach(string k , map v, Y2ModuleConfig::ModuleMap, ``{
                if (v["X-SuSE-YaST-Group"]:"" == tree_item)
                {
                string colored = HTML::Colorize( HTML::Link(v["Name"]:"", "module@"  + k), "#8BC460");
                html = html + HTML::Heading(colored);
                html = html + HTML::Para(v["GenericName"]:"");
                }
                });

        if (html == "")
        {
            html = HTML::Heading(_("No modules available in this group."));
        }
        term contents = `RichText(html);
        return contents;
    }

    /**
     * Menu interface
     * @param list menu items
     * @return symbol
     */
    any MainDialog()
	``{
        term topmenu = menuTerm ();
	UI::ReplaceWidget(`id(`image) , topmenu);

	// Default tree item
	string tree_item = "System";
	CreateTreeWidget( tree_item);
        term contents = modules(tree_item);
        Wizard::SetContents(_("Available modules"),
                   contents, "", true , true);
	UI::ChangeWidget(`id(`tree), `CurrentItem, tree_item);

	any ret = `tree;
	any func_ret = "";

        while(true)
        {

            ret =  UI::UserInput();
            y2debug("INPUT: %1", ret);

            if (ret == `menu_tree || ret == `tree || is(ret, string) && ( issubstring((string)ret,"module@") || issubstring((string)ret,"group@") ) )
            {
                if (ret == `tree || ret == `menu_tree)
                {
                    tree_item = (string ) UI::QueryWidget(`id(`tree), `CurrentItem);
                    if (tree_item == nil )
                        continue;
                }
                else
                {
                    tree_item = (string)ret;
	            UI::ChangeWidget(`id(`tree), `CurrentItem, tree_item);
                }
                y2debug("tree_item: %1", tree_item );
                string group=groupName(tree_item);
                string modulename=moduleName(tree_item);
                contents = `Empty();
                if (group!="")
                {
                    contents = modules(group);
                    Wizard::SetContents(_("Available modules"),
                        contents, "", true , true);
                }
                else if (modulename!="")
                {
                    module_contents(modulename);
                }
            }
            else if (ret == `configure)
            {
                tree_item = (string ) UI::QueryWidget(`id(`tree), `CurrentItem);
                string modulename=moduleName(tree_item);
                y2debug("configure module");
                if (modulename!="")
                {
                    any configret = configureModule(modulename);
                    y2debug("configureModule ret : %1", configret);
                    module_contents(modulename);
                }
            }
            else if (ret == `reset)
            {
                y2debug("reset");
                tree_item = (string ) UI::QueryWidget(`id(`tree), `CurrentItem);
                string modulename=moduleName(tree_item);
                y2debug("configure module");
                if (modulename!="")
                {
                    any configret = resetModule(modulename);
                    y2debug("configureModule ret : %1", configret);
                    module_contents(modulename);
                }
            }
            else if (ret == `menu_open) // OPEN
            {
                any filename = UI::AskForExistingFile( AutoinstConfig::Repository, "*.*", _("Select a file to load."));
                if (filename != "" && filename != nil)
                {
                    AutoinstConfig::currentFile = (string)filename;

                    list pathComponents = splitstring(  (string)filename, "/");

                    string base = (string) select(pathComponents, size(pathComponents) -1, "default");
                    UI::ChangeWidget(`id(`key), `Label, sformat(_("Fi&le: %1"), base));

                    Profile::ReadXML((string)filename);
                }
            }
            else if (ret == `menu_source) // Show SOURCE
            {
                Profile::Prepare();
                string source = XML::YCPToXMLString(`profile, Profile::current);
                UI::ReplaceWidget(`id(`rep_button_box), `VSpacing(0.6));

                term sourceView =
                    `RichText( `id(`class_source ),
                            `opt(`plainText),
                            source
                            );

                Wizard::SetContents(_("Source"),
                        sourceView , "", true , true);
                tree_item = "System";

            }
            else if (ret == `menu_save) // SAVE
            {
                if (AutoinstConfig::currentFile == "")
                {
                    any filename = UI::AskForSaveFileName(AutoinstConfig::Repository,  "*", _("Save as..."));
                    if (filename !=  nil )
                    {
                        AutoinstConfig::currentFile = (string)filename;
                    }
                    else
                    {
                        continue;
                    }
                }

                if ( Profile::Save( AutoinstConfig::currentFile ))
                {
                    Popup::Message(sformat(_("File %1 was saved successfully."), AutoinstConfig::currentFile));
                    Profile::changed = false;
                }
                else
                {
                    Popup::Warning(_("An error occured while saving the file."));
                }
            }
            else if (ret == `menu_saveas) // SAVE AS
            {
                SaveAs();
            }
            else if (ret == `menu_new) // NEW
            {
                Profile::Reset();
                AutoinstConfig::currentFile = "";
                UI::ChangeWidget(`id(`key), `Label, sformat(_("Fi&le: %1"), "Untitled"));
            }
            else if (ret == `menu_exit) // EXIT
            {
                if (Profile::changed)
                {
                    string current = "";
                    if (AutoinstConfig::currentFile == "")
                    {
                        current = "Untitled";
                    }
                    else
                    {
                        current = AutoinstConfig::currentFile;
                    }

                    symbol answer = Popup::AnyQuestion3(_("Control file changed."),
                            sformat(_("Save the changes to %1?"), current),
                            Label::YesButton(),
                            Label::NoButton(),
                            Label::CancelButton(),
                            `focus_yes
                            );
                    if (answer == `no)
                    {
                        break;
                    }
                    else if (answer == `yes)
                    {
                        SaveAs();
                        break;
                    }
                    else
                    {
                        continue;
                    }
                }
                else
                {
                    break;
                }
            }
            else
            {
                break;
            }
        }
        /*




		    else if (ret == `menu_source) // Show SOURCE
		    {
			y2milestone("Showing source...: %1", Profile::current);
			Profile::Prepare();
			string source = XML::YCPToXMLString(`profile, Profile::current);
			UI::ReplaceWidget(`id(`rep_button_box), `VSpacing(0.6));

			term sourceView =
			    `RichText( `id(`class_source ),
				       `opt(`plainText),
				       source
				       );

			Wizard::SetContents(_("Source"),
					    sourceView , "", true , true);
			tree_item = "System";

		    }
		    else if ( ret == `menu_tree)
		    {
			tree_item = (string) UI::QueryWidget(`id(`key), `CurrentItem);
			if (tree_item == nil)
			{
			    tree_item = "System";
			}
		    }
		    else if (ret == `menu_new) // NEW
		    {
			Profile::Reset();
			AutoinstConfig::currentFile = "";
			UI::ChangeWidget(`id(`key), `Label, sformat(_("Fi&le: %1"), "Untitled"));
		    }
		}
	    } until ( ret == `exit || ret == `cancel || ret == `back );

        */
	return (symbol)ret;

    }
}
