/**
 * File:		conftree.ycp
 * Module:		Autoinstall
 * Summary:		This module handles the configuration for auto-installation
 * Authors:		Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{

    textdomain "autoinst";
    import "HTML";
    import "XML";
    import "Alice";
    import "Call";
    import "Label";
    import "Installation";
    import "Report";
    import "Kickstart";

    include "autoinstall/io.ycp";
    include "autoinstall/classes.ycp";


    /**
     * Create a list to be used with the table widget
     * @param tree data
     * @return list
     */
    define list CreateTableList( list MenuTreeData, string current)
	``{
	list menu_options = maplist(map e, MenuTreeData, ``{

	    if (size(e["children"]:[]) > 0 )
	    {
		string title=   e["title"]:"" ;
		string entry = e["entry"]:"";
		list childrenlist = CreateTableList(e["children"]:[], current);
		return `item(`id(entry), title, ( entry  == current ) , childrenlist);
	    }
	    else
	    {
		string title=   e["title"]:"" ;
		string entry = e["entry"]:"";
		return `item(`id(entry), title ,( entry == current ));
	    }
	});
	return menu_options;
    }


    /**
     * content_dialog()
     * @return void
     */
    define void content_dialog( string resource, map resourceMap, string module_auto ) ``{

	string summary =  (string)Call::Function(module_auto, ["Summary", Y2ModuleConfig::getResourceData(resourceMap , resource)]);
	string caption = resourceMap["Name"]:"";
	string buttonLabel = resourceMap["GenericName"]:"Configure";
	term contents =
	    `VBox(
		  `RichText( `id(`summary), summary),
		  `HBox(
			// push button label
			`PushButton(`id(`reset), _("Reset Confi&guration")),
			`HStretch(),
			// push button label
			`PushButton(`id(`configure), _("Configur&e") )
			)
		  );
	// caption of lan auto configuration
	Wizard::SetContents(
			    caption,
			    contents, "", true, true);
	return;
    }



    /**
     * module_contents()
     * @param string resource
     * @param map resource map
     * @param list menu items
     * Module configuration dialog
     * @return symbol
     */
    define symbol module_contents(string resource, map resourceMap , list menuitems) ``{
	// y2milestone("FLAT a: %1", Profile::Flat);

	any original_settings = Y2ModuleConfig::getResourceData(resourceMap , resource);

	string module_auto = resourceMap["X-SuSE-YaST-AutoInstClient"]:"none";

	// Import Data
	Call::Function(module_auto, ["Import", Y2ModuleConfig::getResourceData(resourceMap ,resource)]);
	content_dialog( resource , resourceMap, module_auto);

	any ret= nil;

	repeat {
	    ret = UI::UserInput();

	    if( ret == `configure )
	    {
		any seq = Call::Function(module_auto, ["Change", Y2ModuleConfig::getResourceData(resourceMap ,resource)]);

		y2debug("Change response: %1", seq);

		if (seq == `accept || seq == `next || seq == `finish)
		{
		    string tomerge = resourceMap["X-SuSE-YaST-AutoInstMerge"]:"";
		    string tomergetypes = resourceMap["X-SuSE-YaST-AutoInstMergeTypes"]:"";
		    list MergeTypes = splitstring(tomergetypes, ",");
		    if (size(tomerge) > 0 )
		    {
			any result = Call::Function(module_auto, ["Export",  Y2ModuleConfig::getResourceData(resourceMap , resource) ]);
			integer i = 0;
			foreach( string res, (list)splitstring(tomerge, ",") , ``{
			    if ( MergeTypes[i]:"map" == "map")
			    {
				Profile::Flat[res] = lookup( (map) result, "res", $[]);
			    }
			    else
			    {
				Profile::Flat[res] = lookup( (map) result, res, [] );
			    }
			    i = i + 1;
			});
		    }
		    else
		    {
			Profile::Flat[resource]  =  Call::Function(module_auto, ["Export",  Y2ModuleConfig::getResourceData(resourceMap , resource) ]);
		    }
		}

		y2milestone("New Settings: %1", Profile::Flat);
		content_dialog( resource , resourceMap, module_auto);
	    }
	    else if( ret == `reset)
	    {
		string tomerge = resourceMap["X-SuSE-YaST-AutoInstMerge"]:"";
		string tomergetypes = resourceMap["X-SuSE-YaST-AutoInstMergeTypes"]:"";
		list MergeTypes = splitstring(tomergetypes, ",");
		if (size(tomerge) > 0 )
		{
		    any result = Call::Function(module_auto, ["Export",  Y2ModuleConfig::getResourceData(resourceMap , resource) ]);
		    integer i = 0;
		    foreach( string res, splitstring(tomerge, ",") , ``{
			if ( MergeTypes[i]:"map" == "map")
			    Profile::Flat[res] = $[];
			else
			    Profile::Flat[res] = [];
			i = i + 1;
		    });
		}
		else
		{
		    Profile::Flat[resource]  =  Call::Function(module_auto, ["Export",  Y2ModuleConfig::getResourceData(resourceMap , resource) ]);
		}

		Profile::Flat[resource]  = Call::Function(module_auto, ["Reset",  Y2ModuleConfig::getResourceData(resourceMap , resource) ]);
		content_dialog(resource,  resourceMap, module_auto);
	    }

	    if ( original_settings != Y2ModuleConfig::getResourceData(resourceMap , resource) )
	    {
		Profile::changed = true;
	    }
	} until (ret == `back ||  ret == `abort || ret == `cancel || ret == `next || ret ==`key || contains(menuitems, ret) );

	return (symbol)ret;
    }



    /**
     * CreateTreeWidget()
     * Create tree widget
     * @return void
     */
    define void CreateTreeWidget(string current ) ``{

	list menu_options = CreateTableList(Y2ModuleConfig::MenuTreeData, current);
	// y2milestone("menu options: %1", menu_options);
	
	Wizard::ReplaceButtonBox(`VSpacing(0.6));
	
	UI::ReplaceWidget(`id(`helpSpace) ,
			  `VBox(
				`Tree(
				      `id(`key),
				      `opt(`notify,`vstretch),
				      _("Untitled"),
				      menu_options
				      ),
				`VSpacing(1))
			  );

	UI::ChangeWidget(`id(`key), `Label, sformat(_("Fi&le: %1"), AutoinstConfig::currentFile));
	return;
    }

    /**
     * Menu interface
     */
    define symbol ConfTree(list menuitems)
	``{
	Wizard::SetScreenShotName ("autoyast-conftree");
	y2milestone("dd: %1", menuitems);

	term image = Wizard::HeaderImage(false);

	term menu =
	    `VBox(
		  image,
		  `VSpacing(0.5),
		  `Left(
			`HBox(
			      `MenuButton( _("&File"),
					   [
					    `item(`id(`menu_new), _("&New")      ),
					    `item(`id(`menu_open), _("&Open")      ),
					    `item(`id(`menu_save), _("&Save")      ),
					    `item(`id(`menu_saveas), _("Save &As")      ),
					    `menu( _("Im&port") ,
						   [
						    `item(`id(`menu_alice), _("Import A&lice Data")),
						    `item(`id(`menu_kickstart), _("Import &Kickstart File"))
						    ]
						   ),
					    `menu( _("&Preferences"),
						   [
						    //    `item(`id(`menu_general), _("General")),
						    `item(`id(`menu_reps), _("Reposi&tories"))

						    ]),
					    `item(`id(`menu_exit), _("E&xit")      )
					    ]
					   ),
			      `MenuButton( _("&View"),
					   [
					    `item(`id(`menu_tree), _("Configu&ration Tree")      ),
					    `item(`id(`menu_source), _("So&urce")      )
					    ]
					   ),
			      `MenuButton( _("&Classes"),
					   [
					    // `item(`id(`menu_rules), _("R&ules")      ),
					    `item(`id(`menu_classes), _("Cla&sses")      ),
					    `item(`id(`menu_merge), _("Me&rge Classes")      ),
					    ]
					   ),
			      `MenuButton( _("&Tools"),
					   [
					    `item(`id(`menu_clone), _("Create Reference Pro&file")      )
					    ]
					   )
			      )
			),
		  `VSpacing(0.5)
		  );


	UI::ReplaceWidget(`id(`image) , menu);

	// Default tree item
	string tree_item = "System";
	CreateTreeWidget( tree_item);
	UI::ChangeWidget(`id(`key), `CurrentItem, tree_item);


	any ret = `key;
	any func_ret = "";

	repeat
	    {
		if (size(Y2ModuleConfig::GroupMap) == 0)
		{
		    Popup::Error(_("Error while reading configuration data."));
		    ret = `next;
		    break;
		}

		if (haskey(Y2ModuleConfig::GroupMap, tree_item))
		{
		    string html = "";
		    foreach(string k , map v, Y2ModuleConfig::ModuleMap, ``{
			if (v["X-SuSE-YaST-Group"]:"" == tree_item)
			{
			    y2debug("name: %1 (%2)", v["Name"]:"", k );
			    string colored = HTML::Colorize( HTML::Link(v["Name"]:"", k), "#8BC460");
			    html = html + HTML::Heading(colored);
			    html = html + HTML::Para(v["GenericName"]:"");
			}
		    });

		    if (html == "")
		    {
			html = HTML::Heading(_("No modules available in this group."));
		    }
		    term contents = `RichText(html);

		    if (ret != `menu_source)
		    {
			Wizard::SetContents(_("Available modules"),
					    contents, "", true , true);
		    }

		    while ( true )
		    {
			
			ret =  UI::UserInput();
			y2milestone("INPUT: %1", ret);
			if (ret == nil)
			    break;
			

			if (ret == `key)
			{
			    tree_item = (string ) UI::QueryWidget(`id(`key), `CurrentItem);
			    break;
			}
			else if (ret == `next || ret == `back || ret == `abort)
			{
			    break;
			}
			else if (contains(menuitems, ret) )
			{
			    break;
			}
			else
			{
			    tree_item = (string)ret;
			    break;
			}
		    }
		}

		foreach(string def_resource, map resourceMap, Y2ModuleConfig::ModuleMap, ``{

		    if (tree_item == def_resource)
		    {
			// Set resource name, if not using default value
			string resource = Y2ModuleConfig::getResource(def_resource);
			y2debug("Resource map: %1",  resourceMap );
			ret = module_contents( resource , resourceMap, menuitems);
		    }
		});

		if (ret == `key)
		{
		    tree_item = (string) UI::QueryWidget(`id(`key), `CurrentItem);
		    if (tree_item == nil)
		    {
			tree_item = "System";
		    }
		}
		else if (ret  == nil)
		{
		    Popup::Error(_("Error while reading configuration data."));
		    ret = `back;
		}
		else if ( contains( menuitems , ret) )
		{
		    y2debug("MENU: %1", ret);

		    boolean exit_after = false;
		    if (ret == `menu_reps)
		    {
			Wizard::CreateDialog();
			Preferences();
			Wizard::CloseDialog();
		    }
		    else if ( ret == `menu_alice)
		    {
			y2milestone("Importing ALICE data");
			// verify that needed packages are installed
			import "Require";
			import "Mode";

			Mode::config = false;
			// notification 1/2
			string pkgmsg =  _("<p>The following package is needed for importing ALICE data:<b> %1</b></p>");
			pkgmsg = pkgmsg + _("<p>Do you want to install it now?</p>");

			boolean reqret = Require::RequireAndConflictTarget(["alice-compat"], [], pkgmsg );

			Mode::config = true;
			if (reqret )
			{
			    Wizard::CreateDialog();
			    aliceImportList();
			    Wizard::CloseDialog();
			}

		    }
		    else if ( ret == `menu_classes)
		    {
			import "AutoinstClass";

			Wizard::CreateDialog();
			ManageClasses();
			Wizard::CloseDialog();
		    }
		    else if ( ret == `menu_clone)
		    {
			import "AutoinstClone";

			Wizard::CreateDialog();
			cloneSystem();
			Wizard::CloseDialog();

		    }
		    else if ( ret == `menu_merge)
		    {
			import "AutoinstClass";

			Wizard::CreateDialog();
			MergeDialog();
			Wizard::CloseDialog();
		    }
		    else if (ret == `menu_exit) // EXIT
		    {
			if (Profile::changed)
			{
			    string current = "";
			    if (AutoinstConfig::currentFile == "")
			    {
				current = "Untitled";
			    }
			    else
			    {
				current = AutoinstConfig::currentFile;
			    }

			    symbol answer = Popup::AnyQuestion3(_("Control file changed."),
								  sformat(_("Save the changes to %1?"), current),
								  Label::YesButton(),
								  Label::NoButton(),
								  Label::CancelButton(),
								  `focus_yes
								  );
			    if (answer == `no)
			    {
				ret = `exit;
			    }
			    else if (answer == `yes)
			    {
				ret = `menu_save;
				exit_after = true;
			    }
			    else
			    {
				continue;
			    }
			}
			else
			{
			    ret = `exit;
			}
		    }





		    if (ret == `menu_open) // OPEN
		    {
			string filename = UI::AskForExistingFile( AutoinstConfig::Repository, "*.*", _("Select a file to load."));
			if (filename != "")
			{
			    y2milestone("file: %1", filename);
			    AutoinstConfig::currentFile = filename;
			    
			    list pathComponents = splitstring(  filename, "/");
			    
			    string base = (string) select(pathComponents, size(pathComponents) -1, "default");			    
			    UI::ChangeWidget(`id(`key), `Label, sformat(_("Fi&le: %1"), base));
			    
			    Profile::ReadXML(filename);

			}
		    }
		    else if (ret == `menu_kickstart)
		    {									
			string filename = UI::AskForExistingFile( AutoinstConfig::Repository, "*.*", _("Select a file to load."));

			if ( filename != nil )
			{
			    
			    Kickstart::Read(filename);
			    map ksay = Kickstart::KS2AY();
			    if (ksay == $[])
			    {
				Report::Error(_("Error while loading Kickstart file. Verify the syntax of
file and try again.
"));
			    }
			    else
			    {
				Profile::Import(ksay);
			    
				Report::Message(_("Kickstart file was imported.
Check the imported syntax and make sure the package selection and partitioning
were imported correctly.
"));
			    }
			}
			else {
			    Report::Error(_("Invalid file name. Select another file."));
			}
						
		    }
		    else if (ret == `menu_save) // SAVE
		    {
			if (AutoinstConfig::currentFile == "")
			{
			    string filename = UI::AskForSaveFileName(AutoinstConfig::Repository,  "*", _("Save as..."));			    
			    if (filename !=  nil )
			    {
				AutoinstConfig::currentFile = filename;
			    }
			    else
			    {
				continue;
			    }
			}

			if ( Profile::Save( AutoinstConfig::currentFile ))
			{
			    Popup::Message(sformat(_("File %1 was saved successfully."), AutoinstConfig::currentFile));
			    Profile::changed = false;
			    if (exit_after)
			    {
				ret = `next;
			    }
			}
			else
			{
			    Popup::Warning(_("An error occured while saving the file."));
			}
		    }
		    else if (ret == `menu_saveas) // SAVE AS
		    {
			string filename = UI::AskForSaveFileName(AutoinstConfig::Repository,  "*", _("Save as..."));
			if ( filename != nil )
			{
			    y2milestone("filename: %1", filename );
			    AutoinstConfig::currentFile = filename;
			    if ( Profile::Save( AutoinstConfig::currentFile ))
			    {
				Popup::Message(sformat(_("File %1 was saved successfully."), AutoinstConfig::currentFile));
				Profile::changed=false;
				list pathComponents = splitstring(  filename, "/");
				string base = (string) select(pathComponents, size(pathComponents) -1, "default");
				UI::ChangeWidget(`id(`key), `Label, sformat(_("Fi&le: %1"), base));
			    }
			    else
			    {
				Popup::Warning(_("An error occured while saving the file."));
			    }
			}
		    }
		    else if (ret == `menu_source) // Show SOURCE
		    {
			y2milestone("Showing source...: %1", Profile::current);
			Profile::Prepare();
			string source = XML::YCPToXMLString(`profile, Profile::current);
			UI::ReplaceWidget(`id(`rep_button_box), `VSpacing(0.6));

			term sourceView =
			    `RichText( `id(`class_source ),
				       `opt(`plainText),
				       source
				       );

			Wizard::SetContents(_("Source"),
					    sourceView , "", true , true);
			tree_item = "System";

		    }
		    else if ( ret == `menu_tree)
		    {
			tree_item = (string) UI::QueryWidget(`id(`key), `CurrentItem);
			if (tree_item == nil)
			{
			    tree_item = "System";
			}
		    }
		    else if (ret == `menu_new) // NEW
		    {
			Profile::Reset();
			AutoinstConfig::currentFile = "";
			UI::ChangeWidget(`id(`key), `Label, sformat(_("Fi&le: %1"), "Untitled"));
		    }
		}
	    } until ( ret == `exit || ret == `cancel || ret == `back );

	Wizard::RestoreHelp("");
	Wizard::RestoreScreenShotName ();
	return (symbol)ret;

    }
}
