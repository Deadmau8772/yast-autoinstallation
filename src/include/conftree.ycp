/**
 * File:		conftree.ycp
 * Module:		Autoinstall
 * Summary:		This module handles the configuration for auto-installation
 * Authors:		Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{

    textdomain "autoinst";
    import "HTML";
    import "XML";
    import "Call";
    import "Label";
    import "Popup";
    import "Wizard";
    import "Report";
    import "AutoinstConfig";
    import "Profile";
    import "Mode";
    import "Stage";
    import "Icon";
    import "AutoinstSoftware";
    import "AutoinstClone";

    string title = _("Autoinstallation - Configuration");

    any SaveAs() {
        any filename = UI::AskForSaveFileName(AutoinstConfig::Repository,  "*", _("Save as..."));
        if ( filename != nil && (string)filename!="")
        {
            AutoinstConfig::currentFile = (string)filename;
            if ( Profile::Save( AutoinstConfig::currentFile ))
            {
                Popup::Message(sformat(_("File %1 was saved successfully."), AutoinstConfig::currentFile));
//                Profile::checkProfile();
                Profile::changed=false;
                list pathComponents = splitstring(  (string)filename, "/");
                integer s = size(pathComponents) - 1;
                string base = pathComponents[s]:"default";
            }
            else
            {
                Popup::Warning(_("An error occured while saving the file."));
            }
        }
        return `next;
    }

    /**
     * Creates the group selection box with the specified YaST group selected.
     *
     * @param selectedGroup The group to select.
     * @return The newly created `SelectionBox widget.
     */
    term groups( string selectedGroup ){
      list<term> itemList = [];
      foreach(string k, map v,  Y2ModuleConfig::GroupMap, {
	term item = `item( `id(k),`icon(v["Icon"]:""), v["Name"]:"", k == selectedGroup );
	itemList = add(itemList, item );
      });
      return `SelectionBox( `id(`groups), `opt(`notify),"Groups", itemList );
    }

    /**
     * Creates the modules selection box displaying modules in the specified group.
     * The specified YaST module is selected.
     *
     * @param group_name YaST group of modules to display.
     * @param selectedModule Module to preselect.
     */
    term modules (string group_name, string selectedModule ) {
	y2milestone( "group_name: %1", group_name );
	list<term> itemList = [];
        foreach(string k , map v, Y2ModuleConfig::ModuleMap, ``{
	  if (v["X-SuSE-YaST-Group"]:"" == group_name)
	  {
	    term item = `item( `id(k),`icon(v["Icon"]:""), v["Name"]:"", k == selectedModule );
	    itemList = add(itemList, item );
	  }
	});
	if( 0 == size(itemList) ){
	  itemList = add( itemList, `item(`id("none"), "No modules available" ) );
	}
      map resourceMap = Y2ModuleConfig::GroupMap[group_name]:$[];
      return `SelectionBox(`id(`modules), `opt(`notify), resourceMap["Name"]:"" + " - Modules", itemList );
    }

    /* Creates an `HBox containing the buttons to be displayed below the summary column
     *
     * @return The `HBox widget.
     */
    term buttons(){
      Wizard::HideNextButton();
      Wizard::HideBackButton();
      Wizard::HideAbortButton();
      return `HBox(
		`HSpacing(1),
		`VBox(
		  `PushButton( `id(`read), _("&Clone") ),
		  `PushButton( `id(`writeNow), _("&Apply to system") )
		 ),
		`HStretch(),
		`VBox(
		  `PushButton( `id(`configure), _("&Edit")),
		  `PushButton( `id(`reset), _("Clea&r"))
		 ),
		`HSpacing(1)
	      );
    }

    /**
     * Creates a `VBox containg the summary of the specified module and the action buttons below.
     *
     * @param module_name The module to summarize.
     * @return The `VBox widget.
     */
    term details (string module_name ){
      map resourceMap = Y2ModuleConfig::ModuleMap[module_name]:$[];
      string module_auto = resourceMap["X-SuSE-YaST-AutoInstClient"]:"none";
      string summary =  (string) WFM::CallFunction( module_auto,["Summary"]);
      if( nil == summary )
	summary = "";
      return `VBox( `Left(`Label( resourceMap["Name"]:"" + " - Details" )),
		    `RichText( summary ),
		    buttons()
		  );
    }

    /**
     * Sets the high level layout to 3 columns:
     *
     *	- left:	  the YaST groups are displayed in a selection box
     *	- middle: the modules of the selected group are displayed in a selection box
     *	- right:  the summary of the selected module is displayed, action buttons below
     *
     * @param preselectedGroup The YaST group to preselect
     * @param preselectedModule The module to preselect
     */
    term layout (string preselectedGroup, string preselectedModule ){
      return `HBox(
		    `HWeight(33, groups( preselectedGroup ) ),
		    `HWeight(33,
		      `ReplacePoint( `id(`rp_modules), modules(preselectedGroup, preselectedModule) )
		     ),
		    `HWeight(33,
		      `ReplacePoint( `id(`rp_details), details( preselectedModule )))
		  );
    }

    /* Prototype  --- see below */
    void updateModules();

    /**
     * Set the group selection box to the specified YaST group.
     *
     * @praram group_name YaST group to select.
     */
    void setGroup(string group_name){
      UI::ChangeWidget(`id(`groups), `CurrentItem, group_name );
      updateModules();
    }

    /**
     * Get the currently selected YaST group from the selection box widget.
     *
     * @return The currently selected group.
     */
    string getGroup(){
      return (string) UI::QueryWidget( `id(`groups), `CurrentItem);
    }

    /**
     * Get the currently selected Module from the selection box widget.
     *
     * @return The currently selected module.
     */
    string getModule(){
      return (string) UI::QueryWidget( `id(`modules), `CurrentItem);
    }

    /* Prototype --- see below */
    void updateDetails();

    /**
     * Updates the action button activation status. (Some modules are not
     * clonable, some are not writeable).
     *
     * @param selectedModule The module to define the button status.
     */
    void updateButtons(string selectedModule){
      /* enable/disable write button */
      if( contains( AutoinstConfig::noWriteNow, selectedModule )){
	UI::ChangeWidget(`id(`writeNow), `Enabled, false);
      }
      /* enable disable read button */
      map resourceMap = Y2ModuleConfig::ModuleMap[selectedModule]:$[];
      boolean clonable = resourceMap["X-SuSE-YaST-AutoInstClonable"]:"false" == "true";
      if( ! clonable &&
	  "software" != selectedModule &&
	  "partitioning"  != selectedModule &&
      "bootloader"    != selectedModule ){
	UI::ChangeWidget(`id(`read), `Enabled, false );
      }
    }

    /**
     * Set the module selection box to the specified YaST module and
     * update the details and group column.
     *
     * @param module_name The module to select.
     */
    void setModule(string module_name){
      map resourceMap = Y2ModuleConfig::ModuleMap[module_name]:$[];
      if( $[] != resourceMap ){
	string group = resourceMap["X-SuSE-YaST-Group"]:"";
	if( "" != group ){
	  setGroup( group );
	}
	UI::ChangeWidget(`id(`modules), `CurrentItem, module_name );
	updateDetails();
      }
    }

    /**
     * Update the modules selection box, e.g. after the user selected a different
     * group. Updates the details section also.
     */
    void updateModules(){
      string selectedGroup = getGroup();
      y2milestone( "group: %1", selectedGroup );
      term newModules = modules( selectedGroup, "");
      UI::ReplaceWidget( `id(`rp_modules), newModules );
      updateDetails();
    }

    /**
     * Update the details section, e.g. after a different module was selected.
     */
    void updateDetails(){
      string selectedModule = (string) UI::QueryWidget( `id(`modules), `CurrentItem);
      y2milestone( "module: %1", selectedModule );
      term newDetails = details( selectedModule );
      UI::ReplaceWidget( `id(`rp_details), newDetails );
      updateButtons( selectedModule );
    }

    /**
     * Reset Configuration
     * @param resource Module/Resource to reset
     * @return any
     */
    any resetModule(string resource)
    {
        y2debug("resource: %1", resource);
        map resourceMap = Y2ModuleConfig::ModuleMap[resource]:$[];
	string module_auto = resourceMap["X-SuSE-YaST-AutoInstClient"]:"none";
        if( haskey( Profile::current, resource ) ) {
            Profile::current = remove( Profile::current, resource );
        }
        string profile_resource = Y2ModuleConfig::getResource(resource);
        WFM::CallFunction(module_auto, ["Reset"]);

        return `next;
    }

    /**
     * Read the setting of the specifed module from the current system.
     *
     * @param module_name The module to read in.
     */
    boolean readModule(string module_name){
      map resourceMap = Y2ModuleConfig::ModuleMap[module_name]:$[];
      string auto = resourceMap["X-SuSE-YaST-AutoInstClient"]:"";
      Call::Function(auto , ["Read"]);
      Call::Function(auto , ["SetModified"]);
      Profile::prepare = true;
      Profile::changed = true;
      return true;
    }
    /**
      * Configure module
      * @param resource Module/Resource to configure
      * @return any
      */
    any configureModule(string resource)
    {
        map resourceMap = Y2ModuleConfig::ModuleMap[resource]:$[];
        resource = Y2ModuleConfig::getResource(resource);
        y2debug("resource: %1", resource);

	string module_auto = resourceMap["X-SuSE-YaST-AutoInstClient"]:"none";
        y2debug("module_auto: %1", module_auto );

	y2milestone("Mode::mode %1", Mode::mode());
	any original_settings = WFM::CallFunction(module_auto, ["Export"]);
        any seq = WFM::CallFunction(module_auto, ["Change"]);
        y2milestone("Change response: %1", seq);
        if (seq == `accept || seq == `next || seq == `finish)
        {
	    any new_settings = WFM::CallFunction(module_auto, ["Export"]);
            if (new_settings == nil)
            {
		y2milestone("Importing original settings.");
                Popup::Error(_("The module returned invalid data."));
                WFM::CallFunction(module_auto, ["Import", original_settings]);
                return `abort;
            } else {
                y2milestone("original=%1", original_settings);
                y2milestone("new=%1", new_settings);
                if (original_settings!=new_settings )
                {
                    WFM::CallFunction(module_auto, ["SetModified"]);
                    Profile::changed = true;
                    Profile::prepare = true;
                }
            }
        } else {
            WFM::CallFunction(module_auto, ["Import", original_settings]);
        }
        return (seq);
    }


    /**
     * Sets the menus in the wizard.
     * @return void
     */
    define void  menus ()
    {
        list<map> Menu = [];
        Menu = Wizard::AddMenu( Menu ,  _("&File"),        "file-menu" );
        Menu = Wizard::AddMenu( Menu ,  _("&View"),        "view-menu" );
        Menu = Wizard::AddMenu( Menu ,  _("&Classes"),        "class-menu" );
        Menu = Wizard::AddMenu( Menu ,  _("&Tools"),        "tools-menu" );

        Menu = Wizard::AddMenuEntry     ( Menu ,  "file-menu", _("&New"),
                    "menu_new"      );
        Menu = Wizard::AddMenuEntry     ( Menu ,  "file-menu", _("&Open"),
                    "menu_open"      );
        Menu = Wizard::AddMenuEntry     ( Menu ,  "file-menu", _("&Save"),
                    "menu_save"      );
        Menu = Wizard::AddMenuEntry     ( Menu ,  "file-menu", _("Save &As"),
                    "menu_saveas"      );
        Menu = Wizard::AddSubMenu       ( Menu ,  "file-menu", _("Im&port"),
                    "file-import"   );
        Menu = Wizard::AddMenuEntry     ( Menu ,  "file-import", _("Import &Kickstart File"),
                    "menu_kickstart"      );
        Menu = Wizard::AddMenuEntry     ( Menu , "file-menu" , _("Settin&gs"),
                "menu_settings" );
        Menu = Wizard::AddMenuEntry     ( Menu , "file-menu" , AutoinstConfig::ProfileEncrypted ? _("change to decrypted"):_("change to encrypted"),
                "change_encryption" );
         Menu = Wizard::AddMenuEntry     ( Menu , "file-menu" , _("Apply Profile to this System"),
                "write_to_system");
        Menu = Wizard::AddMenuEntry     ( Menu ,  "file-menu", _("E&xit"),
                    "menu_exit"      );
        Menu = Wizard::AddMenuEntry     ( Menu ,  "view-menu", _("Configu&ration Tree"),
                    "menu_tree"      );
        Menu = Wizard::AddMenuEntry     ( Menu ,  "view-menu", _("So&urce"),
                    "menu_source"     );
        Menu = Wizard::AddMenuEntry     ( Menu ,  "class-menu", _("Cla&sses"),
                    "menu_classes"      );
        Menu = Wizard::AddMenuEntry     ( Menu ,  "class-menu", _("Me&rge Classes"),
                    "menu_merge"      );

        Menu = Wizard::AddMenuEntry     ( Menu ,  "tools-menu", _("Create Reference Pro&file"),
                    "menu_clone"      );
        Menu = Wizard::AddMenuEntry     ( Menu ,  "tools-menu", _("Check &Validity of Profile"),
                    "menu_valid"      );
        Wizard::CreateMenu(Menu);
        return;
    }

    /**
     * Create the complete dialog (called in wizard.ycp and in MainDialog())
     * @param currentGroup Group to select.
     * @param currentModule Module to select.
     * @return void
     */
    define void CreateDialog(string currentGroup, string currentModule ) ``{
	if( "" == currentGroup || nil == currentGroup ){
	  currentGroup = "System";
	}
	if( "" == currentModule || nil == currentModule ){
	  currentModule = "general";
	}
	Wizard::SetContents(title,
                   layout( currentGroup, currentModule ), AutoinstConfig::MainHelp(), true , true);
	updateButtons( currentModule );
	return;
    }




    /**
     * Show Source
     */
    void ShowSource() {
        Profile::Prepare();
        string source = XML::YCPToXMLString(`profile, Profile::current);
        term sourceView =
            `RichText( `id(`class_source ),
                    `opt(`plainText),
                    source
                    );

        Wizard::SetTitleIcon("autoyast");
        Wizard::SetContents(_("Source"),
                sourceView , AutoinstConfig::MainHelp(), true , true);
        return;
    }

    /**
     * Menu interface
     * @param list menu items
     * @return symbol
     */
    any MainDialog()
	``{

        map Icons = $[];
        Icons["Net_advanced"] = "network_advanced";
	any func_ret = "";
        any ret = nil;
	string currentGroup = "System";
	string currentModule = "general";

        while(true)
        {
            if( AutoinstConfig::runModule != "" ) {
                ret = `configure;
                setModule( AutoinstConfig::runModule );
                AutoinstConfig::runModule = "";
            } else {
                map event = UI::WaitForEvent();
                ret = event["ID"]:nil;
                AutoinstConfig::runModule = "";
            }
            if (ret == `groups)
            {
	      updateModules();
            }
	    else if( ret == `modules ){
	      updateDetails();
	    }
            else if (ret == `configure)
            {
                currentGroup = getGroup();
		currentModule = getModule();
                y2debug("configure module: %1", currentModule);
                if (currentModule != "")
                {
                    any configret = configureModule(currentModule);
                    y2debug("configureModule ret : %1", configret);
		    CreateDialog(currentGroup, currentModule);
                }
            }
            else if (ret == `reset)
            {
                Profile::prepare = true;
                y2debug("reset");
                currentGroup = getGroup();
                currentModule = getModule();
                y2debug("reset module: %1", currentModule);
                if (currentModule!="")
                {
                    any configret = resetModule(currentModule);
                    y2debug("resetModule ret : %1", configret);
		    CreateDialog(currentGroup, currentModule);
                }
            }
            else if ( ret == `writeNow )
            {
                string modulename=getModule();
                if (modulename!="") {
                    map d = Y2ModuleConfig::ModuleMap[modulename]:$[];
                    string module_auto = "";
                    if (haskey(d,"X-SuSE-YaST-AutoInstClient"))
                        module_auto = d["X-SuSE-YaST-AutoInstClient"]:"none";
                    else
                        module_auto = sformat("%1_auto", modulename);
                    if( Popup::YesNo( sformat( _("Do you really want to apply the settings of the module '%1' to your current system?"), modulename ) ))
                        Call::Function(module_auto, ["Write"]);
                }
            }
	    else if( ret == `read ){
	      currentGroup = getGroup();
	      currentModule = getModule();
	      resetModule(currentModule);
	      readModule(currentModule);
	      if( UI::WidgetExists(`id(`rp_details) ) ){
		/* if dialog didn't replace wizard contents this is enough */
		updateDetails();
	      }
	      else{
		/* otherwise we have to rebuild the complete wizard */
		CreateDialog(currentGroup, currentModule);
	      }
	    }
            else if (ret == "menu_tree") // source -> tree
            {
                y2debug("change to tree");
		CreateDialog(currentGroup, currentModule);
            }
            else if (ret == "menu_open") // OPEN
            {
                any filename = UI::AskForExistingFile( AutoinstConfig::Repository,
                        "*",
                        _("Select a file to load."));
                if (filename != "" && filename != nil)
                {
                    AutoinstConfig::currentFile = (string)filename;

                    list pathComponents = splitstring(  (string)filename, "/");

                    integer s = size(pathComponents) -1;
                    string base = pathComponents[s]:"default";
                    boolean readOkay = Profile::ReadXML((string)filename);
                    y2debug("Profile::ReadXML returned %1",readOkay);
                    if( readOkay ) {
                        Popup::ShowFeedback(_("Reading configuration data"), _("This may take a while"));
                        foreach(string p, map d, Profile::ModuleMap, ``{
                                /* Set resource name, if not using default value */
                                string resource = d["X-SuSE-YaST-AutoInstResource"]:"";
                                if (resource == "")
                                {
                                    resource = p;
                                }
                                y2debug("resource: %1", resource );
                                string tomerge = d["X-SuSE-YaST-AutoInstMerge"]:"";
                                string module_auto =d["X-SuSE-YaST-AutoInstClient"]:"none";
                                any rd = Y2ModuleConfig::getResourceData(d
                                    ,resource);
                                if (rd!=nil) {
                                WFM::CallFunction(module_auto, ["Import",
                                    rd]);
                                }
                                });
                        Popup::ClearFeedback();
                        Wizard::DeleteMenus(); // FIXME: sucks sucks sucks sucks sucks
                        menus();
                    } else {
                        /* opening/parsing the xml file failed */
                        Popup::Error(_("An error occured while opening/parsing the XML file."));
                        Profile::Reset();
                    }

                }
                if (UI::WidgetExists(`id(`class_source)))
                {
                    ShowSource();
                }
                else
                {
                    string group=getGroup();
                    string modulename=getModule();

                    term contents = `Empty();

                    if (group!="" )
                    {
                        contents = layout(group, modulename);
                        string caption = title;
                        string currentFile = AutoinstConfig::currentFile;
                        currentFile = substring( currentFile, findlastof(currentFile,"/")+1 );
                        if( size(currentFile) > 0 ) {
                            caption = caption + " - " + currentFile;
                        }
                        Wizard::SetContents(caption,
                                contents, AutoinstConfig::MainHelp(), true , true);
                        Wizard::SetTitleIcon(Icons[group]:tolower(group));
			updateButtons(modulename);
                    }
                }
                ret = `menu_open;
            }
            else if (ret == "menu_source") // Show SOURCE
            {
		/* save previously selected group and module,
		 * so we can restore them afterwards
		 */
		currentGroup = getGroup();
		currentModule = getModule();
                ShowSource();
                ret = `menu_source;
            }
            else if (ret == "menu_save") // SAVE
            {
                if (AutoinstConfig::currentFile == "")
                {
                    any filename = UI::AskForSaveFileName(AutoinstConfig::Repository,  "*", _("Save as..."));
                    if (filename !=  nil )
                    {
                        AutoinstConfig::currentFile = (string)filename;
                    }
                    else
                    {
                        continue;
                    }
                }

                if ( Profile::Save( AutoinstConfig::currentFile ))
                {
                    Popup::Message(sformat(_("File %1 was saved successfully."), AutoinstConfig::currentFile));
                    //Profile::checkProfile();
                    Profile::changed = false;
                }
                else
                {
                    Popup::Warning(_("An error occured while saving the file."));
                }
                ret = `menu_save;
            }
            else if (ret == "menu_saveas") // SAVE AS
            {
                SaveAs();
                ret = `menu_saveas;
            }
            else if (ret == "menu_new") // NEW
            {
                Profile::Reset();
                foreach(string p, map d, Profile::ModuleMap, {
                    string resource = d["X-SuSE-YaST-AutoInstResource"]:"";
                    if (resource == "")
                        resource = p;
                    resetModule(resource);
                });
                AutoinstConfig::currentFile = "";
                if (UI::WidgetExists(`id(`class_source))) {
                    ShowSource();
                }
                string group=getGroup();
		string module_name=getModule();
		Wizard::SetContents(_("Available Modules"),
                                layout(group, module_name), AutoinstConfig::MainHelp(), true , true);
		updateButtons(module_name);
                ret = `menu_new;
            }
            else if (ret == "change_encryption" ) {
                AutoinstConfig::ProfileEncrypted = !AutoinstConfig::ProfileEncrypted;
                AutoinstConfig::ProfilePassword = "";
                Wizard::DeleteMenus(); // FIXME: sucks sucks sucks sucks sucks
                menus();
            }
            else if ( ret == "write_to_system" ) {
                if( Popup::YesNo( _("Do you really want to apply the settings of the profile to your current system?") )) {
                    Profile::Prepare();
                    string oldMode = Mode::mode();
                    string oldStage = Stage::stage();
                    Mode::SetMode("autoinstallation");
                    Stage::Set ("continue");
                    WFM::CallFunction("inst_autopost", []);
                    AutoinstSoftware::addPostPackages(Profile::current["software","post-packages"]:[]);

                    // the following is needed since 10.3
                    // otherwise the already configured network gets removed
                    if( !haskey(Profile::current, "networking") ) {
                        Profile::current = add( Profile::current, "networking", $[ "keep_install_network":true ] );
                    }

                    Pkg::TargetInit ("/", false);
                    WFM::CallFunction("inst_rpmcopy", []);
                    WFM::CallFunction("inst_autoconfigure", []);
                    Mode::SetMode(oldMode);
                    Stage::Set(oldStage);
                }
            }
            else if (ret == "menu_exit" || `cancel == ret ) // EXIT
            {
                ret = `menu_exit;
                if (Profile::changed)
                {
                    string current = "";
                    if (AutoinstConfig::currentFile == "")
                    {
                        current = "Untitled";
                    }
                    else
                    {
                        current = AutoinstConfig::currentFile;
                    }

                    boolean answer = Popup::AnyQuestion(_("Control file changed."),
                            sformat(_("Save the changes to %1?"), current),
                            Label::YesButton(),
                            Label::NoButton(),
                            `focus_yes
                            );
                    if (true == answer)
                    {
                        SaveAs();
                    }
                }
		break;
            }
            else
            {
                term s = toterm(ret);
                ret = (symbol)symbolof(s);
                break;
            }
        }
	return (symbol)ret;

    }
}
