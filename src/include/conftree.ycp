/**
 * File:   	conftree.ycp
 * Module: 	Autoinstall
 * Summary: 	This module handles the configuration for auto-installation
 * Authors: 	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{

    textdomain "autoinst";
    import "HTML";
    import "Call";

    include "readconfig.ycp";
    
    
    /**
     * Create a list to be used with the table widget
     * @param tree data
     * @return list
     */

    global define CreateTableList( list MenuTreeData)
	``{
	list menu_options = maplist(`e, MenuTreeData,
				    ``{
					if ((e["children"]:[]>0))
					{
					    list childrenlist = CreateTableList(lookup(e,"children",[]));
					    return `item(`id(e["entry"]:""), e["title"]:"",false, childrenlist);
					}
					else
					{
					    return `item(`id(e["entry"]:""),e["title"]:"", false);
					}
				    });
	return menu_options;
    }



    
    global define content_dialog( string resource, map resourceMap ) ``{
	
	string summary =  Call::Function(module_auto, ["Summary", Y2ModuleConfig::getResourceData(resourceMap , resource)]);
	string caption = resourceMap["Name"]:"Configurtion";
	string buttonLabel = resourceMap["Helptext"]:"Configure";
	term contents =
	    `VBox(		
		  `RichText( `id(`summary), summary),		  
		  `HBox(
			// push button label
			`PushButton(`id(`reset), _("Reset Confi&guration")),
			`HStretch(),
			// push button label			
			`PushButton(`id(`configure), _("Configur&e") )
			)
		  );
	// caption of lan auto configuration
	Wizard::SetContents(
			    Translate(caption),
			    contents, "", true, true);
    }



    /**
     * Module configuration dialog
     *
     */
    global define module_contents(string resource, map resourceMap ) ``{
	// y2milestone("FLAT a: %1", Profile::Flat);
	
	any original_settings = Y2ModuleConfig::getResourceData(resourceMap , resource);
	
	string module_auto = resourceMap["AutoClient"]:"none";

	// Import Data
	Call::Function(module_auto, ["Import", Y2ModuleConfig::getResourceData(resourceMap ,resource)]);
	content_dialog( resource , resourceMap);
	
	any ret= nil;
	
	repeat {
	    ret = UI::UserInput();
	    
	    if( ret == `configure )
	    {
		any seq = Call::Function(module_auto, ["Change", Y2ModuleConfig::getResourceData(resourceMap ,resource)]);
		y2milestone("Change response: %1", seq);
		if (seq == `accept || seq == `next || seq == `finish)
		{
		    string tomerge = resourceMap["AutoinstMerge"]:"";
		    string tomergetypes = resourceMap["AutoinstMergeTypes"]:"";
		    list MergeTypes = splitstring(tomergetypes, ",");
		    if (size(tomerge) > 0 )
		    {
			any result = Call::Function(module_auto, ["Export",  Y2ModuleConfig::getResourceData(resourceMap , resource) ]);
			integer i = 0;
			foreach( string res, splitstring(tomerge, ",") , ``{
			    if ( MergeTypes[i]:"map" == "map") 
				Profile::Flat[res] = result[res]:$[];
			    else
				Profile::Flat[res] = result[res]:[];
			    i = i + 1;
			});
		    }
		    else
		    {
			Profile::Flat[resource]  =  Call::Function(module_auto, ["Export",  Y2ModuleConfig::getResourceData(resourceMap , resource) ]);
		    }
		}
		
		y2milestone("New Settings: %1", Profile::Flat);
		content_dialog( resource , resourceMap);
	    }
	    else if( ret == `reset)
	    {

		string tomerge = resourceMap["AutoinstMerge"]:"";
		string tomergetypes = resourceMap["AutoinstMergeTypes"]:"";
		list MergeTypes = splitstring(tomergetypes, ",");
		if (size(tomerge) > 0 )
		{
		    any result = Call::Function(module_auto, ["Export",  Y2ModuleConfig::getResourceData(resourceMap , resource) ]);
		    integer i = 0;
		    foreach( string res, splitstring(tomerge, ",") , ``{
			if ( MergeType[i]:"map" == "map") 
			    Profile::Flat[res] = $[];
			else
			    Profile::Flat[res] = [];
			i = i + 1;
		    });
		}
		else
		{
		    Profile::Flat[resource]  =  Call::Function(module_auto, ["Export",  Y2ModuleConfig::getResourceData(resourceMap , resource) ]);
		}
		    
		Profile::Flat[resource]  = Call::Function(module_auto, ["Reset",  Y2ModuleConfig::getResourceData(resourceMap , resource) ]);
		content_dialog(resource,  resourceMap);		
	    }
	    
	    if ( original_settings != Y2ModuleConfig::getResourceData(resourceMap , resource) )
	    {				
		Profile::changed = true;
	    }	   	    	    	    
	    // y2milestone("FLAT b: %1", eval(Profile::Flat));
	    
	} until (ret == `back ||  ret == `abort || ret == `cancel || ret == `next || ret ==`key || contains(menuitems, ret) );		
	
	return ret;
    }


    global define void CreateTreeWidget() ``{

	list menu_options = CreateTableList(Y2ModuleConfig::MenuTreeData);
	Wizard::ReplaceButtonBox(`VSpacing(0.6));
	UI::ReplaceWidget(`id(`helpSpace) ,
			  `VBox(			
				`Tree(
				      `id(`key),
				      `opt(`notify,`vstretch),
				      "Untitled",
				      menu_options
				      ),
				`VSpacing(1))
			  );
	
	UI::ChangeWidget(`id(`key), `Label, sformat(_("Fi&le: %1"), AutoinstConfig::currentFile));
	return; 
    }
    
    /**
     * Menu interface
     */
    global define symbol ConfTree()
	``{
	Wizard::SetScreenShotName ("autoyast-conftree");
	include "autoinstall/io.ycp";
	include "autoinstall/help.ycp";	
	term image = Wizard::HeaderImage(false);
	term menu =
	    `VBox(
		  image,
		  `VSpacing(0.5),
		  `Left(
			`HBox(		
			      `MenuButton( _("&File"),
					   [
					    `item(`id(`menu_new), _("&New")      ),
					    `item(`id(`menu_open), _("&Open")      ),
					    `item(`id(`menu_save), _("&Save")      ),
					    `item(`id(`menu_saveas), _("Save &As")      ),
					    `menu( _("Im&port") ,
						   [
						    `item(`id(`menu_alice), _("Import A&lice Data")),
						    `item(`id(`menu_kickstart), _("Import &Kickstart File"))
						    ]
						   ),
					    `menu( _("&Preferences"),
						   [
						    //    `item(`id(`menu_general), _("General")),
						    `item(`id(`menu_reps), _("Reposi&tories"))
						    
						    ]),
					    `item(`id(`menu_exit), _("E&xit")      )
					    ]
					   ),
			      `MenuButton( _("&View"),
					   [
					    `item(`id(`menu_tree), _("Configu&ration Tree")      ),
					    `item(`id(`menu_source), _("So&urce")      )
					    ]
					   ),			      					  
			      `MenuButton( _("&Classes"),
					   [
					    // `item(`id(`menu_rules), _("R&ules")      ),
					    `item(`id(`menu_classes), _("Cla&sses")      ),
					    `item(`id(`menu_merge), _("Me&rge Classes")      ),
					    ]
					   ),
			      `MenuButton( _("&Tools"),
					   [
					    `item(`id(`menu_iso), _("&Create ISO Image")      ),
					    `item(`id(`menu_clone), _("Clone T&his System")      )
					    ]
					   )			      		
			      )
			),
		  `VSpacing(0.5)
		  );
	
	
	UI::ReplaceWidget(`id(`image) , menu);	
	CreateTreeWidget();


	
	string tree_item = "System";
	any ret = `key;
	any func_ret = "";

	repeat
	    {
		if (size(Y2ModuleConfig::GroupMap) == 0)
		{
		    UI::ErrorPopup(_("Error while reading configuration data."));
		    ret = `next;
		    break;
		}
	    
		if (haskey(Y2ModuleConfig::GroupMap, tree_item))
		{	
		    string html = "";
		    foreach(`k,`v, Y2ModuleConfig::ModuleMap, ``{
			if (v["Group"]:"" == tree_item)
			{								
			    string colored = HTML::Colorize( HTML::Link(ReadKey(v["Textdomain"]:"", "Name", v), k), "#8BC460");
			    html = html + HTML::Heading(colored);
			    html = html + HTML::Para(ReadKey(v["Textdomain"]:"", "Helptext", v));
			}
		    });

		    if (html == "")
		    {
			html = HTML::Heading(_("No modules available in this group."));
		    }
		    term contents = `RichText(html);

		    if (ret != `menu_source)
		    {
			Wizard::SetContents(_("Available modules"),
					    contents, "", true , true);
		    }

		    while ( true )
		    {
			ret = Wizard::UserInput();
			y2milestone("INPUT: %1", ret);
		    
			if (ret == `key)
			{
			    tree_item = UI::QueryWidget(`id(`key), `CurrentItem);
			    break;
			}
			else if (ret == `next || ret == `back || ret == `abort)
			{
			    break;
			}
			else if (contains(menuitems, ret) )
			{			
			    break;
			}
			else
			{
			    tree_item = ret;
			    break;
			}

		    }

		}
	 
		foreach(string def_resource, map resourceMap, Y2ModuleConfig::ModuleMap, ``{
		
		    if (tree_item == def_resource)
		    {		  
			// Set resource name, if not using default value
			string resource = Y2ModuleConfig::getResource(def_resource);
			y2milestone("Resource map: %1",  resourceMap );
			ret = module_contents( resource , resourceMap);
		    }
		});

		if (ret == `key)
		{
		    tree_item = UI::QueryWidget(`id(`key), `CurrentItem);
		    if (tree_item == nil)
		    {
			tree_item = "System";
		    }
		}
		else if (ret  == nil)
		{
		    UI::ErrorPopup(_("Error while reading configuration data."));
		    ret = `back;		
		}
		else if ( contains(menuitems,ret) )
		{
		    y2milestone("MENU: %1", ret);
		
		    boolean exit_after = false;
		    if (ret == `menu_reps)
		    {
			Wizard::RestoreHelp("");
			Wizard::ReplaceButtonBox(Wizard::CancelAcceptButtonBox());
			ret = Preferences();
			CreateTreeWidget();
		    }	
		    else if ( ret == `menu_alice)
		    {
			y2milestone("Importing ALICE data");
			include "autoinstall/imports.ycp";
			Wizard::CreateDialog();	
						
			ret = aliceImportList();
			Wizard::CloseDialog();	
			CreateTreeWidget();		    
		    }
		    else if ( ret == `menu_classes)
		    {
			import "AutoinstClass";
			include "autoinstall/classes.ycp";
			Wizard::CreateDialog();			
			ManageClasses();
			Wizard::CloseDialog();
		    }		    
		    else if ( ret == `menu_clone)
		    {
			import "AutoinstClone";
			
			Wizard::CreateDialog();						
			cloneSystem();
			Wizard::CloseDialog();
			
		    }
		    else if ( ret == `menu_merge)
		    {
			import "AutoinstClass";
			include "autoinstall/classes.ycp";		
			Wizard::CreateDialog();			
			MergeDialog();
			Wizard::CloseDialog();
		    }			    
		    else if ( ret == `menu_iso)
		    {
			import "ISO";
			include "autoinstall/iso.ycp";
			isoSequence();		    
			
		    }		
		    else if (ret == `menu_exit) // EXIT
		    {
			if (Profile::changed)
			{
			    string current = "";
			    if (AutoinstConfig::currentFile == "")
				current = "Untitled";
			    else
				current = AutoinstConfig::currentFile;
			
			    symbol answer = UI::AnyQuestionPopup3(_("Control file changed."),
								  sformat(_("Save the changes to %1?"), current),
								  UI::YesButtonLabel(),
								  UI::NoButtonLabel(),
								  UI::CancelButtonLabel(),
								  `focus_yes
								  );
			    if (answer == `no)
			    {	
				ret = `exit;
			    }
			    else if (answer == `yes)
			    {
				ret = `menu_save;
				exit_after = true;
			    }
			    else
			    {
				continue;
			    }			
			}
			else
			{
			    ret = `exit;
			}
		    }



		
		
		    if (ret == `menu_open) // OPEN
		    {
						
			
			string filename = PopupFile( AutoinstConfig::Repository);
			
			if (filename!=nil)
			{			
			    y2milestone("file: %1", filename);
			    AutoinstConfig::currentFile = filename;
			    list pathComponents = splitstring(  filename, "/");
			    string base = select(pathComponents, size(pathComponents) -1, "default");
			    UI::ChangeWidget(`id(`key), `Label, sformat(_("Fi&le: %1"), base));
			    Profile::Read(filename);
			
			}
		    }
		    else if (ret == `menu_kickstart)
		    {
			Wizard::CreateDialog();	
			include "autoinstall/imports.ycp";
			string head = _("Import Kickstart File");
			string filename = PopupFile( AutoinstConfig::Repository);
			// string filename = UI::AskForExistingFile( AutoinstConfig::Repository, "*", _("Import Kickstart File") );
			if ( filename!=nil )
			{
			    map ksConfig = readKS(filename);
			    Profile::Import(ks2ay(ksConfig));
			    Report::Message(_("Kickstart file was imported.
Check the imported syntax and make sure the package selection and partitioning
were imported correctly.
"));
			}
			Wizard::CloseDialog();	
		    }
		    else if (ret == `menu_save) // SAVE
		    {
			if (AutoinstConfig::currentFile == "")
			{

			    string filename = SaveFileAs( AutoinstConfig::Repository);
			    if (filename != nil)
			    {
				AutoinstConfig::currentFile = filename;
			  
			    }
			    else
			    {
				continue;
			    }
			}
		    
			if ( Profile::Save( AutoinstConfig::currentFile ))
			{
			    UI::MessagePopup(sformat(_("File %1 was saved successfully."), AutoinstConfig::currentFile));
			    Profile::changed = false;
			    if (exit_after)
				ret = `next;
			}
			else
			{
			    UI::WarningPopup(_("An error occured while saving the file."));
			}
		    
		    }
		    else if (ret == `menu_saveas) // SAVE AS
		    {
			
			string filename = SaveFileAs(AutoinstConfig::Repository);
			if ( filename != nil ) {
			    AutoinstConfig::currentFile = filename;
			    if ( Profile::Save( AutoinstConfig::currentFile ))
			    {
				UI::MessagePopup(sformat(_("File %1 was saved successfully."), AutoinstConfig::currentFile));
				Profile::changed=false;
				list pathComponents = splitstring(  filename, "/");
				string base = select(pathComponents, size(pathComponents) -1, "default");
				UI::ChangeWidget(`id(`key), `Label, sformat(_("Fi&le: %1"), base));
			    }
			    else
			    {
				UI::WarningPopup(_("An error occured while saving the file."));
			    }
			}
		    }
		    else if (ret == `menu_source) // Show SOURCE
		    {
			y2milestone("Showing source...");
			Profile::Prepare();
			string source = XML::YCPToXMLString(`profile, Profile::current);
			UI::ReplaceWidget(`id(`rep_button_box), `VSpacing(0.6));

		   
			term sourceView =
			    `RichText( `id(`class_source ),
				       `opt(`plainText),
				       source
				       );
			Wizard::SetContents(_("Source"),
					    sourceView , "", true , true);
			tree_item = "System"; 		    		    
		    }
		    else if ( ret == `menu_tree) {
			tree_item = UI::QueryWidget(`id(`key), `CurrentItem);
			if (tree_item == nil)
			{
			    tree_item = "System"; 
			}
		    }
		    else if (ret == `menu_new) // NEW
		    {
			Profile::Reset();
			AutoinstConfig::currentFile = "";
			UI::ChangeWidget(`id(`key), `Label, sformat(_("Fi&le: %1"), "Untitled"));
		    	
		    }		
		
		}

	    } until ( ret == `exit || ret == `cancel || ret == `back );

	Wizard::RestoreHelp("");
	Wizard::RestoreScreenShotName ();
	return ret;
    
    }
}
