/**
 * File:   	conftree.ycp
 * Module: 	Autoinstall
 * Summary: 	This module handles the configuration for auto-installation
 * Authors: 	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{

    textdomain "autoinst";
    import "HTML";
    import "Call";
    include "autoinstall/readconfig.ycp";

    
    /**
     * Create a list to be used with the table widget
     * @param tree data
     * @return list
     */

    global define CreateTableList( list MenuTreeData)
    ``{
	list menu_options = maplist(`e, MenuTreeData,
	``{
	    if ((e["children"]:[]>0))
	    {
		list childrenlist = CreateTableList(lookup(e,"children",[]));
		return `item(`id(e["entry"]:""), e["title"]:"",false, childrenlist);
	    }
	    else
	    {
		return `item(`id(e["entry"]:""),e["title"]:"", false);
	    }
	});
	return menu_options;
    }

    global define content_dialog(map mod, any settings) ``{
	string summary =  Call::Function(clientName, ["Summary", settings]);
	string caption = d["Name"]:"Configurtion";
	string buttonLabel = d["Helptext"]:"Configure";
	term contents =
	    `VBox(
		  `VSpacing(1),
		  `RichText( `id(`summary), summary),
		  `VSpacing(0.5),
		  `HBox(
			// push button label
			`PushButton(`id(`configure), _("Configur&e") ),
			`HStretch(),
			// push button label
			`PushButton(`id(`reset), _("Reset Confi&guration"))
			),
		  `VSpacing(1)
		  );
	// caption of lan auto configuration
	Wizard::SetContents(
			    Translate(caption),
			    contents, "", true, true);
    }

    global define module_contents(string clientName, map d, any settings ) ``{
	content_dialog(d,settings);
	any ret= nil;
	repeat {
	    ret = UI::UserInput();
	    if(ret == `configure)
	    {
		any seq = Call::Function(clientName, ["Change", settings]);
		if (seq == `next || seq == `finish)
		{
		    settings = Call::Function(clientName, ["Result", $[]]);
		}
		y2milestone("settings: %1", settings);
		content_dialog(d,settings);
	    }
	    else if( ret == `reset)
	    {
		Call::Function(clientName, ["Reset", $[]]);
		content_dialog(d, $[]);
	    }
	    y2milestone("return %1", ret);
	} until (ret == `back ||  ret == `abort ||  ret == `next || ret ==`key);

	return [ ret, settings];
    }



    
    /**
     * Menu interface
     */
    global define symbol ConfTree()
	``{
	Wizard::SetScreenShotName ("autoyast-conftree");
	include "autoinstall/io.ycp";
	include "autoinstall/help.ycp";	


	list menu_options = CreateTableList(AIConfig::MenuTreeData);


	UI::ReplaceWidget(`id(`helpSpace) , `VBox(`Tree( `id(`key),  `opt(`notify,`vstretch), _("Opt&ions"), menu_options), `VSpacing(1)));
	// Wizard::ReplaceAbortButton(`Empty());

	UI::ChangeWidget(`id(`next), `Label, AcceptButtonLabel());
	string tree_item = "System";
	any ret = `key;
	any func_ret = "";

	repeat {
	    if (size(AIConfig::GroupMap) == 0)
	    {
		UI::ErrorPopup(_("Error while reading configuration data"));
		ret = `back;
		break;
	    }
	    if (haskey(AIConfig::GroupMap, tree_item))
	    {
		string html = "";
		foreach(`k,`v, AIConfig::ModuleMap, ``{
		    if (v["Group"]:"" == tree_item)
		    {						
			// html = html + HTML::Heading( HTML::Link(Translate(v["Name"]:""),k));
			// html = html + HTML::Para(Translate(v["Helptext"]:""));			
			html = html + HTML::Heading( HTML::Link(ReadKey(v["Textdomain"]:"", "Name", v), k));
			html = html + HTML::Para(ReadKey(v["Textdomain"]:"", "Helptext", v));
		    }
		});

		if (html == "")
		{
		    html = HTML::Heading(_("No modules available in this group."));
		}
		term contents = `RichText(html);

		Wizard::SetContents(_("Available modules"),
				    contents, "", true , true);

		while ( true )
		{
		    ret = Wizard::UserInput();
		    y2milestone("INPUT: %1", ret);
		    if (ret == `key)
		    {
			tree_item = UI::QueryWidget(`id(`key), `CurrentItem);
			break;
		    }
		    else if (ret == `next || ret == `back || ret == `abort)
		    {
			break;
		    }
		    else
		    {
			tree_item = ret;
			break;
		    }

		}

	    }
	 
	    foreach(`p,`d, AIConfig::ModuleMap, ``{
		// y2milestone("Checking data from %1: %2", p, d );
		if (tree_item == p) {
		    // Set resource name, if not using default value

		    string resource = "";		    
		    if (haskey(d,"AutoinstResource"))
		    {
			resource = d["AutoinstResource"]:"unknown";
		    }
		    else
		    {
			resource = p;
		    }

		    string module_auto = "";
		    // determine name of client, if not default name
		    if (haskey(d,"AutoClient"))
		    {
			module_auto = d["AutoClient"]:"none";
		    }
		    else
		    {
			module_auto = sformat("%1_auto", p);
		    }
		    list result = [];
		    if (d["AutoinstDataType"]:"map" == "map") {

			if (d["AutoinstPath"]:"configure" == "install")
			{
			    result = module_contents(module_auto, d, Profile::Install[resource]:$[]);			    
			}
			else
			{
			    result = module_contents(module_auto, d, Profile::Configure[resource]:$[]);			    
			}
			ret = select(result,0,`none);
			map data = select(result,1,$[]);			


			if (d["AutoinstPath"]:"configure" == "install")
			{			    
			    if (data!=eval(Profile::Install[resource]:$[]))
			    {				
				Profile::changed = true;
			    }
			    Profile::Install[resource] =  data;
			}
			else
			{
			    if (data!=eval(Profile::Configure[resource]:$[]))
			    {
				Profile::changed = true;
			    }	
			    Profile::Configure[resource] =  data;
			}
			y2debug("New data for %1: %2", resource, data);
		    } else {

			if (d["AutoinstPath"]:"configure" == "install")
			{
			    result = CallModule(module_auto, [Profile::Install[resource]:[]]);
			}
			else
			{
			    result = CallModule(module_auto, [Profile::Configure[resource]:[]]);
			}

			list data = select(result,1,[]);
			ret = select(result,0,`empty);


			if (d["AutoinstPath"]:"configure" == "install")
			{
			    if (data!=Profile::Install[resource]:[])
			    {				
				Profile::changed = true;
			    }
			    Profile::Install[resource] =  data;
			}
			else
			{
			    if (data != Profile::Configure[resource]:[])
			    {				
				Profile::changed = true;
			    }
			    Profile::Configure[resource] =  data;
			}
			y2debug("New data for %1: %2", resource, data);
		    }



		}
	    });

	    if (ret == `key)
	    {
		tree_item = UI::QueryWidget(`id(`key), `CurrentItem);
		if (tree_item == nil)
		    tree_item = "Hardware";		
	    }
	    if (ret  == nil)
	    {
		UI::ErrorPopup(_("Error while reading configuration data"));
		ret = `back;
		break;
	    }	    

	} until ( ret == `next || ret == `back ||  (ret == `abort && UI::ReallyAbortPopup (Profile::changed)));

	UI::ChangeWidget(`id(`next), `Label, NextButtonLabel());
	Wizard::RestoreHelp("");
	Wizard::RestoreAbortButton();
	Wizard::RestoreScreenShotName ();
	if (ret != `back && ret != `abort)
	{
	    return ct;
	}
	else
	{
	    return ret;
	}
    }
}
