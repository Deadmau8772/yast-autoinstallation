/**
 * File:
 *   include/autoinstall/lvm.ycp
 *
 * Package:
 *   Autoinstallation
 *
 * Summary:
 *   LVM routines
 *
 * Authors:
 *   Anas Nashif < nashif@suse.de>
 *
 * $Id$
 *
 */

{

    /**
     * Create the modification map
     * @param string volume group
     * @param string physical volume
     * @return void
     */
    global define CreateModifyMap(string vg, string pv)
	``{

	include "partitioning/lvm_ui_lib.ycp";
	include "partitioning/lvm_ui_dialogs.ycp";
	include "partitioning/lvm_lib.ycp";
	include "partitioning/lvm_pv_lib.ycp";
	include "partitioning/lvm_lv_lib.ycp";

	boolean vgConfigured	= false;
	map modify_targets	= Storage::GetModifyTargets();
	y2milestone("Read modify_targets from Storage module: %1", modify_targets);
	foreach(`k,`v, modify_targets, ``{
	    if (v["type"]:"" == "create_vg" && v["vgname"]:"" == vg) {
		vgConfigured = true;
	    }
	});
	
	map vgroup 		= AutoInstall::LvmMap[vg]:$[];
	integer pesize		= pesize_str_to_byte( lookup( vgroup, "pesize", "4M" ));
	list vgs 		= get_vgs(Storage::GetTargetMap());
	y2milestone("VGs: %1", vgs);
	
	if (!contains(vgs,vg) && !vgConfigured) {
	    map new_create_vg = $[
				  "use_module" : "lvm_ll",
				  "type"       : "create_vg",
				  "vgname"     : vg,
				  "pesize"     : pesize,
				  "devices"    : [pv],
				  "order"      : 2
	    ];

	    modify_targets = addTargetModification( modify_targets, new_create_vg );
	}
	else
	{
	    modify_targets = mapmap(`k,`v, modify_targets, ``{
		if (v["type"]:"" == "create_vg" && v["vgname"]:"" == vg) {
		    list devices = v["devices"]:[];
		    if (!contains(devices, pv)) {
			devices = add(devices, pv);
			v["devices"] = devices;
		    }
		    
		}
		return ([k,v]);	
	    });
	    
	}
	
	map new_create_pv = $[
			      "use_module" : "lvm_ll",
			      "type"       : "create_pv",
			      //   "vgname"     : vg,
			      "device"     : pv,
			      "order"	   : 1
	];
	modify_targets = addTargetModification( modify_targets, new_create_pv );	    
	

	y2milestone("modify_targets: %1", modify_targets);
	
	Storage::SetModifyTargets( modify_targets );
	return;
    }



    /**
     * Create LVM map in autoinstallation mode
     * @return boolean
     */
    global define boolean CreateAutoLvmMap(string lvm_group)``{

	include "partitioning/lvm_ui_lib.ycp";

	integer pesize      = 0;

	if (AutoInstall::LVM == [])
	    return false;

	list lvs = get_lv_names(Storage::GetTargetMap(), lvm_group );
	map     modify_targets	= Storage::GetModifyTargets();
	list region = [0,0];
	map vg = AutoInstall::LvmMap[lvm_group]:$[];
	list part = vg["logical_volumes"]:[];

	pesize     = pesize_str_to_byte( lookup( vg, "pesize", "4M" ));
	map new_volume = $[
			   "name"      : lvm_group,
			   "cyl_count" : 0,
			   "cyl_size"  : pesize,
			   "is_lvm_vg" : true,
			   "partitions": []
	];
	list new_partitions = maplist(map lv, part, ``{

	    integer lv_size = kmgt_str_to_byte(lv["lv_size"]:"");
	    if (pesize == 0 ) {
		pesize = 1;
	    }

	    integer virtual_cyl_end   = lv_size / pesize;
	    region = [0, virtual_cyl_end ];
	    integer bytes_of_part = 0;
	    integer cyl_size   = pesize;
	    integer nb_cyl = select (region, 1, 0 );
	    bytes_of_part =  ( nb_cyl ) * cyl_size;
	    if (!contains(lvs, lv["lv_name"]:""))
	    {
		map new_create_lv = $[
			        "use_module" : "lvm_ll",
			        "type"       : "create_lv",
			        "name"       : lookup(lv, "lv_name", ""),
			        "size"       : bytes_of_part,
				"vgname"     : lvm_group,
			        "stripes"    : 1,
				"order"	     : 3
		];

		modify_targets = addTargetModification( modify_targets, new_create_lv );
	    }
	    return ($[
			      "create"	: true,
			      "fs_options" : $[] ,
			      "use_module" : "lvm_ll",
			      "fsid"   : 142,
			      "fstype" : "LV",
			      "nr"     : lookup(lv, "lv_name", ""),
			      "ori_nr"	: lookup(lv, "lv_name", ""),
			      "region" : [0, virtual_cyl_end ],
			      "size_bytes":  bytes_of_part,
			      "mount"  : lookup( lv, "lv_mount", ""),
			      "used_fs": StringFS2Symbol(lookup(lv, "lv_fs","ext2")),
			      "format" : lookup( lv, "lv_format" , true),
			      "crypt_fs" : lookup( lv, "lv_crypt", false ),
			      "crypt_key":"",
			      "type"   :`lvm
	    ]);
	});
	Storage::SetModifyTargets( modify_targets );
	new_volume = change(new_volume, "partitions", new_partitions);
	AutoInstall::LvmVolumes = add(AutoInstall::LvmVolumes, "/dev/" + lvm_group, new_volume);

	y2milestone("LVM: %1", AutoInstall::LvmVolumes);

	return true;
    }


}
