/**
 * File:	include/autoinstall/packageMgmt.ycp
 * Package:	Autoinstallation Configuration System
 * Summary:	Package Management
 * Authors:	Anas Nashif<nashif@suse.de>
 *
 * $Id$
 */

{
    textdomain "autoinst";

   
    /**
     * Compute packages needed for autoinstallation
     * @return list packages
     */

    global define list autoinstPackages(list packageList, string kernel )
	``{
	
	map configure = AIConfig::Profile["configure"]:$[];
	list packages = [];

	packages = union (packages, packageList);

	// In autoinst mode, a kernel might be external and not available
	// in common.pkd
	if (size(kernel)==0)
	{
	    packages =add (packages, "k_deflt");
	}

	if (haskey(configure, "nis")) {
		map nis = configure["nis"]:$[];
		if (nis["start_nis"]:false)
			packages = add(packages, "ypbind");
		if (nis["start_autofs"]:false)
			packages = add(packages, "autofs");
	}

	if (haskey(configure, "ldapclient")) {
		map ldapclient = configure["ldapclient"]:$[];
		if (ldapclient["start_ldapclient"]:false)
			packages = union(packages, ["pam_ldap","nss_ldap"]);
	}


	if (haskey(configure, "inetd")) {
		map inetd = configure["inetd"]:$[];
		if (inetd["start_inetd"]:false)
			packages = add(packages, "inetd");
	}

	if (haskey(configure, "nisplus")) {
		map nisplus = configure["nisplus"]:$[];
		if (nisplus["start_nisplus"]:false)
			packages = add(packages, "nis-utils");
	}
	if (haskey(configure, "mail")) {
		map mail = configure["mail"]:$[];
		if (mail["mta"]:`other == `postfix)
		{
			packages = add(packages, "postfix");
			if (mail["use_amavis"]:false)
				packages = add(packages, "amavis-postfix");
		}
		else if (mail["mta"]:`other == `sendmail)
		{
			packages = add(packages, "sendmail");
			if (mail["use_amavis"]:false)
				packages = add(packages, "amavis-sendmail");
		}
	}
	y2milestone("package list needed during auto-installation: %1", packages);
	return packages;
    }


    /**
     * Set packages
     */
    
    global define boolean setPackages() ``{
	import "AIConfig";

	map _prof = AIConfig::Profile;

	map _conf = _prof["install"]:$[];
	map _soft = _conf["software"]:$[];

	string base = _soft["base"]:"";
	list addons = _soft["addons"]:[];
	list packs  = _soft["packages"]:[];
	string kernel = _soft["kernel"]:"";
	
	boolean src = AIServer::initSource();
	if (src)
	{
	    if (base!="")
	    {
		Pkg::SetSelection(base);
	    }
	    else
	    {
		Pkg::SetSelection("Minimal");
	    }
	
	    // Addons
	    if (size(addons) > 0 )
	    {
		foreach(`s, addons, ``{
		    Pkg::SetSelection(s);
		});
	    }

	    Pkg::DoProvide(autoinstPackages(packs, kernel));
	    Pkg::PkgSolve();
	    return (Pkg::ActivateSelections());
	}
	return false;
    }
    
 
    /**
     * ISO size dialog
     *
     */
    global define isoSizeDialog(integer expectedSize, string filename)``{
	
	UI::OpenDialog(
		       `VBox(
			     `Heading(_("Please wait while the ISO file is created.")),
			     `DownloadProgress(AIServer::isoFile, filename, expectedSize - 1000000),
			     `HSpacing(50), // force width
			     `PushButton(`opt(`default), CloseButtonLabel())
			     )
		       );
	UI::UserInput();
	UI::CloseDialog();
	return;
    }

    
    /**
     * ISO creation Dialog
     *
     */
    global define isoDialog()``{
	
	AIServer::nojoliet = true;
	
	term contents = `Top(
			     `VBox(
				   `VSquash(
					    `HBox(
						  `TextEntry(`id(`susedir), _("&SuSE Package Directory:"), AIServer::PackageRep),
						  `VBox(
							`VSpacing(),
							`Bottom(`PushButton(`id(`opensusedir), _("Select &Directory")))
							)
						  )
					    ),
				   `VSquash(
					    `TextEntry(`id(`dest), _("&Destination"), "")
					    )				   
				   )
			     );
	
	string caption = _("Create Custom CD");
	string help = _("<P>Enter the location of your copied CDs in
the <em>SuSE Package Directory</em>
field. This directory must contain the <b>suse</b> subdirectory, which contains
the RPMS of one or all copied CDs.</p>
");

	help = help + _("<p>In the <em>Destination</em>, enter the name of the ISO file to create, such as
<b>/tmp/suse.iso</b></p>
");

	help = help + _("<p>Pressing <b>Next</b> will create the directory structure
needed to create the ISO image.</p>
");

	
  
	Wizard::SetContentsButtons (caption,
				    contents,
				    help,
				    BackButtonLabel (),
				    NextButtonLabel ());

	any ret = nil;
	repeat
	    {
		ret = UI::UserInput();

		if (ret == `next)
		{		    
		    AIServer::sourceDir = UI::QueryWidget(`id(`susedir), `Value);
		    string f = UI::QueryWidget(`id(`dest), `Value);
		   
		    if (   f == "" || f == nil)
		    {
			UI::ErrorPopup(invalidFileName());
			continue;
		    }
		    AIServer::isoFile = f;
		}

	    }  until (ret == `next || ret == `back || ret == `abort);    
	return ret;
    }

    /**
     * Create ISO
     *
     */
    global define createISO() ``{

	import "Progress";
	if (!setPackages())
	{
	    return `next;
	}

	
	
	string help = UI(_("<P>
Please wait while the directory structure for the new ISO file is created.
</P>
"));
	help = help + _("<p>Press <b>Next</b> to create the ISO file.</p>");


	    
	list progress_stages =
	    [
	     _("Create skeleton with essential files"),
	     _("Saving Control File"),
	     _("Copy selected packages")
	     ];

	list progress_descriptions =
	    [
	     _("Creating skeleton with essential files"),
	     _("Saving control file"),
	     _("Copying selected packages")	   
	     ];

	
	list selPacs = Pkg::GetPackages (`selected , false);
		
	y2milestone ("install %1", selPacs);

	
	Progress::New(
		      _("Creating ISO image"),
		      "",     // progress_title
		      size( progress_stages ) + size(selPacs) + 1,	// progress bar length
		      progress_stages,
		      progress_descriptions,
		      help );

	
	Progress::NextStage();
	AIServer::createISOSkeleton();

	Progress::NextStage();
	
	string cpCmd = sformat("cp /usr/share/autoinstall/isolinux.cfg %1/skeleton/boot/loader", AIServer::skelDir);
	SCR::Execute (.target.bash, cpCmd);
	
	Progress::NextStep();
	
	string location = sformat("%1/skeleton/autoinst.xml", AIServer::skelDir);
	AIConfig::SaveProfile(location);
	
	Progress::NextStage();	
	
	integer i = 0;
	




	
	string datadir = AIServer::productData["datadir"]:"./suse";
	y2milestone ("datadir %1", datadir);	
	foreach(`pac, selPacs, ``{
	    // y2milestone("package: %1", pac);
	    list tok = splitstring(pac, " ");
	    //  "yast2-security 2.6.8 31 noarch";
	    string pacname = tok[0]:"error" + "-" + tok[1]:"1.0"  + "-" + tok[2]:"0" + "." + tok[3]:"noarch" + ".rpm";
	    string location = tok[3]:"noarch" + "/" + pacname;
	    
	    string localpath =  AIServer::PackageRep + "/" + datadir + "/" + location;	    	  
	    integer pacsize = SCR::Read(.target.size, localpath);
	    if (pacsize!=-1)
	    {
		Progress::Title(sformat(_("Copying %1"),  pacname));
		Progress::NextStep();
		string dir = AIServer::skelDir + "/skeleton/" + datadir + "/" + tok[3]:"noarch";
		
		if (size(SCR::Read(.target.dir, dir)) == nil )
		{
		    SCR::Execute(.target.mkdir , dir);
		}
		
		string cpCmd = sformat("cp %1 %2/skeleton/%3/%4", localpath, AIServer::skelDir, datadir, location);
		any ret = SCR::Execute (.target.bash, cpCmd);			
	    }
	  
	  
	});
	

	Progress::Title(_("ISO image directory ready"));
	Progress::Finish();
	UI::ChangeWidget(`id(`next), `Enabled, true);	

	any ret  = nil;

	repeat
	    {
		ret = UI::UserInput();	
		if (ret == `next)
		{
		    string mkisofscmd =	AIServer::createISOCmd(AIServer::isoFile );
		    y2milestone("command: %1",  mkisofscmd );
		    
		    string du = lookup(SCR::Execute(.target.bash_output, sformat("du -s -b %1/skeleton | awk -F' ' ' { printf $1 }'", AIServer::skelDir )), "stdout", "");
		    integer fsSize = tointeger(du);
		    y2milestone("size: %1" , fsSize);
		    SCR::Execute (.target.bash_background,  mkisofscmd);
		    isoSizeDialog(fsSize, AIServer::isoFile);

		}
	
	    } until (ret == `next || ret == `back || ret == `abort);
	return ret;
    }



    
}
