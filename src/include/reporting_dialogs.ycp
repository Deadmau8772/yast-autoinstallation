/**
 * File:	include/autoinstall/report_dialogs.ycp
 * Summary:	Handle reporting behaviour
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */

{

global define symbol ReportingDialog()
    ``{
    map msg = Report::message_settings;
    map err = Report::error_settings;
    map war = Report::warning_settings;


    term contents =
	`Top(
	     `VBox(
		   `VSpacing(2),
		   `VSquash(
			    `VBox(
				  `Frame(_("Messages"),
					 `HBox(
					       `HWeight(35,`CheckBox(`id(`msgshow), _("Sho&w messages"), msg["show"]:true)),
					       `HWeight(35,`CheckBox(`id(`msglog), _("Lo&g messages"), msg["log"]:true)),
					       `HWeight(30,`VBox(
								 `VSpacing(),
								 `Bottom(`IntField(`id(`msgtime), _("&Time-out (in sec.)"), 0,100, msg["timeout"]:10))
								 )
							)
					       )
					 ),
				  `VSpacing(1),
				  `Frame(_("Warnings"),
					 `HBox(
					       `HWeight(35,`CheckBox(`id(`warshow), _("Sh&ow warnings"), war["show"]:true)),
					       `HWeight(35, `CheckBox(`id(`warlog), _("Log wa&rnings"), war["log"]:true)),
					       `HWeight(30,`VBox(
								 `VSpacing(),
								 `Bottom(`IntField(`id(`wartime), _("Time-out (in s&ec.)"), 0,100,war["timeout"]:10))
								 )
							)
					       )
					 ),
				  `VSpacing(1),
				  `Frame(_("Errors"),
					 `HBox(
					       `HWeight(35,`CheckBox(`id(`errshow), _("Show error&s"), err["show"]:true)),
					       `HWeight(35,`CheckBox(`id(`errlog), _("&Log errors"), err["log"]:true)),
					       `HWeight(30, `VBox(
								  `VSpacing(),
								  `Bottom(`IntField(`id(`errtime), _("Time-o&ut (in sec.)"), 0,100,err["timeout"]:10))
								  )
							)
					       )
					 )
				  )
			    )
		   )
	     );

    string help_text = _("<p>Depending on your experience, you can skip, log, and show (with time-out)
installation messages.</p> 
");

    help_text = help_text + _("<p>It is recommended to show all  <b>messages</b> with time-out.
Warnings can be skipped in some places, but should not be ignored.</p>
");

    UI::ChangeWidget(`id(`next), `Label, FinishButtonLabel());
    Wizard::SetContents(_("Messages and Logging"),
			contents, help_text, true , true);

    any ret = nil;
    repeat {
	ret = UI::UserInput();
	if ( ret ==`next)
	{
	    msg["show"] = UI::QueryWidget(`id(`msgshow), `Value);
	    msg["log"] = UI::QueryWidget(`id(`msglog), `Value);
	    msg["timeout"] = UI::QueryWidget(`id(`msgtime), `Value);
	    err["show"] =UI::QueryWidget(`id(`errshow), `Value);
	    err["log"] = UI::QueryWidget(`id(`errlog), `Value);
	    err["timeout"] = UI::QueryWidget(`id(`errtime), `Value);
	    war["show"] = UI::QueryWidget(`id(`warshow), `Value);
	    war["log"] = UI::QueryWidget(`id(`warlog), `Value);
	    war["timeout"] = UI::QueryWidget(`id(`wartime), `Value);
	}
    } until (ret == `next || ret == `back);

	Report::Import($["messages":msg, "errors":err, "warnings":war]);
    return ret;
}

}
