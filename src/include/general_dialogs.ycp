/**
 * File:	include/autoinstall/general_dialogs.ycp
 * Module:	Environment
 * Summary:	Handle environment data
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{
    textdomain "autoinst";

    global define  symbol GeneralOptions() ``{

	string timezone = eval(AIGeneral::timezone);
	string keyboard = eval(AIGeneral::keyboard);
	string clock = eval(AIGeneral::hwclock);
	string mouse = eval(AIGeneral::mouse);
	string language = eval(AIGeneral::language);

	term contents =
	    `Top(
		 `VBox(
		       `Left(GetLanguageTerm(language)),
		       `Left(ConfigureKeyboard(keyboard)),
		       `Left(ConfigureMouse(mouse)),
		       `Left(GetTimeZoneTerm(timezone)),
		       `Left(
			     `ComboBox(`id(`hwclock), _("&Hardware clock set to"),
				       [
					// ComboBox entry: hardware clock set to local time
					`item(`id(`hwclock_localtime), _("local time"), (clock == "localtime") ),

					// ComboBox entry: hardware clock set GMT
					`item(`id(`hwclock_gmt ),      _("GMT"), (clock == "GMT") )
					]

				       )
			     )
		       )
		 );


	string help_text = _("<p>This part of the configuration is required for
the auto-installation. Please select the values matching
your hardware and preferences and press <b>next</b> to continue.</p>");



	Wizard::ReplaceAbortButton(`Empty());
	UI::ChangeWidget(`id(`next), `Label, FinishButtonLabel());
	Wizard::SetContents(_("Environment and basic Options"),
			    contents, help_text, true , true);

	any ret = nil;
	repeat {
	    ret = UI::UserInput();
	    if (ret == `next) {
		language= UI::QueryWidget(`id(`language), `Value);
		timezone= UI::QueryWidget(`id(`timezone), `Value);
		keyboard= UI::QueryWidget(`id(`keyboard), `Value);


		symbol hwclock = UI::QueryWidget (`id (`hwclock), `Value);
		if (hwclock == `hwclock_localtime)
		{
		    clock= "localtime";
		}
		else
		{
		    clock = "GMT";
		}
		mouse = UI::QueryWidget(`id(`mouse), `Value);

		AIGeneral::Set($[
					  "mouse":mouse,
					  "keyboard": keyboard,
					  "timezone":timezone,
					  "hwclock":clock,
					  "language":language]
					);
	    }
	} until (ret == `next || ret == `back || ret ==`abort);

	return ret;
    }

    /**
     * Language
     *
     */
    global define GetLanguageTerm(string language)
    ``{
	boolean use_utf8 = true;		// utf8 is default

	if (!lookup (UI::GetDisplayInfo(), "HasFullUtf8Support", true))
	{
	    use_utf8 = false;		// fallback to ascii
	}
	if (language==""){
	    language = Language::language;
	}
	map languageselsort = mapmap(`lang_code, `lang_info, Language::Selection(),
				``([lang_info[1]:"",	// ASCII value is the key
				    [lang_info[use_utf8?0:1]:"", lang_code]
				   ]));

	term languagesel =
	    `ComboBox(`id(`language), `opt(`notify), _("Lan&guage:"),
			  maplist (`name, `codelist, languageselsort,
				   ``(`item(`id(codelist[1]:""), codelist[0]:"", (language == codelist[1]:"")))));

	return (languagesel);
    }


    /**
     * Keyboards
     *
     */
    global define ConfigureKeyboard(string keyboard)
    ``{
	if (keyboard=="") {
	    keyboard = Keyboard::GetKeyboardForLanguage( Language::language, "en_US");
	    Keyboard::current_kbd=keyboard;
	}


	term keyboardsel = `dummy();
	list keyboardlist_by_translation =
	    maplist( string keyboard_code, string keyboard_name, Keyboard::Selection(),
		     ``{
			 return `item(`id( keyboard_code ),
				      keyboard_name,
				      Keyboard::current_kbd == keyboard_code);
		     } );

	keyboardsel = `ComboBox( `id( `keyboard ), `opt( `notify ),
				     // title for selection box 'keyboard layout'
				     _("&Keyboard layout"),
				     keyboardlist_by_translation);
	return (keyboardsel);
	}


    /**
     * Timezone
     *
     */

    global define GetTimeZoneTerm(string timezone) ``{

	if (timezone=="") {
	    import "Misc";
	    timezone         = Misc::SysconfigRead(.sysconfig.clock.TIMEZONE, timezone );
	    if (timezone=="")
		timezone = Timezone::GetTimezoneForLanguage(Language::language, "en_US");
	}
	// build up timezone selection box

	map zonemap = Timezone::Selection();

	term timezonesel = `ComboBox( `id( `timezone ), `opt( `notify ),
			   // title for selection box 'timezone'
			   _("Time &Zone"),
			   maplist( `name, `key, zonemap,
				    ``{
					return `item( `id( key ), name, key == timezone );
				    })
				      );
	return (timezonesel);
    }


    /**
     * Mouse
     *
     */

    global define ConfigureMouse(string mouse)
    ``{
	list mouselist = maplist (string mouse_code, string mouse_name, Mouse::Selection (),
		 ``{
		     return `item(`id (mouse_code),
				  mouse_name,
				  mouse == mouse_code);
		 });
	mouselist = add(mouselist, `item(`id ("probe"), _("Autoprobe"), mouse == "probe"));

	term contents =
		`ComboBox(`id(`mouse),
			  _("&Mouse"),
			  mouselist
			  );
	return contents;
    }


}
