/**
 * File:	include/autoinstall/general_settings.ycp
 * Package:	Auto-installation
 * Summary:	General Settings
 * Author:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{
    /**
     * Main dialog
     */
    
    global define  symbol GeneralOptions() ``{

	map settings = AIgeneral::general;
	
	// Clock
	map _clock 		= settings["clock"]:$[];
	string timezone 	= _clock["timezone"]:"";
	string hwclock 		= _clock["hwclock"]:"";

	// Keyboard
	map _keyboard 		=  settings["keyboard"]:$[];
	string keyboard 	= _keyboard["keymap"]:"";

	map _mouse 		= settings["mouse"]:$[];
	string mouse 		= _mouse["id"]:"";

	
	string language = settings["language"]:"";

	map _mode 		= settings["mode"]:$[];
	boolean reboot 		= _mode["reboot"]:false;
	boolean forceboot	= _mode["forceboot"]:false;
	boolean debugboot 	= _mode["interactive_boot"]:false;
	boolean confirm 	= _mode["confirm"]:false;
	
	term contents =
	    `Top(
		 `VBox(
		       `Left(GetLanguageTerm(language)),
		       `Left(ConfigureKeyboard(keyboard)),
		       `Left(ConfigureMouse(mouse)),
		       `Left(GetTimeZoneTerm(timezone)),
		       `Left(
			     `ComboBox(`id(`hwclock), _("&Hardware clock set to"),
				       [
					// ComboBox entry: hardware clock set to local time
					`item(`id(`hwclock_empty), "", (hwclock == "") ),
					
					// ComboBox entry: hardware clock set to local time
					`item(`id(`hwclock_localtime), _("Local time"), (hwclock == "localtime") ),

					// ComboBox entry: hardware clock set GMT
					`item(`id(`hwclock_gmt ),      _("GMT"),  (hwclock == "GMT")  )
					]

				       )
			     ),
		       `VSpacing(1),
		       `Left(`CheckBox(`id(`reboot), _("Reboot after installation"), reboot)),
		       `Left(`CheckBox(`id(`forceboot), _("Do not reboot after installation even if the system requires it"), forceboot)),
		       `Left(`CheckBox(`id(`confirm), _("Confirm installation?"), confirm)),
		       `Left(`CheckBox(`id(`debugboot), _("Confirm every step of the boot process?"), debugboot))
		       
		       )
		 );


	string help_text = _("<p>This part of the configuration is required for
the autoinstallation. Select the values matching
your hardware and preferences then press <b>Next</b> to continue.</p>
");


	
	
	
	Wizard::SetContents(_("Environment and Basic Options"),
			    contents, help_text, true , true);

	Wizard::ReplaceAbortButton(`Empty());

	any ret = nil;
	repeat {
	    ret = UI::UserInput();
	    if (ret == `next)
	    {
		language= UI::QueryWidget(`id(`language), `Value);
		timezone= UI::QueryWidget(`id(`timezone), `Value);
		keyboard= UI::QueryWidget(`id(`keyboard), `Value);

		symbol hardwareclock = UI::QueryWidget (`id (`hwclock), `Value);
		if (hardwareclock == `hwclock_localtime)		    
		    hwclock = "localtime";		
		else if ( hardwareclock == `hwclock_gmt)
		    hwclock = "GMT";
		
		
		mouse = UI::QueryWidget(`id(`mouse), `Value);
		map m = $[];
	

		reboot = UI::QueryWidget(`id(`reboot), `Value);
		forceboot = UI::QueryWidget(`id(`forceboot), `Value);
		debugboot = UI::QueryWidget(`id(`debugboot), `Value);
		confirm = UI::QueryWidget(`id(`confirm), `Value);
		if (reboot && forceboot) {
		    UI::WarningPopup(_("You cannot request rebooting the machine and
force it not to boot at the same time.
"));
		    continue;
		}
		AIgeneral::general = $[
				       "mouse": $["id": mouse],
				       "keyboard": $["keymap":keyboard],
				       "clock": $[
						  "timezone":timezone,
						  "hwclock": hwclock
				       ],
				       "language":language,
				       "mode": $[
						 "reboot":reboot,
						 "forceboot":forceboot,
						 "confirm":confirm,
						 "interactive_boot":debugboot
				       ]
		];
	    }	    
	} until (ret == `next || ret == `back);

	return ret;
    }

    /**
     * Language
     *
     */
    global define GetLanguageTerm(string language)
	``{
	boolean use_utf8 = true;		// utf8 is default

	if (!lookup (UI::GetDisplayInfo(), "HasFullUtf8Support", true))
	{
	    use_utf8 = false;		// fallback to ascii
	}
	if (language==""){
	    language = Language::language;
	}
	map languageselsort = mapmap(`lang_code, `lang_info, Language::Selection(),
				     ``([lang_info[1]:"",	// ASCII value is the key
					 [lang_info[use_utf8?0:1]:"", lang_code]
					 ]));

	term languagesel =
	    `ComboBox(`id(`language), `opt(`notify), _("Lan&guage:"),
		      maplist (`name, `codelist, languageselsort,
			       ``(`item(`id(codelist[1]:""), codelist[0]:"", (language == codelist[1]:"")))));

	return (languagesel);
    }


    /**
     * Keyboards
     *
     */
    global define ConfigureKeyboard(string keyboard)
	``{
	if (keyboard == "")
	{
	    keyboard = Keyboard::GetKeyboardForLanguage( Language::language, "en_US");
	    Keyboard::current_kbd=keyboard;
	}


	term keyboardsel = `dummy();
	list keyboardlist_by_translation =
	    maplist( string keyboard_code, string keyboard_name, Keyboard::Selection(),
		     ``{
			 return `item(`id( keyboard_code ),
				      keyboard_name,
				      Keyboard::current_kbd == keyboard_code);
		     } );

	keyboardsel = `ComboBox( `id( `keyboard ), `opt( `notify ),
				 // title for selection box 'keyboard layout'
				 _("&Keyboard layout"),
				 keyboardlist_by_translation);
	return (keyboardsel);
    }


    /**
     * Timezone
     *
     */

    global define GetTimeZoneTerm(string timezone) ``{

	if (timezone=="") {
	    import "Misc";
	    timezone         = Misc::SysconfigRead(.sysconfig.clock.TIMEZONE, timezone );
	    if (timezone=="")
	    {		
		timezone = Timezone::GetTimezoneForLanguage(Language::language, "en_US");
	    }
	}
	// build up timezone selection box

	map zonemap = Timezone::Selection();

	term timezonesel = `ComboBox( `id( `timezone ), `opt( `notify ),
				      // title for selection box 'timezone'
				      _("Time &Zone"),
				      maplist( `name, `key, zonemap,
					       ``{
						   return `item( `id( key ), name, key == timezone );
					       })
				      );
	return (timezonesel);
    }


    /**
     * Mouse
     *
     */

    global define ConfigureMouse(string mouse)
	``{
	list mouselist = maplist (string mouse_code, string mouse_name, Mouse::Selection (),
				  ``{
				      return `item(`id (mouse_code),
						   mouse_name,
						   mouse == mouse_code);
				  });
	mouselist = add(mouselist, `item(`id ("probe"), _("Autoprobe"), mouse == "probe"));

	term contents =
	    `ComboBox(`id(`mouse),
		      _("&Mouse"),
		      mouselist
		      );
	return contents;
    }




}
