/**
 * File:
 *	auth_dialogs.ycp
 *
 * Module:
 *	Athentication Dialogs
 *
 * Summary:
 *	This include handles authentication dialogs
 *
 * Authors:
 *	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{
    textdomain "autoinst";
    /**
     * Set root password and primary user account.
     *
     */
    global define Authentication()
	``{
	list old_users = eval(AIConfig::Users);
	map primaryUser = $[];
	map RootUser = $[];
	foreach(map user, AIConfig::Users,
		``{
	    if (user["username"]:"" == "root") {
		RootUser = user;
	    }
	    else  {
		primaryUser = user;
	    }
	});
	string username = "";

	term contents =
	    `Top(
		 `VBox(
		       `Frame(_("&Root Account"),
			      `VSquash(
				       `HBox(
					     `HWeight(40, `TextEntry( `id(`password), _("Root &password:"), RootUser["user_password"]:"")),
					     `HWeight(60,
						      `Left(
							    `Bottom(
								    `CheckBox(`id(`encrypted1), _("Password &encrypted"), RootUser["encrypted"]:false))
							    )
						      )
					     )
				       )
			      ),
		       `VSpacing(),
		       `Frame(_("&User Account"),
			      `VSquash(
				       `VBox(
					     `HBox(
						   `HWeight(40,`TextEntry( `id(`login), _("&User login:"), primaryUser["username"]:"")),

						   `HWeight(60,`Empty())
						   ),
					     `HBox(
						   `HWeight(40,`TextEntry( `id(`upassword), _("User pass&word:"), primaryUser["user_password"]:"")),
						   `HWeight(60,
							    `Left(
								  `Bottom(
									  `CheckBox(`id(`encrypted), _("Password encr&ypted"), primaryUser["encrypted"]:false))
								  )
							    )
						   )
					     )
				       )
			      )
		       )
		 );
	Wizard::SetContents(_("Authentication"),
			    contents, "", true, true);
	any ret = nil;
	boolean error = false;
	list predef_accounts = WFM::Read (.local.yast2, "accounts.ycp");
	string rpassword =  "";
	string upassword = "";
	boolean renc = false;
	boolean uenc = false;

	repeat {
	    ret = UI::UserInput();


	    if ((ret == `key || ret ==`next) && !error )
	    {
		rpassword = UI::QueryWidget(`id(`password), `Value);
		renc = UI::QueryWidget(`id(`encrypted1), `Value);

		if (size (rpassword) < 5 && size (rpassword) > 1)
		{
		    // explain how a password has to be formed
		    UI::MessagePopup(_("The password must have at least 5 characters.
Please try again.
  "));
		    UI::ChangeWidget(`id(`key), `CurrentItem, "auth");
		    error = true;
		    continue;
		}
		any ret2 = findfirstnotof( rpassword, "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ#* ,.;:._-+!$%&/|\?{[()]}" );

		if ( ret2 != nil )
		{
		    UI::MessagePopup(_("The password may only contain the following characters:\n 0..9, a..z, A..Z, and any of \"#* ,.;:._-+!$%&/|\?{[()]}\".\nPlease try again."));
		    error = true;
		    UI::ChangeWidget(`id(`key), `CurrentItem, "auth");
		    continue;
		}


		upassword = UI::QueryWidget(`id(`upassword), `Value);
		username = UI::QueryWidget(`id(`login), `Value);
		uenc = UI::QueryWidget(`id(`encrypted), `Value);

		string valid_logname_chars  = "0123456789abcdefghijklmnopqrstuvwxyz";
		string valid_password_chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ#* ,.;:._-+!$%&/|\?{[()]}";
		if  ( (size( username ) < 2 || size( username ) > 8 ) && username != "")
		{
		    UI::MessagePopup(_("The user name must be between 2 and 8 characters in length.
Please try again.
"));
		    error = true;
		    UI::ChangeWidget(`id(`key), `CurrentItem, "auth");
		    continue;
		}

		string firstchar = substring(username, 0, 1);

		if ( ( !(firstchar >= "a" && firstchar <= "z")
		       || nil != findfirstnotof( username, valid_logname_chars ) ) && username != "")
		{
		    UI::MessagePopup(_("The user name may contain only
lowercase letters and digits
and must begin with a letter.
Please try again.
"));
		    error = true;
		    UI::ChangeWidget(`id(`key), `CurrentItem, "auth");
		    continue;
		}

		// check username against passwd contents

		if ( contains( predef_accounts, username ))
		{
		    // Tell the user that the login he entered conflicts with
		    // predefined logins in the passwd file.
		    UI::MessagePopup(_("There login name you entered conflicts
with a predefined user name.

Please try a different one.
"));
		    continue;
		}

		if (size (upassword) < 5 && size (upassword) > 1)
		{
		    // explain how a password has to be formed
		    UI::MessagePopup(_("The password must have at least 5 characters.
Please try again.
  "));
		    UI::ChangeWidget(`id(`key), `CurrentItem, "auth");
		    error = true;
		    continue;
		}
		ret2 = findfirstnotof( upassword, "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ#* ,.;:._-+!$%&/|\?{[()]}" );

		if ( ret2 != nil )
		{
		    UI::MessagePopup(_("The password may only contain the following characters:\n 0..9, a..z, A..Z, and any of \"#* ,.;:._-+!$%&/|\?{[()]}\".\nPlease try again."));
		    error = true;
		    UI::ChangeWidget(`id(`key), `CurrentItem, "auth");
		    continue;
		}

	    } else if (ret == `help)
	    {
		UI::LongTextPopup (_("Help"), `RichText (helpTexts("auth")), 50, 15);
	    }
	    error = false;
	    if (rpassword!="")
	    {
		change(RootUser,"user_password", (!renc) ? crypt(rpassword) : rpassword);
		RootUser=add(RootUser,"encrypted",true);
		RootUser=add(RootUser,"username","root");
	    }
	    if (username!="" )
	    {
		change(primaryUser,"username", username);
		change(primaryUser,"user_password", (!uenc) ? crypt(upassword) : upassword);
		primaryUser=add(primaryUser,"encrypted",true);
	    }


	} until (ret == `key || ret == `next || ret == `back);

	// Root user
	if (rpassword!="")
	{
	    AIConfig::Users = filter(`u,AIConfig::Users,``(u["username"]:"" != "root"));
	    AIConfig::Users=add(AIConfig::Users,RootUser);

	}
	// Primary user
	if (upassword!="")
	{
	    AIConfig::Users = filter(`u,AIConfig::Users,``(u["username"]:"" != username));
	    AIConfig::Users=add(AIConfig::Users,primaryUser);
	}


	if (old_users != AIConfig::Users)
	    AIConfig::changed=true;

	return ret;

    }









}
