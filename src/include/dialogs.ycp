/**
 * File:	include/autoinstall/dialogs.ycp
 * Module:	Auto-Installation Configuration System
 * Summary:	This module handles the configuration for auto-installation
 * Authors:	Anas Nashif <nashif@suse.de>
 * $Id$
 */
{
    textdomain "autoinst";

    /**
     * Preferences Dialog
     *
     */
    global define Preferences()
	``{
	Wizard::SetScreenShotName ("autoyast-preferences");
	term contents =
	    `Top(
		 `VBox(
		       `VSquash(`HBox(
				      `TextEntry(`id(`repository), _("&Profile Repository:"), AIConfig::Repository),
				      `VBox(
					    `VSpacing(),
					    `Bottom(`PushButton(`id(`opendir), _("Select &Directory")))
					    )
				      )
				),

		       // `Left(`CheckBox(`id(`enable_classes), `opt(`notify), _("Use classes for multi-host configurations"), AIClass::enable)),

		       `VSquash(`HBox(

				      `TextEntry(`id(`classdir), _("&Class directory:"), AIClass::classDir),
				      `VBox(
					    `VSpacing(),
					    `Bottom(`PushButton(`id(`openclassdir), _("Select &Directory")))
					    )
				      )
				),
		       `VSquash(
				`HBox(
				      `TextEntry(`id(`susedir), _("&SuSE Package Directory:"), AIServer::PackageRep),
				      `VBox(
					    `VSpacing(),
					    `Bottom(`PushButton(`id(`opensusedir), _("Select &Directory")))
					    )
				      )
				)
		       )
		 );


	string help = _("<P>
Enter the directory where all <em>control files</em> should be stored in
the <b>Repository</b> field.</P>");

	help = help + _("<P>If you are using the classes feature
of Autoyast, also enter the class directory. This is where
all class files are stored</p>
");

	help = help + _("<P>The <b>Package repository</b> is where you have copied
the SuSE CDs. This directory must have a subdirectory called <b>suse</b> that
contains all the packages.</p>
");


	Wizard::SetContents(_("Preferences"),
			    contents, help , true, true);


	boolean changed = false;
	any ret = "";
	repeat {
	    ret = UI::UserInput();

	    string new_rep = UI::QueryWidget(`id(`repository), `Value);
	    string new_classdir = UI::QueryWidget(`id(`classdir), `Value);
	    string new_susedir = UI::QueryWidget(`id(`susedir), `Value);


	    if (ret ==`opendir)
	    {
		new_rep = PopupDir(AIConfig::Repository);	
		UI::ChangeWidget(`id(`repository), `Value, new_rep);
		continue;
	    }
	    else if (ret ==`openclassdir)
	    {
		new_classdir = PopupDir(AIClass::classDir);		
		UI::ChangeWidget(`id(`classdir), `Value, new_classdir);
		continue;
	    }
	    else if (ret ==`opensusedir)
	    {		
		new_susedir = PopupDir((AIServer::PackageRep == "") ? "/tmp" : AIServer::PackageRep);	
		UI::ChangeWidget(`id(`susedir), `Value, new_susedir );
		continue;
	    }
	    else if ( ret==`next)
	    {
		if (AIConfig::Repository != new_rep) {
		    changed = true;
		    AIConfig::Repository = new_rep;
		}
		if (AIClass::classDir != new_classdir) {
		    changed = true;
		    AIClass::classDir = new_classdir;
		}	   
		if ( AIServer::PackageRep!= new_susedir) {
		    changed = true;
		    AIServer::PackageRep = new_susedir;
		}
	    }
	   


	} until (ret == `next ||  ret == `back || (ret == `abort && UI::ReallyAbortPopup (AIConfig::changed)));
	Wizard::RestoreScreenShotName ();
	if (changed  ) {
	    AIConfig::Save();
	    AIClass::Save();
	    changed =false;
	}
	return ret;
    }




    /**
     * Generate control file list
     * @return file list
     */
    global define FileList(symbol type) ``{
	list files = [];
	string tabHeader = "";
	string caption = "";
	if (type == `ready)
	{
	    files = SCR::Read(.target.dir, AIConfig::Repository);
	    tabHeader = _("Control file");
	    caption = _("Current Profile: ");
	}
	else
	{
	    files = SCR::Read(.target.dir, AIConfig::TemplateRepository);
	    tabHeader = _("Control File Template");
	    caption = _("Current Template: ");
	}

	list xmlfiles = [];
	foreach(string file, files,
		``{
	    if (SCR::Read(.target.dir,  AIConfig::Repository + "/" + file) == nil)
	    {
		xmlfiles= add (xmlfiles,`item(`id(file), file));
	    }
	});

	term contents =
	    `VBox(
		  `Left(`HBox(
			      `Label(caption),
			      `Label(`id(`loaded), `opt(`outputField),  _("None                                                   "))
			      )
			),
		  `VSpacing(0.5),
		  `Table(`id(`table), `opt(`notify,`immediate), `header(tabHeader),
			 xmlfiles
			 ),

		  `VSpacing(0.5),
		  `HBox(
			`RadioButtonGroup(`id(`type),`opt(`notify),
					  `HBox(
						`RadioButton(`id(`ready),`opt(`notify), _("Installable Confi&gurations"), (type == `ready)),
						`RadioButton(`id(`templates),`opt(`notify), _("Tem&plates"),  (type == `templates))
						)
					  )
			),
		  `VBox(
			`HBox(
			      `ReplacePoint(`id(`rpnew), `PushButton(`id(`new), NewButtonLabel())),
			      `PushButton(`id(`open), EditButtonLabel()),
			      `PushButton(`id(`delete), DeleteButtonLabel())
			      )

			),
		  `VSpacing(0.5)
		  );
	return contents;
    }




   /**
    * Dialog for saving control files
    * @return dialog contents
    */

    global define FileListSave() ``{
	string source = "";
	term contents =
	    `VBox(
		  `Left(`HBox(
			      `Label(_("Current Profile: ")),
			      `Label(`id(`loaded), `opt(`outputField), _("None                                            "))
			      )
			),
		  `VSpacing(0.5),
		  `RichText( `id(`class_source ), `opt(`plainText),
			     source
			     ),

		  `VSpacing(0.5),
		  `VBox(

			`HBox(
			      `PushButton(`id(`saveprofile), _("&Save")),
			      `PushButton(`id(`saveas), _("Save &As")),
			      `PushButton(`id(`edit), _("&Edit"))
			      )
			),
		  `VSpacing(0.5)
		  );
	
	return contents;
    }



    /**
     * Popup for a new file name
     * @return string new file name
     */
    global define string NewFileName(string caption, string textentry)``{
	term con =
	    `HBox(
		  `HSpacing(1),
		  `VBox(
			`VSpacing(0.2),
			// Translators: popup dialog heading
			`Heading (caption),
			//  _("&New Profile Name") _("New Profile")
			// Translators: text entry label
			`Left (`TextEntry (`id (`newname), textentry, "")),

			`VSpacing(0.2),
			`HBox(`PushButton(`id(`ok), `opt(`default), OKButtonLabel()),
			      `PushButton(`id(`cancel), CancelButtonLabel())),
			`VSpacing(0.2)
			),
		  `HSpacing(1)
		  );

	UI::OpenDialog (`opt(`decorated), con);
	UI::SetFocus (`id (`newname));
	string f = "";
	any ret = nil;
	while (true)
	{
	    ret = UI::UserInput ();
	    if (ret == `cancel)
	    {
		break;
	    }
	    else if (ret == `ok)
	    {

		f = UI::QueryWidget (`id (`newname), `Value);
		if (checkFileName(f) !=0 || f == "") {
		    UI::ErrorPopup(invalidFileName());
		    continue;
		}
		break;
	    }
	}

	UI::CloseDialog ();

	return (ret == `ok)? f : "";
    }



    /**
     * Main file dialog
     * @return symbol
     */
    global define symbol FileDialog()
	``{
	Wizard::SetScreenShotName ("autoyast-fileManagement");
	
	string title = _("File Management");
	string help = _("
<P>Select one of the listed <em>Control Files</em> and use the <b>Edit</b> button
to load it or create a new profile using the
<b>New</b> button.</P>
");

	help = help + _("<p>You can switch between complete control files, which are ready to use,
and templates, which contain class defintions and can be created using this dialog.</p>
");

	help = help + _("<p>Control files created from templates will be automatically copied into the
<em>control file repository</em></p>");



	Wizard::SetContents(title,
			    FileList(`ready), help, true, true);


	symbol type = `ready;
	any ret = "";
	repeat {
	    any selected_file = UI::QueryWidget(`id(`table), `CurrentItem);

	    type =  UI::QueryWidget(`id(`type), `CurrentButton);

	    if (selected_file == nil)
	    {
		UI::ChangeWidget(`id(`open), `Enabled, false);
		UI::ChangeWidget(`id(`delete), `Enabled, false);
	    }
	    else
	    {
		UI::ChangeWidget(`id(`open), `Enabled, true);
		UI::ChangeWidget(`id(`delete), `Enabled, true);
		if (type == `templates)
		{
		    UI::ReplaceWidget(`id(`rpnew), `PushButton(`id(`new), _("Create Confi&guration")));
		}
	    }


	    if  (AIConfig::currentFile !="")
	    {
		UI::ChangeWidget(`id(`loaded), `Value, 	AIConfig::currentFile);
	    }
	    else if (size(AIConfig::Profile)>0)
	    {
		UI::ChangeWidget(`id(`next), `Enabled, true);
	    }
	    else
	    {
		UI::ChangeWidget(`id(`next), `Enabled, false);
	    }


	    ret = UI::UserInput();

	    y2milestone("selected file: %1, %2, %3", selected_file, type, ret);
	    if (ret == `new && type != `templates)
	    {
		AIConfig::Profile = $[];
		AIConfig::currentFile = NewFileName(  _("New Profile Name"), _("New Profile"));

		if (AIConfig::currentFile!="")
		{
		    UI::ChangeWidget(`id(`loaded), `Value, AIConfig::currentFile);
		    UI::ChangeWidget(`id(`next), `Enabled, true);
		    ret = `open;
		}
		else
		{
		    continue;
		}
	    }
	    else if (ret == `open || (type ==`templates && ret == `new))
	    {
		y2milestone("Reading control file: %1", selected_file);
		if (selected_file!=nil) {
		    AIConfig::currentFile=selected_file;

		    if (type == `templates)
		    {

			AIConfig::ReadProfile(sformat("%1/%2", AIConfig::TemplateRepository,selected_file));
			AIConfig::isTemplate = true;
		    }
		    else
		    {
			AIConfig::ReadProfile(sformat("%1/%2", AIConfig::Repository,selected_file));
		    }
		}
		UI::ChangeWidget(`id(`loaded), `Value, AIConfig::currentFile);
	    }
	    else if (ret == `delete)
	    {
		if (UI::QueryWidget(`id(`table), `CurrentItem) == nil)
		{
		    UI::WarningPopup(_("Select a file first."));
		    continue;
		}
		if (type == `templates)
		{
		    SCR::Execute(.target.bash, "rm " + AIConfig::TemplateRepository + "/" + UI::QueryWidget(`id(`table), `CurrentItem));
		}
		else
		{
		    SCR::Execute(.target.bash, "rm " + AIConfig::Repository + "/" + UI::QueryWidget(`id(`table), `CurrentItem));
		}

		Wizard::SetContents(title,
				    FileList(type), help, true, true);
	    }

	    if (type == `templates && ret == `new)
	    {
		any result =  processTemplate();
	    }


	    if (UI::QueryWidget(`id(`type), `CurrentButton) != type)
	    {
		if ( UI::QueryWidget(`id(`type), `CurrentButton) == `ready )
		{
		    Wizard::SetContents(title,
					FileList(`ready), help, true, true);

		}
		else if  (UI::QueryWidget(`id(`type), `CurrentButton) == `templates )
		{
		    Wizard::SetContents(title,
					FileList(`templates), help, true, true);

		}
	    }



	} until (ret == `next ||
		 ret == `open ||
		 ret == `back || (ret == `abort && UI::ReallyAbortPopup (AIConfig::changed)));

	Wizard::RestoreScreenShotName ();
	return ret;
    }

    /**
     * Save dialog
     *
     */

    global define SaveDialog()
	``{
	Wizard::SetScreenShotName ("autoyast-saveDialog");
	string help = _("
<P>Now you can save the configuration created. After
saving the control file, you can continue editing and creating new
configurations.</P>
");

	help = help + _("
<P>Check the syntax of the Profile before saving it. For more information
about the syntax of the resulting <em>XML</em> file,
consult the online documentation.</p>
");




	Wizard::SetContents(_("File Management"),
			    FileListSave(), help, true, true);

	UI::ChangeWidget(`id(`next), `Label, FinishButtonLabel);

	AIConfig::PrepProfile();
	string source = XML::YCPToXMLString(`profile, AIConfig::Profile);
	if (size(source)>0)
	{
	    UI::ChangeWidget(`id(`class_source ), `Value, source);
	}
	else
	{
	    UI::ChangeWidget(`id(`class_source ), `Value, "");
	}
	any ret = nil;
	repeat
	    {
		if  (AIConfig::currentFile !="")
		{
		    UI::ChangeWidget(`id(`loaded), `Value, 	AIConfig::currentFile);
		}
		ret = UI::UserInput();

		if (ret == `saveprofile || ret == `saveas)
		{
		    if (AIConfig::isTemplate)
		    {
			string header = _("Saving a control file with classes");
			string message =  _("Should this control file be saved in the
templates directory?");
			
			if (!UI::YesNoHeadlinePopup(header,message))
			{
			    y2milestone("not template");
			    AIConfig::isTemplate = false;
			    AIConfig::removeClasses();
			}

		    }

		    if (ret == `saveas)
		    {
			string filename = "";
			if (!AIConfig::isTemplate)
			{
			    filename = SaveFileAs(AIConfig::Repository );
			}
			else
			{
			    filename = SaveFileAs(AIConfig::TemplateRepository );
			}
			
			y2milestone("file name: %1", filename);
			if (filename == "")
			{
			    continue;
			}

			list filename_comp = splitstring(filename, "/");
			string basename = select(filename_comp, size(filename_comp) - 1, "");
			if (checkFileName(basename) !=0 )
			{
			    UI::ErrorPopup(invalidFileName());
			    continue;
			}
			else
			{
			    AIConfig::currentFile = filename;
			}
		    }


		    if (AIConfig::currentFile == "") {
			UI::WarningPopup(_("Provide a file name
to save the current profile.
"));
			continue;
		    }

		    if (AIConfig::SaveProfile(AIConfig::currentFile))
		    {
			UI::MessagePopup(sformat(_("File %1 was saved successfully."), AIConfig::currentFile));
			AIConfig::changed=false;
			continue;
		    }
		    else
		    {
			UI::WarningPopup(_("An error occured while saving the file."));
		    }

		}	
		else	if (ret == `next && AIConfig::changed)
		{
		    if (UI::YesNoHeadlinePopup(_("The configuration has been modifed."), _("Should the changes be saved?")))
		    {
			string filename = SaveFileAs(AIConfig::Repository + "/");

			if (filename=="")
			{
			    continue;
			}
			else
			{
			    AIConfig::currentFile= filename;
			}
			if (AIConfig::currentFile == "")
			{
			    UI::WarningPopup(_("Provide a file name
to save the current profile.
"));
			    continue;
			}

			if (AIConfig::SaveProfile(AIConfig::currentFile))
			{
			    UI::MessagePopup(sformat(_("File %1 was saved successfully."), AIConfig::currentFile));
			}
			else
			{
			    UI::WarningPopup(_("An error occured while saving the file."));
			}

			AIConfig::changed=false;
		    }

		}


	    } until (ret == `edit || ret == `next || ret == `back || (ret == `abort && UI::ReallyAbortPopup (AIConfig::changed)));
	Wizard::RestoreScreenShotName ();
	return ret;
    }


    /**
     * Check validity of file name
     * @param string file name
     * @return 0 if valid, -1 if not.
     */
    global define integer checkFileName (string name) ``{
        if (name != filterchars (name, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.")
	    || size (name) > 127)
	{
	    return -1;
	}

        return 0;
    }

    /**
     * Return a message about invalid file names
     * @param -
     * @return message
     */
    global define string invalidFileName() ``{
	return(_("Invalid file name.
Names can only contain letters, numbers, and underscore,
must begin with letter, and must be
127 characters long or less.
"));
    }

    /**
     * Clone running system
     *
     */
    global define cloneSystem()``{
	Wizard::SetScreenShotName ("autoyast-cloneSystem");
	string help = _("<p>This will create a new profile by reading
information from this machine.</p>");
	string title = "Clone machine";

	term contents = `Top(
			     `VBox(
				   `RadioButtonGroup(`id(`rbg),
						     `VBox(
							   `Left(
								 `RadioButton(`id(`save),`opt(`notify), _("Save &result into repository"), true)
								 ),
							   `Left(
								 `HBox(
								       `HStretch(),
								       `TextEntry(`id(`result), _("&Name of resulting profile"), "clone.xml"),
								       `HStretch()

								       )
								 ),
							   `Left(
								 `RadioButton(`id(`load), `opt(`notify),_("&Load resulting profile"))
								 )
							   )
						     )				   				 
				   )
			     );

	Wizard::SetContents(title,
			    contents, help, true, true);



	any ret = nil;
	symbol action = nil;
	repeat
	    {
		ret = UI::UserInput();

	
		if (ret ==`next)
		{		  
		    action = UI::QueryWidget(`id(`rbg), `CurrentButton);
		    AIConfig::currentFile =  UI::QueryWidget(`id(`result), `Value);
		    showFeedback( _("Collecting system data.
Please wait....
"));
		    AIClone::exportProfile();
		    clearFeedback();

		}
	    } until (ret == `next || ret == `back || (ret == `abort && UI::ReallyAbortPopup (AIConfig::changed)));
	if (ret == `next)
	    return action;
	
	Wizard::RestoreScreenShotName ();
	return ret;
	
    }

    /**
     * Show feedback message in a simple dialog.
     * @param msg message to show
     **/
    global define void showFeedback( string msg ) ``{
	if ( popup_open )
	{
	    UI::CloseDialog();
	}
	UI::OpenDialog( `VBox( `Label( msg ) ) );
	y2debug( msg );
	popup_open = true;
    };


    /**
     * Close feedback dialog if it is open
     **/
    global define void clearFeedback() ``{
	if ( popup_open )
	    UI::CloseDialog();
	popup_open = false;
    };


    /**
     * Generate control file list
     * @return file list
     */
    global define FileListClean() ``{
	list files = [];
	string tabHeader = "";
	string caption = "";

	files = SCR::Read(.target.dir, AIConfig::Repository);
	tabHeader = _("Control file");
	caption = _("Current Profile: ");


	list xmlfiles = [];
	foreach(string file, files,
		``{
	    if (SCR::Read(.target.dir,  AIConfig::Repository + "/" + file) == nil)
	    {
		xmlfiles= add (xmlfiles,`item(`id(file), file));
	    }
	});

	term contents =
	    `VBox(
		  `Left(`HBox(
			      `Label(caption),
			      `Label(`id(`loaded), `opt(`outputField),  _("None                                                   "))
			      )
			),
		  `VSpacing(0.5),
		  `Table(`id(`table), `opt(`notify,`immediate), `header(tabHeader),
			 xmlfiles
			 )
		  );
	return contents;
    }
    /**
     * Open file dialog
     * @return symbol
     */
    global define symbol openProfile()
	``{
	Wizard::SetScreenShotName ("autoyast-openfile");
	
	string title = _("Load a Control File");
	string help = _("
<P>Select one of the listed <em>Control Files</em> and use <b>Next</b> 
to load it.</P>
");




	Wizard::SetContents(title,
			    FileListClean(), help, true, true);


	
	any ret = "";
	repeat {
	    any selected_file = UI::QueryWidget(`id(`table), `CurrentItem);

	  
	    if  (AIConfig::currentFile !="")
	    {
		UI::ChangeWidget(`id(`loaded), `Value, 	AIConfig::currentFile);
	    }
	 

	    ret = UI::UserInput();
	    
	    if (ret == `next)
	    {
		y2milestone("Reading control file: %1", selected_file);	

		if (selected_file!=nil)
		{
		    AIConfig::currentFile=selected_file;		  
		    AIConfig::ReadProfile(sformat("%1/%2", AIConfig::Repository,selected_file));
		    UI::ChangeWidget(`id(`loaded), `Value, AIConfig::currentFile);
		}
		else
		{
		    UI::ErrorPopup(_("Select a file."));
		    continue;
		}
		    
	    }	   


	} until (ret == `next ||	
		 ret == `back || (ret == `abort && UI::ReallyAbortPopup (AIConfig::changed)));

	Wizard::RestoreScreenShotName ();
	return ret;
    }


    global define serverSetup() ``{
	import "Misc";
	string title = _("Server Setup");
	string help = _("TODO");

	string dhcpif = Misc::SysconfigRead(.sysconfig.dhcpd.DHCPD_INTERFACE, "eth1");
	
	term contents =
	    `Top(
		 `VBox(
		       `Frame(_("NFS Configuration"),
			      `VBox(
				    `Left(
					  `CheckBox(`id(`nfs), _("Configure as N&FS Installation Server"))
					  ),
				    `VSpacing(0.5),
				    `Left(
					  `HBox(
						`HWeight(1,`TextEntry(`id(`suserep), _("Package Repo&sitory"), AIServer::PackageRep)),
						`HWeight(2,`Empty())
							 
						)
					  )				    
				    )
			      ),
		       `VSpacing(0.5),
		       `Frame(_("DHCP Configuration"),
			      `VBox(
				    `Left(				
					  `CheckBox(`id(`dhcp), _("Start DHCP"))
					  ),
				    `VSpacing(0.5),
				    `Left(
					  `HBox(
						`HWeight(1,`TextEntry(`id(`dhcpif), _("DHCP Interface"), dhcpif)),
						`HWeight(2,`Empty())
						)
					  )
				    )
			      ),
		       `VSpacing(0.5),
		       `Frame(_("TFTP Configuration"),
			      `VBox(
				    `Left(				
					  `CheckBox(`id(`dhcp), _("Configure TFTP"))
					  ),
				    `VSpacing(0.5),
				    `Left(
					  `HBox(
						`HWeight(1,`TextEntry(`id(`tftproot), _("Tftp Ro&ot"), AIServer::Tftpboot)),
						`HWeight(2,`Empty())
						)
					  )
				    )
			      )
		       )		       		       
		 );
	
	
	Wizard::SetContents(title,
			    contents, help, true, true);

	any ret = "";
	repeat {
	   

	    ret = UI::UserInput();
	    
	    if (ret == `next)
	    {
	
	    }	   


	} until (ret == `next ||	
		 ret == `back || (ret == `abort && UI::ReallyAbortPopup (AIConfig::changed)));

	
	return ret;
   

	
	
    }

    
}
