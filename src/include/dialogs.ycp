/**
 * File:	include/autoinstall/dialogs.ycp
 * Module:	Auto-Installation Configuration System
 * Summary:	This module handles the configuration for auto-installation
 * Authors:	Anas Nashif <nashif@suse.de>
 * $Id$
 */
{
    textdomain "autoinst";

    /**
     * Preferences Dialog
     *
     */
    global define Preferences()
	``{
	Wizard::SetScreenShotName ("autoyast-preferences");
	term contents =
	    `Top(
		 `VBox(
		       `VSquash(`HBox(
				      `TextEntry(`id(`repository), _("&Profile Repository:"), AIConfig::Repository),
				      `VBox(
					    `VSpacing(),
					    `Bottom(`PushButton(`id(`opendir), _("&Select Directory")))
					    )
				      )
				),

		       // `Left(`CheckBox(`id(`enable_classes), `opt(`notify), _("Use classes for multi-host configurations"), AIClass::enable)),

		       `VSquash(`HBox(

				      `TextEntry(`id(`classdir), _("&Class directory:"), AIClass::classDir),
				      `VBox(
					    `VSpacing(),
					    `Bottom(`PushButton(`id(`openclassdir), _("Select &Directory")))
					    )
				      )
				),
		       `VSquash(
				`HBox(
				      `TextEntry(`id(`susedir), _("SuSE &Package Directory:"), AIConfig::PackageRepository),
				      `VBox(
					    `VSpacing(),
					    `Bottom(`PushButton(`id(`opensusedir), _("Select Dire&ctory")))
					    )
				      )
				),
		       `VSquash(
				`HBox(
				      `TextEntry(`id(`alicedir), _("&Alice Repository:"), AIConfig::AliceRepository),
				      `VBox(
					    `VSpacing(),
					    `Bottom(`PushButton(`id(`openalicedir), _("Select Director&y")))
					    )
				      )
				)
		       )
		 );


	string help = _("<P>
Enter the directory where all <em>control files</em> should be stored in
the <b>Repository</b> field.</P>");

	help = help + _("<P>If you are using the classes feature
of Autoyast, also enter the class directory. This is where
all class files are stored</p>
");

	help = help + _("<P>The <b>Package repository</b> is where you have copied
the SuSE CDs. This directory must have a subdirectory called <b>suse</b> that
contains all the packages.</p>
");


	Wizard::SetContents(_("Preferences"),
			    contents, help , true, true);


	boolean changed = false;
	any ret = "";
	repeat {
	    ret = UI::UserInput();

	    string new_rep = UI::QueryWidget(`id(`repository), `Value);
	    string new_classdir = UI::QueryWidget(`id(`classdir), `Value);
	    string new_susedir = UI::QueryWidget(`id(`susedir), `Value);
	    string new_alicedir = UI::QueryWidget(`id(`alicedir), `Value);

	    if (ret ==`opendir)
	    {
		new_rep = UI::AskForExistingDirectory(AIConfig::Repository , _("Select Directory") );
		if (new_rep != nil)
		{
		    UI::ChangeWidget(`id(`repository), `Value, new_rep);
		}
		continue;
	    }
	    else if (ret ==`openclassdir)
	    {
		new_classdir = UI::AskForExistingDirectory( AIClass::classDir , _("Select Directory") );
		if (new_classdir != nil)
		{
		    UI::ChangeWidget(`id(`classdir), `Value, new_classdir);
		}
		continue;
	    }
	    else if (ret ==`opensusedir)
	    {	
		new_susedir = UI::AskForExistingDirectory( AIConfig::PackageRepository  , _("Select Directory") );
		if (new_susedir != nil)
		{
		    UI::ChangeWidget(`id(`susedir), `Value, new_susedir );
		}
		continue;
	    }
	    else if (ret ==`openalicedir)
	    {	
		new_alicedir = UI::AskForExistingDirectory( AIConfig::AliceRepository  , _("Select Directory") );
		if (new_alicedir != nil)
		{
		    UI::ChangeWidget(`id(`alicedir), `Value, new_alicedir );
		}
		continue;
	    }	    
	    else if ( ret==`accept)
	    {
		if (AIConfig::Repository != new_rep)
		{
		    changed = true;
		    AIConfig::Repository = new_rep;
		}
		if (AIClass::classDir != new_classdir)
		{
		    changed = true;
		    AIClass::classDir = new_classdir;
		}	   
		if ( AIConfig::PackageRepository!= new_susedir)
		{
		    changed = true;
		    AIConfig::PackageRepository = new_susedir;
		}
		
		if ( AIConfig::AliceRepository!= new_alicedir)
		{
		    changed = true;
		    AIConfig::AliceRepository = new_alicedir;
		}
	    }	   

	} until (ret == `cancel ||  ret == `accept || contains(menuitems, ret));
	
	Wizard::RestoreScreenShotName ();
	if ( changed  )
	{
	    AIConfig::Save();
	    AIClass::Save();
	    changed =false;
	}
	return ret;
    }









    /**
     * Popup for a new file name
     * @return string new file name
     */
    global define string NewFileName(string caption, string textentry)``{
	term con =
	    `HBox(
		  `HSpacing(1),
		  `VBox(
			`VSpacing(0.2),
			// Translators: popup dialog heading
			`Heading (caption),
			//  _("&New Profile Name") _("New Profile")
			// Translators: text entry label
			`Left (`TextEntry (`id (`newname), textentry, "")),

			`VSpacing(0.2),
			`HBox(`PushButton(`id(`ok), `opt(`default), OKButtonLabel()),
			      `PushButton(`id(`cancel), CancelButtonLabel())),
			`VSpacing(0.2)
			),
		  `HSpacing(1)
		  );

	UI::OpenDialog (`opt(`decorated), con);
	UI::SetFocus (`id (`newname));
	string f = "";
	any ret = nil;
	while (true)
	{
	    ret = UI::UserInput ();
	    if (ret == `cancel)
	    {
		break;
	    }
	    else if (ret == `ok)
	    {

		f = UI::QueryWidget (`id (`newname), `Value);
		if (checkFileName(f) !=0 || f == "")
		{
		    UI::ErrorPopup(invalidFileName());
		    continue;
		}
		break;
	    }
	}

	UI::CloseDialog ();

	return (ret == `ok)? f : "";
    }





    /**
     * Check validity of file name
     * @param string file name
     * @return 0 if valid, -1 if not.
     */
    global define integer checkFileName (string name) ``{
        if (name != filterchars (name, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.-")
	    || size (name) > 127)
	{
	    return -1;
	}

        return 0;
    }

    /**
     * Return a message about invalid file names
     * @param -
     * @return message
     */
    global define string invalidFileName() ``{
	return(_("Invalid file name.
Names can only contain letters, numbers, and underscore,
must begin with letter, and must be
127 characters long or less.
"));
    }




    
    /**
     * Clone running system
     *
     */
    global define cloneSystem()``{
	Wizard::SetScreenShotName ("autoyast-cloneSystem");

	
	string help = _("<p>This tool will create a new profile by reading
information from this system. Select the resources you want to read from this system
in addition to the default resource like partitioning and package selections.</p>");
	help = help + _("<p>Please examine any produced control file before using it
to autoinstall a new system.</p>");
	
	string title = _("Clone machine");

	term contents =
	    `VBox(
		  `MultiSelectionBox( "Select additional resources to clone:",
				      [
				       _("Network"),
				       _("Authentication (NIS, LDAP, etc.)"),
				       _("NFS Exports"),
				       _("NFS mounts"),
				       _("Sound"),
				       _("Printer"),
				       _("Mail"),
				       _("Users")				       
				       ]
				      )
		  );

	Wizard::SetContents(title,
			    contents, help, true, true);


	UI::ChangeWidget(`id(`accept), `Label, _("Clo&ne"));
	any ret = nil;	
	repeat
	    {
		ret = UI::UserInput();	
		if (ret ==`accept)
		{		  		    		    
		    showFeedback( _("Collecting system data.
Please wait....
"));
		    AIClone::exportProfile();
		    clearFeedback();

		}
	    } until (ret == `accept || ret == `cancel || contains(menuitems, ret) );
	
	Wizard::RestoreScreenShotName ();
	return ret;	
    }

    /**
     * Show feedback message in a simple dialog.
     * @param msg message to show
     **/
    global define void showFeedback( string msg ) ``{
	if ( popup_open )
	{
	    UI::CloseDialog();
	}
	UI::OpenDialog( `VBox( `Label( msg ) ) );
	y2debug( msg );
	popup_open = true;
    };


    /**
     * Close feedback dialog if it is open
     **/
    global define void clearFeedback() ``{
	if ( popup_open )
	    UI::CloseDialog();
	popup_open = false;
    };



    

    
}
