/**
 * File:	include/autoinstall/imports.ycp
 * Package:	Autoinstallation Configuration System
 * Summary:	Imports older and foreign format
 * Authors:	Anas Nashif<nashif@suse.de>
 *
 * $Id$
 */
{
    textdomain "autoinst";
    import "AutoinstConfig";
    import "AutoinstStorage";
    import "Popup";
    import "Profile";

    include "autoinstall/xml.ycp";


    /**
     * Generate control file list
     * @return file list
     */
    define term aliceHostList()
	``{

	list<string> files = (list<string>)SCR::Read(.target.dir, AutoinstConfig::AliceRepository + "/info");
	list<string> extensions = ["sys.tcf" ];
	list<string> hosts = [];
	string host = "";
	foreach(string file, files, ``{
	    foreach(string ext, extensions, ``{
		if (issubstring(file, ext))
		{
		    integer extsize = size(splitstring(ext, "."));
		    list<string> comp = splitstring(file, ".");
		    integer i = 0;
		    while (i < extsize) {
			comp  = remove(comp, size(comp) - 1 );
			i = i + 1;
		    }

		    hosts = add(hosts,mergestring(comp,"."));
		}
	    });

	});
	list hostfiles = maplist(string host, toset(hosts), ``{
	    return (`item(`id(host), host));
	});

	term contents =
	    `VBox(
		  `VSpacing(0.5),
		  `Table(`id(`table), `opt(`notify,`immediate), `header("Host"),
			 hostfiles
			 ),
		  `VSpacing(0.5)
		  );
	return contents;
    }



    define boolean _cleanup(string in, string out)
	``{
	map<string, any> ycpin = XML::XMLToYCPFile(in);
	y2milestone("Writing file as %1", out);

	map sortedMap = $[];
	list<string> keys = toset(maplist(string k, any v, ycpin, ``(k)));

	foreach(string k, keys, ``{
	    sortedMap[k]=ycpin[k]:"";
	});
	return XML::YCPToXMLFile(`alice, sortedMap, out);
    }


    define map mergeFiles(list<string> files, string dir)
	``{

	aliceXmlSetup();
	integer cnt = 0;
	string base = "";
	foreach (string f, files, ``{
	    if (f != "" ) {

		string filename = sformat("%1/%2", dir, f);
		y2milestone("Working on %1", filename);
		base = sformat("%1/base.xml", dir);
		if (cnt == 0)
		{
		    _cleanup(filename, base);
		}
		else
		{

		    string MergeCommand = "/usr/bin/xsltproc --novalid --param replace \"'true'\" --param with ";
		    MergeCommand = MergeCommand + "\"'" + filename + "'\"  ";
		    MergeCommand = MergeCommand + "--output " +  dir + "/mergeOutput ";
		    MergeCommand = MergeCommand + " /usr/share/autoinstall/xslt/merge.xslt ";
		    MergeCommand = MergeCommand +   base + " ";

		    y2milestone("Merge command: %1", MergeCommand);

		    map out = (map)SCR::Execute(.target.bash_output, MergeCommand, $[]);
		    y2milestone("Merge stdout: %1, stderr: %2", out["stdout"]:"", out["stderr"]:"");
		    _cleanup(sformat("%1/mergeOutput", dir), base);
		}

		cnt = cnt + 1;
	    }

	});
	map ret = XML::XMLToYCPFile(base);

	return (ret);
    }



    define map createAliceConf(string host)
	``{

	string MakeinfoCommand = "alice make_info_file --yast2 ";
	MakeinfoCommand = MakeinfoCommand + host;
	map out = (map)SCR::Execute(.target.bash_output, MakeinfoCommand, $["YAST2_TMPDIR": AutoinstConfig::tmpDir , "ALICE_HOME":AutoinstConfig::AliceRepository]);
	string filelist = (string)SCR::Read(.target.string, AutoinstConfig::tmpDir + "/filelist");
	list<string> files = splitstring(filelist, "\n");
	y2milestone("files: %1", files);

	map ret =  mergeFiles(files, AutoinstConfig::tmpDir);
	SCR::Execute(.target.remove,  AutoinstConfig::tmpDir + "/filelist");
	y2milestone("alice conf %1", ret);
	return ret;
    }




    /**
     * create partition list from alice data
     * @param string partition
     * @return list  list of partitions
     */
    define list createAlicePartitions(string partitions)
	``{
	SCR::Write(.target.string, "/var/lib/autoinstall/tmp/alice_part", partitions);
	list<map> raw_part =  (list<map>) SCR::Read(.tmp.alice.part);
	list<map> part =filter(map pe, raw_part, ``(!haskey(pe, "path")));
	y2milestone("and parts again: %1", part);
	list<map> newPartitions = maplist(map p, part, ``{
	    map newPart = $[];

	    if (p["mount"]:""!="NONE" && p["mount"]:""!="SWAP")
	    {
		newPart["mount"] = p["mount"]:"";
	    }
	    else if (p["mount"]:"" == "SWAP")
	    {
		newPart["partition_id"]= tointeger(sformat("0x%1","82"));
	    }

	    if (p["size"]:-1 == 0)
	    {
		newPart["size"]= "max";
	    }
	    else
	    {
		newPart["size"]= sformat("%1mb", p["size"]:0);
	    }

	    if (haskey(p,"id")) {
		string hex = sformat("0x%1", p["id"]:"83");
		newPart["partition_id"]= tointeger(hex);
	    }
	    if (haskey(p,"num")) {
		newPart["partition_nr"]= tointeger(p["num"]:"0");
	    }

	    return newPart;
	});
	SCR::Execute(.target.remove,  "/var/lib/autoinstall/tmp/alice_part");
	SCR::UnmountAgent(.tmp.alice.part);
	y2milestone("Alice Partitions %1", newPartitions);
	return  newPartitions;
    }

    /**
     * Read package selection from a file
     * @param string selection as string
     * @return list package selection list
     */
    define list readSelection(string selection) ``{
	SCR::Write(.target.string, "/var/lib/autoinstall/tmp/alice_software", "Toinstall:\n" + selection + "\nLlatsniot:\n");
	list<string> sel = filter(string p, (list<string>) SCR::Read(.yast1sel.selection, "/var/lib/autoinstall/tmp/alice_software"), ``(p!=""));
	SCR::Execute(.target.remove, "/var/lib/autoinstall/tmp/alice_software");
	SCR::UnmountAgent(.tmp.alice.software);
	return sel;
    }



    /**
     * create software map from alice data
     * @param map aliceConf alice configuration
     * @return map  software map
     */

    define map createAliceSoftware(map aliceConf) ``{

	map software= $[];
	string base = "";
	if (size(aliceConf["SYS_SW_SELLIST"]:"")>0)
	{
	    string SYS_SW_SELLIST = aliceConf["SYS_SW_SELLIST"]:"";
	    software["packages"] = readSelection(SYS_SW_SELLIST);
	}
	else if (aliceConf["SYS_SW_SELECTION"]:"" != "")
	{
	    list tmpsel = splitstring(aliceConf["SYS_SW_SELECTION"]:"", "/");
	    base = (string)select(tmpsel, size(tmpsel) - 1 , "");
	    software["base"] = (string) select(splitstring(base, "."), 0, "Minimal");
	}

	if (aliceConf["SYS_INST_KERNEL"]:"" != "")
	{
	    software["kernel"] = aliceConf["SYS_INST_KERNEL"]:"";
	}
	if (aliceConf["SYS_SW_ADDLIST"]:"" != "")
	{
	    string SYS_SW_ADDLIST = aliceConf["SYS_SW_ADDLIST"]:"";
	    software["packages"] = readSelection(SYS_SW_ADDLIST);
	}
	if (aliceConf["SYS_SW_AUXLIST"]:"" != "")
	{
	    string SYS_SW_AUXLIST = aliceConf["SYS_SW_AUXLIST"]:"";
	    map extra = $[];
	    extra["packages"] = (list)toset ( readSelection(SYS_SW_AUXLIST) );
	}
	return software;

    }


    /**
     * create network map from alice data
     * @param map aliceConf alice configuration
     * @return map  network map
     */
    define map createAliceNetwork(map aliceConf) ``{
	 import "IP";
	 string network =  aliceConf["NET_IP_CONFIG"]:"";
	 string DNS_NAMESERVER = aliceConf["DNS_NAMESERVER"]:"";
	 string DNS_SEARCHLIST = aliceConf["DNS_SEARCHLIST"]:"";
	 string SYS_NAME = aliceConf["SYS_NAME"]:"";
	 string DEF_GATEWAY = aliceConf["DEF_GATEWAY"]:"";
	 string ROUTES = aliceConf["ROUTES"]:"";


	 map networking = $[];
	 map dns = $[];
	 map routing = $[];



	 SCR::Write(.target.string, "/var/lib/autoinstall/tmp/alice_network", network);
	 map raw_interfaces =  (map) SCR::Read(.tmp.alice.network);
	 list<string> interfaces = maplist(string iface, map<string, map> data, raw_interfaces, ``{
	     map interface = $[];
	     if (data["bootproto"]:"" == "dhcpclient")
	     {
		 interface["bootproto"] = "dhcp";
		 interface["device"] = iface;
		 interface["startmode"] = "onboot";
	     }
	     else
	     {
		 interface["device"] = iface;
		 interface["bootproto"] = "static";
		 interface["network"] =  IP::ComputeNetwork(data["ipaddr"]:"0", data["netmask"]:"");
		 interface["ipaddr"] = data["ipaddr"]:"";
		 interface["netmask"] = data["netmask"]:"";
		 interface["startmode"] = "onboot";
		 interface["broadcast"] = IP::ComputeBroadcast(data["ipaddr"]:"",data["netmask"]:"");
	     }
	     return (interface);
	 });

	 list<string> nameserver = filter( string n, splitstring(DNS_NAMESERVER, " "), ``(n!= "" && n!= " "));
	 list<string> searchlist = filter(string s, splitstring(DNS_SEARCHLIST, " "), ``(s!= "" && s!= " "));

	 string hostname = (string) select(splitstring( SYS_NAME, "."), 0 , "");
	 string domain = mergestring(remove(splitstring( SYS_NAME, "."), 0), ".");

	 dns["hostname"] = hostname;
	 dns["domain"] = domain;
	 dns["searchlist"] = searchlist;
	 dns["nameservers"] = nameserver;

	 list routes= [];
	 map route = $[];

	 if (DEF_GATEWAY!="") {
	     route["destination"] = "default";
	     route["device"] = "-";
	     route["gateway"] = DEF_GATEWAY;
	     route["netmask"] = "-";
	     routes=add(routes, route);
	 }
	 if (ROUTES!="") {
	     SCR::Write(.target.string, "/var/lib/autoinstall/tmp/alice_routes", ROUTES);
	     list raw_routes = (list) SCR::Read(.tmp.alice.routes);
	     routes = union(routes, raw_routes);
	 }
	 routing=add(routing, "routes", routes);
	 routing=add(routing,"ip_forwarding", false);

	 networking["interfaces"] = interfaces;
	 networking["dns"] = dns;
	 networking["routing"] = routing;

	 return networking;
     }



    /**
     * create NIS map from alice data
     * @param map aliceConf alice configuration
     * @return map  NIS map
     */
    define map createAliceNis (map aliceConf) ``{
	map nis = $[];
	string nis_domain = aliceConf["NETWORK_NIS_YPDOMAIN"]:"";
	list nis_servers = splitstring( aliceConf["NETWORK_NIS_YPSERVER"]:"", " ");
	nis["nis_domain"] = nis_domain;
	nis["nis_servers"] = nis_servers;
	nis["start_nis"] = true;

	return nis;
    }

    /**
     * create users list from alice data
     * @param map aliceConf alice configuration
     * @return list  List of users
     */
    define list  createAliceUsers (map aliceConf) ``{
	list users = [];
	// root
	map root = $[];
	if ( aliceConf["SYS_ROOT_START_PWD"]:"" != "")
	    root["encrypted"] = true;
	else
	    root["encrypted"] = false;
	root["username"] = "root";
	root["user_password"] =  aliceConf["SYS_ROOT_START_PWD"]:"root";
	users=add(users,root);

	return users;
    }

    define map aliceInit(map aliceConf, map networking)``{
	map init = $[];
	y2milestone("networking %1", networking);
	if ( aliceConf["SYS_BOOT_MODE"]:"" == "NET") {
	    init["instmode"] = "nfs";
	}
	if (size(aliceConf["SYS_INST_DIR"]:"") > 0) {
	    string serverdir = regexpsub( aliceConf["SYS_INST_DIR"]:"", "(.*)\%version(.*)", "\\1" + aliceConf["SYS_OS_VERSION"]:"" + "\\2");
	    y2milestone("serverdir: %1", serverdir);
	    init["serverdir"] = regexpsub( serverdir, "(.*)\%arch(.*)", "\\1" + aliceConf["SYS_ARCH"]:"" + "\\2");

	}
	if (haskey(aliceConf,"SYS_INSMOD_MODULES")) {
	    list modules = splitstring(aliceConf["SYS_INSMOD_MODULES"]:"", "\n");
	    init["insmod"]=modules;
	}
	if (haskey(aliceConf,"SYS_KEYTABLE")) {
	    init["keytable"]=aliceConf["SYS_KEYTABLE"]:"";
	}
	if (haskey(aliceConf,"SYS_LANGUAGE")) {
	    init["language"]=aliceConf["SYS_LANGUAGE"]:"";
	}
	if (haskey(aliceConf,"SYS_INST_SERVER")) {
	    init["server"]=aliceConf["SYS_INST_SERVER"]:"";
	}

	if (haskey(aliceConf,"NET_INST_DEV")) {
	    init["netdevice"]=aliceConf["NET_INST_DEV"]:"";
	}

	list<map> ifaces = networking["interfaces"]:[];
	foreach(map iface, ifaces, ``{
	    if (iface["device"]:"" == init["netdevice"]:"")
	    {
		init["ip"] = iface["ipaddr"]:"";
		init["netmask"] = iface["netmask"]:"";
	    }
	});
	init["gateway"] = aliceConf["DEF_GATEWAY"]:"";
	return init;

    }

    

    /**
     * Create the profile from Alice data
     * @param map alice data
     * @return map Profile
     */

    define map createProfile(map<string, string> aliceConf)
	``{
	import "Misc";
	// General resource
	////////////////////////////////////////////////////////
	map keymap2yast1 = $[
			     "us"		:"english-us",
			     "de-lat1-nd"	:"german",
			     "fr-latin1"	:"french",
			     "it"		:"italian",
			     "es"		:"spanish",
			     "nl"		:"dutch",
			     "pt2"		:"portugese",
			     "br-abnt2"		:"portugese-br",
			     "hu"		:"hungarian",
			     "Pl02"		:"polish" ,
			     "gr"		:"greek"  ,
			     "trq"		:"turkish",
			     "ru1"		:"russian",
			     "cz-lat2"		:"czech"
	];
	map lang2iso = (map)SCR::Read( .target.yast2, "lang2iso.ycp");

	map general = $[];
	map install = $[];
	map configure = $[];

	// SYS_LANGUAGE, SYS_KEYTABLE, SYS_TIMEZONE, SYS_MOUSE_DEVICE, SYS_HWC_GMT
	string language = aliceConf["SYS_LANGUAGE"]:"english";
	general["language"] = lang2iso[language]:"en_US";
	
	string keymap = aliceConf["SYS_KEYTABLE"]:"us";
	general["keyboard"] = $[ "keymap" : keymap2yast1[keymap]:"english-us" ];
	map clock = $[];
	clock["timezone"] =  aliceConf["SYS_TIMEZONE"]:"CET" ;
	if ( aliceConf["SYS_HWC_GMT"]:"no" == "yes")
	    clock["hwclock"] = "GMT";
	else
	    clock["hwclock"] = "localtime";

	general["clock"] = clock;
	
	map mice = (map) Misc::ReadAlternateFile ("mouse_db.ycp", "mouse_raw.ycp");
        y2debug("Mice %1", mice);
	boolean found = false;
	map<string, list> mouse = $[];
	foreach(string k,list v, mice, ``{
	    map data = (map) select(v,1,$[]);
	    y2debug("yours %1, mine %2",  data["device"]:"", aliceConf["SYS_MOUSE_DEVICE"]:"none");
	    if ( data["wheels"]:0 == 0 && data["device"]:"" == aliceConf["SYS_MOUSE_DEVICE"]:"none")
	    {
		mouse["id"] = k;
		found = true;
	    }
	});
	if (!found)
	    mouse["id"] = "probe";

	general["mouse"] = mouse;


	list drives = [];
	map newDrive = $[];
	foreach(string k, string v, aliceConf , ``{
	    if (issubstring(k, "SYS_PART"))
	    {
		string device =  "/dev/" + select(splitstring(k,"_"), 2, "");
		list partitions  = createAlicePartitions(v);
		y2milestone("Partitions for %1: %2", device , partitions );
		drives = add(drives, $["device":device, "partitions": partitions]);
	    }
	});



	install["partitioning"] = drives;
	install["general"] = general;
	install["software"] = createAliceSoftware(aliceConf);
	configure["networking"] = createAliceNetwork(aliceConf);

	install["init"] = aliceInit(aliceConf, 	configure["networking"]:$[]);
	configure["users"] =  createAliceUsers(aliceConf);
	
	if (aliceConf["NETWORK_NIS_YPDOMAIN"]:"" != "")
	    configure["nis"] =  createAliceNis(aliceConf);

	map profile = $[];
	profile["install"] = install;
	profile["configure"] = configure;
	y2milestone("Profile : %1", profile);
	return profile;
    }


    

    define symbol aliceImportList()
	``{

	import "Wizard";
	Wizard::SetScreenShotName ("autoyast-alice-2");

	string help = _("<p>Using this dialog, select a
host from the <b>ALICE</b> repository.</p>
");
	help = help +  _("<p>Using this feature, import <b>Alice</b> configuration
files.</p>
");
	help = help + _("<p>System configuration in  <em>Alice</em> files may vary in their scope from what is offered
in <b>AutoYaST</b>, so some limitations should be taken into consideration. A standard <em>Alice</em>
configuration file with no special customization can, however, be imported without any loss of data.</p>
");
	help = help + _("<p>Converting <b>ALICE</b> data to use with the new autoinstallation
system might take some time.  Be patient while
the configuration files are read and converted.
</p>
");
	Wizard::SetContents(_("Hosts in Alice Repository"),
			    aliceHostList(), help, true, true);

	Wizard::ReplaceAbortButton(`Empty());
	UI::ChangeWidget(`id(`next), `Label, _("&Import"));


	any ret = "";
	string host = "";
	repeat
	    {
	    ret = UI::UserInput();
	    if (ret == `next)
	    {
		host = (string)UI::QueryWidget(`id(`table), `CurrentItem);
		if (host != nil && host != "")
		{
		/* FIXME
		    showFeedback(_("
Reading Alice configuration files.
This may take a while. Please wait...
"));
		*/

		    map aliceConf = $[];
		    map aliceret = createAliceConf(host);
		    if ( aliceret != $[])
		    {
			aliceConf = aliceret;
		    }
		    else
		    {
			Popup::Error(_("Error while importing ALICE data"));
			// FIXME: clearFeedback();
			continue;
		    }

		    Profile::Import(createProfile(aliceConf));
		    // FIXME: clearFeedback();
		}
	    }
	} until (ret == `next || ret == `back );


	Wizard::RestoreScreenShotName ();
	return (symbol)ret;
    }


    
}
