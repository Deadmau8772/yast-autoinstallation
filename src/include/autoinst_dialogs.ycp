/**
 * File:	include/autoinstall/autoinst_dialogs.ycp
 * Package:	Auto-installation
 * Summary:	Define Profile file location
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */

{

    textdomain "autoinst";

    import "Popup";

    // Shows a dialog when 'control file' can't be found

    global define ProfileSourceDlg ()
	``{
	import "ProfileLocation";
	list supported_protocol = ["HTTP","NFS", "TFTP", "Floppy", "File", "Device"];
	list protocols = maplist(`p, supported_protocol, ``{
	    if (tolower(p) ==  ProfileLocation::scheme) {
		return (`item(`id(tolower(p)), p , true));
	    }
	    else {
		return (`item(`id(tolower(p)), p ));
	    }
	});

	string helptext = UI(_("<p>
Profile for this machine could not be found or retrieved.
Please make sure you have specified the correct location
on the command line.</p>"));
	string title = UI(_("System Profile Location"));
	UI::OpenDialog(`opt( `decorated ),
		       `HBox(
			     `HWeight(50, `RichText( helptext )),
			     `HStretch(),
			     `HSpacing(1),
			     `HWeight(50,
				      `VBox(
					    `Heading( title),
					    `VSpacing(1),
					    `VStretch(),
					    `Left(`ComboBox(`id(`protocol), `opt(`notify), _("&Protocol"), protocols )),
					    `Left(`TextEntry(`id(`server), _("&Server or Device:"), ProfileLocation::host)),
					    `Left(`TextEntry(`id(`Path), _("Pa&th:"), ProfileLocation::filepath)),
					    `VSpacing(1),
					    `VStretch(),
					    `HBox(
						  `PushButton(`id(`retry), `opt(`default),  Label::RetryButton()   ),
						  `PushButton(`id(`abort),  Label::AbortButton() )
						  )
					    ))
			     )
		       );

	any ret = "";
	string server = "";
	string Path = "";

	if ( ProfileLocation::scheme == "file" || ProfileLocation::scheme  == "floppy" || ProfileLocation::scheme == "cdrom")
	{
	    UI::ChangeWidget(`id(`server), `Enabled, false);
	    UI::SetFocus(`id(`Path));
	}
	else
	{
	    UI::SetFocus(`id(`server));
	}


	repeat {
	    ret = UI::UserInput();

	    if (ret == `abort)
	    {
		if (Popup::ConfirmAbort(`painless))
		    return `abort;
		else
		    continue;
	    }

	    string protocol =  UI::QueryWidget(`id(`protocol), `Value );

	    if (
		     protocol == "nfs" ||
		     protocol == "tftp" ||
		     protocol == "http" ||
		     protocol == "device"
		     )
	    {
		UI::ChangeWidget(`id(`server), `Enabled, true);
		ProfileLocation::scheme = tolower(protocol);
	    }
	    else if (protocol == "file" || protocol == "floppy")
	    {
		ProfileLocation::scheme = tolower(protocol);
		UI::ChangeWidget(`id(`server), `Enabled, false);
	    }


	    server = UI::QueryWidget(`id(`server), `Value );
	    Path = UI::QueryWidget(`id(`Path), `Value );
	} until (ret == `retry  || ret == `abort);

	ProfileLocation::host		= server;
	ProfileLocation::filepath 	= Path;

	UI::CloseDialog();
	return `next;
    }



    global define void StdErrLog( string stderr) ``{
	UI::OpenDialog(
		       `opt( `decorated ),
		       `VBox(
			     `VSpacing(0.5),
			     `HSpacing(50),
			     `HBox (
				    `HSpacing(0.5),
				    `LogView(`id(`log),  Label::ErrorMsg()  , 10, 100 ),
				    `HSpacing(0.5)
				    ),
			     `VSpacing(0.2),
			     `PushButton( `id(`ok), `opt(`default), Label::OKButton() ),
			     `VSpacing(0.5)
			     )
		       );

	UI::ChangeWidget(`id(`log),`Value, stderr);
	UI::UserInput();
	UI::CloseDialog();

    };

    /**
     * Disk selection dialog
     * @return device 
     */


    global define DiskSelection() ``{

	y2milestone("Selecting disk manually....");
	map tm = Storage::GetTargetMap();
	term contents = `Dummy();

	if( size(tm) > 0)
	{
	    term buttonbox = `VBox();

	    integer i = 0;
	    foreach( `tname, `tdata, tm,
		     ``{
		if( Storage::IsRealDisk( tname, tdata ))
		{
		    string tlinename = tdata["name"]:"?";
		    string tline = "&" + (i+1) + ":    " + tlinename;
		    boolean sel = Storage::GetPartDisk()==tname &&
			Storage::GetPartMode()!="CUSTOM";
		    buttonbox = add( buttonbox,
				     `Left(`RadioButton(`id(tname), tline, sel )));
		    i = i + 1;
		}
	    });

	    buttonbox = add(buttonbox, `VSpacing(0.8) );


	    // This dialog selects the target disk for the installation.
	    // Below this label, all targets are listed that can be used as
	    // installation target

	    // heading text
	    contents = `Frame( _("Choose a hard disk"),
			       `RadioButtonGroup(`id(`options),
						 `VBox( `VSpacing(0.4),
							`HSquash(buttonbox),
							`VSpacing(0.4)
							)
						 )
			       );
	}
	else
	{

	    contents = `Label (_("No disks found."));
	}

	// There are several hard disks found. Linux is completely installed on
	// one hard disk - this selection is done here
	// "Preparing Hard Disk - Step 1" is the description of the dialog what to
	// do while the following locale is the help description
	// help part 1 of 1
	string help_text = _("<p>
All hard disks automatically detected on your system
are shown here. Select the hard disk on which to install SuSE Linux.
</p>
");
	import "Label";
	term buttons = `HBox(
			 `PushButton(`id(`ok), `opt(`default), Label::OKButton ),
			 `PushButton(`id(`abort), Label::AbortButton )
			);



	term ask_device_dialog = `HBox(
				     `VSpacing( 15 ),       // force dialog height
				     `VBox(
					   `HSpacing( 30 ), // force help text width
					   `RichText( help_text )
					   ),
				     `HSpacing( 3 ),
				     `VBox(
					   `VSpacing( 1 ),
					   `Heading(_("Hard Disk Selection") ),
					    contents,
					   `VStretch(),
					   buttons

					   ),
				     `HSpacing( 3 )
				     );

	UI::OpenDialog(`opt(`decorated), ask_device_dialog);

	any ret = nil;
	any option = nil;

	repeat
	    {
		ret = Wizard::UserInput();
		y2milestone("ret=%1", ret);
		if( ret == `ok )
		{
		    option = UI::QueryWidget(`id(`options), `CurrentButton);
		    y2milestone( "selected disk: %1", option );
		    if( option == nil )
		    {
			// there is a selection from that one option has to be
			// chosen - at the moment no option is chosen
			UI::MessagePopup(_("Select one of the options to continue."));
			continue;
		    }
		}
	    } until ( ret == `ok || ret == `abort );

	UI::CloseDialog();
	return option;
    }










}
