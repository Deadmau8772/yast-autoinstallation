/**
 * File:	include/autoinstall/autoinst_ui.ycp
 * Package:	Auto-installation
 * Summary:	Define Profile file location
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */

{

    textdomain "autoinst";

    // Shows a dialog when 'control file' can't be found

    global define ProfileSourceDlg ()
	``{
	import "ProfileLocation";
	list supported_protocol = ["HTTP","NFS", "TFTP", "Floppy", "File", "Device"];
	list protocols = maplist(`p, supported_protocol, ``{
	    if (tolower(p) ==  ProfileLocation::scheme) {
		return (`item(`id(tolower(p)), p , true));
	    }
	    else {
		return (`item(`id(tolower(p)), p ));
	    }
	});

	string helptext = UI(_("<p>
Profile for this machine could not be found or retrieved.
Please make sure you have specified the correct location
on the command line.</p>"));
	string title = UI(_("System Profile Location"));
	UI::OpenDialog(`opt( `decorated ),
		       `HBox(
			     `HWeight(50, `RichText( helptext )),
			     `HStretch(),
			     `HSpacing(1),
			     `HWeight(50,
				      `VBox(
					    `Heading( title),
					    `VSpacing(1),
					    `VStretch(),
					    `Left(`ComboBox(`id(`protocol), `opt(`notify), _("&Protocol"), protocols )),
					    `Left(`TextEntry(`id(`server), _("&Server or Device:"), ProfileLocation::host)),
					    `Left(`TextEntry(`id(`Path), _("Pa&th:"), ProfileLocation::filepath)),
					    `VSpacing(1),
					    `VStretch(),
					    `HBox(
						  `PushButton(`id(`retry), `opt(`default),  RetryButtonLabel()   ),
						  `PushButton(`id(`abort),  AbortButtonLabel() )
						  )
					    ))
			     )
		       );

	any ret = "";
	string server = "";
	string Path = "";

	if ( ProfileLocation::scheme == "file" || ProfileLocation::scheme  == "floppy" || ProfileLocation::scheme == "cdrom")
	{
	    UI::ChangeWidget(`id(`server), `Enabled, false);
	    UI::SetFocus(`id(`Path));
	}
	else
	{
	    UI::SetFocus(`id(`server));
	}

	
	repeat {
	    ret = UI::UserInput();
	 
	    
	    if (ret == `abort)
	    {
		if (CallFunction(`inst_confirm_abort(`painless)))
		    return `abort;
		else
		    continue;
	    }
	    
	    string protocol =  UI::QueryWidget(`id(`protocol), `Value );
	 
	    if (
		     protocol == "nfs" ||
		     protocol == "tftp" ||		    
		     protocol == "http" ||
		     protocol == "device"
		     )
	    {
		UI::ChangeWidget(`id(`server), `Enabled, true);
		ProfileLocation::scheme = tolower(protocol);
	    }
	    else if (protocol == "file" || protocol == "floppy")
	    {
		ProfileLocation::scheme = tolower(protocol);
		UI::ChangeWidget(`id(`server), `Enabled, false);
	    }

	    
	    server = UI::QueryWidget(`id(`server), `Value );
	    Path = UI::QueryWidget(`id(`Path), `Value );
	} until (ret == `retry  || ret == `abort);

	ProfileLocation::host		= server;
	ProfileLocation::filepath 	= Path;

	UI::CloseDialog();
	return `next;
    }


    
    global define void StdErrLog( string stderr) ``{
	UI::OpenDialog(
		       `opt( `decorated ),
		       `VBox(
			     `VSpacing(0.5),
			     `HSpacing(50),
			     `HBox (
				    `HSpacing(0.5),
				    `LogView(`id(`log),  ErrorMsg()  , 10, 100 ),				    
				    `HSpacing(0.5)
				    ),
			     `VSpacing(0.2),
			     `PushButton( `id(`ok), `opt(`default), OKButtonLabel() ),
			     `VSpacing(0.5)
			     )
		       );

	UI::ChangeWidget(`id(`log),`Value, stderr);
	UI::UserInput();
	UI::CloseDialog();
	
    };
    
}
