/**
 * File:	include/autoinstall/general_dialogs.ycp
 * Package:	Auto-installation
 * Summary:	General Settings
 * Author:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{
    textdomain "autoinst";
    import "GetInstArgs";


    /**
     * Mouse
     * @return symbol
     */
    define symbol MouseDialog() ``{

        // create the wizard dialog
        //
        Wizard::CreateDialog();
        any result = WFM::CallFunction( "inst_mouse", [ GetInstArgs::Buttons(true,true) ] );
        return (symbol)result;
    }

    /**
     * Main dialog
     * @return symbol
     */
    define  symbol ModeDialog() ``{


        map mode		= AutoinstGeneral::mode;
        map signature_handling = AutoinstGeneral::signature_handling;
        boolean confirm	= mode["confirm"]:true;
        boolean second_stage	= mode["second_stage"]:true;
        boolean halt            = mode["halt"]:false;

        boolean accept_unsigned_file = signature_handling["accept_unsigned_file"]:false;
        boolean accept_file_without_checksum = signature_handling["accept_file_without_checksum"]:false;
        boolean accept_verification_failed = signature_handling["accept_verification_failed"]:false;
        boolean accept_unknown_gpg_key = signature_handling["accept_unknown_gpg_key"]:false;
        boolean import_gpg_key = signature_handling["import_gpg_key"]:false;

        term contents =
            `HVSquash(
                 `VBox(
                       `Left(`CheckBox(`id(`confirm), _("Con&firm installation?"), confirm)),
                       `Left(`CheckBox(`id(`second_stage), _("AutoYaST Second Stage"), second_stage)),
                       `Left(`CheckBox(`id(`halt), _("Turn off the machine after first stage"), halt)),
                       `Left(`Label( _("Signature Handling") )),
                       `Left(`CheckBox(`id(`accept_unsigned_file), _("Accept &unsigned files"), accept_unsigned_file)),
                       `Left(`CheckBox(`id(`accept_file_without_checksum), _("Accept files without a &checksum"), accept_file_without_checksum)),
                       `Left(`CheckBox(`id(`accept_verification_failed), _("Accept failed &verifications"), accept_verification_failed)),
                       `Left(`CheckBox(`id(`accept_unknown_gpg_key), _("Accept unknown &GPG Keys"), accept_unknown_gpg_key)),
                       `Left(`CheckBox(`id(`import_gpg_key), _("Import &new GPG Keys"),import_gpg_key))
                       )
                 );

        string help_text = _("<P>
The options in this dialog control the behavior of the AutoYaST during
automatic installation.
</P>
");
        help_text = help_text + _("<P>
The installation confirmation option is selected by default
to avoid unwanted installation. It stops the system
during installation and shows a summary of requested operations in the
usual proposal screen.  Uncheck this option to install automatically without interruption.
</P>
");
        help_text = help_text + _("<P>
If you turn off the second stage of AutoYaST, the installation continues in manual mode
after the first reboot (after package installation).
</P>
");

        help_text = help_text + _("<P>
For the signature handling, please read the AutoYaST documentation.
</P>
");

        Wizard::SetContents(_("Other Options"),
                            contents, help_text, true , true);

        Wizard::HideAbortButton();
        Wizard::SetNextButton(`next, Label::FinishButton() );

        any ret = nil;
        repeat {
            ret = UI::UserInput();
            if (ret == `next)
            {

                map m = $[];
                confirm = (boolean)UI::QueryWidget(`id(`confirm), `Value);
                second_stage = (boolean) UI::QueryWidget(`id(`second_stage), `Value);
                halt = (boolean) UI::QueryWidget(`id(`halt), `Value);

                mode["second_stage"] = second_stage;
                mode["confirm"] = confirm;
                mode["halt"] = halt;
                AutoinstGeneral::mode = mode;

                signature_handling["accept_unsigned_file"] = (boolean)UI::QueryWidget(`id(`accept_unsigned_file), `Value);
                signature_handling["accept_file_without_checksum"] = (boolean)UI::QueryWidget(`id(`accept_file_without_checksum), `Value);
                signature_handling["accept_verification_failed"] = (boolean)UI::QueryWidget(`id(`accept_verification_failed), `Value);
                signature_handling["accept_unknown_gpg_key"] = (boolean)UI::QueryWidget(`id(`accept_unknown_gpg_key), `Value);
                signature_handling["import_gpg_key"] = (boolean)UI::QueryWidget(`id(`import_gpg_key), `Value);
                AutoinstGeneral::signature_handling = signature_handling;
            }
        } until (ret == `next || ret == `back);
        return (symbol)ret;
    }



    /**
     * Dialog for General Settings
     * @return symbol
     */
    define symbol generalSequence ()
    {
        map dialogs = $[
                        "mouse"		: ``(MouseDialog()),
                        "mode"		: ``(ModeDialog())
        ];

        map sequence = $[
                         "ws_start"	: "mouse",
                         "mouse"	: $[
                                            `next	: "mode",
                                            `abort	: `abort
                         ],
                         "mode"	:         $[
                                            `next	: `finish
                                           ]
                        ];
        // Translators: dialog caption
        string caption = _("General Settings");
        term contents = `Label (_("Initializing ..."));

        Wizard::CreateDialog ();
        Wizard::SetContents ( caption,
                              contents,
                              "",
                              true,
                              true);


        any ret = Sequencer::Run(dialogs, sequence);

        Wizard::CloseDialog ();
        y2milestone(" generalSequence returns: %1", ret );
        return (symbol)ret;

    }



}
