/**
 * File:        clients/ask.ycp
 * Package:     Auto-installation
 * Author:      Uwe Gansert <ug@suse.de>
 * Summary:     ask for some values in the profile
 *
 * Changes:
 * $Id$
 */

{
    import "Profile";
    import "UI";
    import "Label";
    import "Stage";
    import "Popup";

    define boolean askDialog() {
        boolean mod = false;

        map<integer,list> dialogs = $[];
        list<integer> keys = [];
        integer dialog_cnt = 0;

        foreach( map ask, sort( map x, map y, Profile::current["general","ask-list"]:[], ``( x["element"]:0 < y["element"]:0 ) ), ``{
            if( (Stage::initial() && ask["stage"]:"initial" == "initial") ||
                (Stage::cont()    && ask["stage"]:"initial" == "cont")
            ) {
                dialogs[ask["dialog"]:dialog_cnt] = add( dialogs[ask["dialog"]:dialog_cnt]:[], ask );
                if( ! contains( keys, ask["dialog"]:dialog_cnt ) )
                    keys = add( keys, ask["dialog"]:dialog_cnt );
                if( ! haskey( ask, "dialog" ) )
                    dialog_cnt = dialog_cnt + 1;
            }
        });

        foreach( integer dialog_nr, sort( keys ), ``{
            string helptext = "";
            string title    = "";
            term dialog_term = `VBox();
            term help_term = `Empty();
            term title_term = `Empty();
            foreach( map ask, (list<map>)dialogs[dialog_nr]:[], ``{
                string pathStr  = ask["path"]:"";
                string type     = ask["type"]:"";
                string question = ask["question"]:pathStr;
                string frametitle = ask["frametitle"]:"";
                string entry_id = sformat("%1_%2",dialog_nr, ask["element"]:0);
                list< map<string,any> > s  = ask["selection"]:[];
                helptext = helptext + ask["help"]:"";
                title    = ask["title"]:"";
                mod = true;

                term dlg = `Dummy();
                if( type == "boolean" ) {
                    boolean on=(ask["default"]:nil=="true")?(true):(false);
                    if( frametitle != "" ) {
                        dlg = `Left( `Frame ( frametitle, `CheckBox(`id(entry_id), question,on ) ) );
                    } else {
                        dlg = `Left( `CheckBox(`id(entry_id), question,on ) );
                    }
                } else if( type == "symbol" ) {
                    list<any> dummy = [];
                    foreach( map<string,any> e, s, ``{
                        boolean on=(e["value"]:""==ask["default"]:nil)?(true):(false);
                        dummy = add( dummy, `item(`id(e["value"]:`none), e["label"]:"",on) );
                    });
                    if( frametitle != "" ) {
                        dlg = `Left( `Frame ( frametitle, `ComboBox( `id(entry_id), question, dummy ) ) );
                    } else {
                        dlg = `Left( `ComboBox( `id(entry_id), question, dummy ) );
                    }
                } else {
                    if( ask["password"]:false == true ) {
                        if( frametitle != "" ) {
                            dlg = `Left( `Frame ( frametitle, `VBox(
                                     `Password(`id(entry_id), question),
                                     `Password(`id(`pass2), question)
                                    ) ) );
                        } else {
                            dlg = `Left( `VBox(
                                    `Password(`id(entry_id), question),
                                    `Password(`id(`pass2), question)
                                    ) );
                        }
                    } else {
                        if( haskey( ask, "selection" ) ) {
                            list<any> dummy = [];
                            foreach( map<string,any> e, s, ``{
                                boolean on=(e["value"]:""==ask["default"]:nil)?(true):(false);
                                dummy = add( dummy, `item(`id(e["value"]:""), e["label"]:"",on) );
                            });
                            if( frametitle != "" ) {
                                dlg = `Left( `Frame ( frametitle, `ComboBox( `id(entry_id), question, dummy ) ) );
                            } else {
                                dlg = `Left( `ComboBox( `id(entry_id), question, dummy ) );
                            }
                        } else {
                            if( frametitle != "" ) {
                                dlg = `Left( `Frame ( frametitle, `TextEntry(`id(entry_id), question, ask["default"]:"" ) ) );
                            } else {
                                dlg = `Left( `TextEntry(`id(entry_id), question, ask["default"]:"" ) );
                            }
                        }
                    }
                }
                dialog_term = add( dialog_term, dlg );
                dialog_term = add( dialog_term, `VSpacing(1) );
            });
            if( helptext != "" )
                help_term = `HWeight(30, `RichText( helptext ));
            if( title != "" )
                title_term = `Heading( title );
            UI::OpenDialog(
                       `opt(`decorated  ),
                       `HBox(
                         help_term,
                         `HStretch(),
                         `HSpacing(1),
                         `HWeight(70,
                              `VBox(
                                title_term,
                                `VSpacing(1),
                                `VStretch(),
                                 dialog_term,
                                `VSpacing(1),
                                `VStretch(),
                                `HBox(
                                  `PushButton(`id(`ok),  Label::OKButton() )
                                  )
                                )
                              ),
                         `HSpacing(1),
                         `HStretch()
                         )
                       );
            while (true) {
                any ret = UI::UserInput();
                if( ret == `ok ) {
                    integer runAgain = 0;
                    foreach( map ask, (list<map>)dialogs[dialog_nr]:[], ``{
                        list<string> position = splitstring( ask["path"]:"", "," );
                        string file     = ask["file"]:"";
                        map script      = ask["script"]:$[];
                        string entry_id = sformat("%1_%2",dialog_nr, ask["element"]:0);
                        any val = UI::QueryWidget(`id(entry_id),  `Value);
                        if( ask["type"]:"string" == "integer" ) {
                            val = tointeger((string)val);
                        }
                        if( ask["password"]:false == true ) {
                            string pass2 = (string)UI::QueryWidget(`id(`pass2),  `Value);
                            if( pass2 != (string)val ) {
                                Popup::Error("The two passwords mismatch.");
                                continue;
                            }
                        }
                        y2milestone("question=%1 was answered with val=%2",ask["question"]:"", val);
                        list<any> pos = [];
                        foreach( string p, position, ``{
                            if( regexpmatch( p, "^[1,2,3,4,5,6,7,8,9,0]+$" ) ) {
                                integer index = tointeger(p);
                                pos = add(pos, index);
                            } else {
                                pos = add(pos, p);
                            }
                        });
                        if( ask["path"]:"" != "" )
                            Profile::current = Profile::setElementByList( pos, val, Profile::current );
                        if( file != "" ) {
                            if( ! SCR::Write (.target.string, file, sformat("%1",val)) )
                                y2milestone("writing answer to %1 failed",file);
                        }
                        if( script != $[] ) {
                            string scriptName = script["filename"]:"ask_script.sh";
                            string scriptPath = sformat("%1/%2", AutoinstConfig::tmpDir, scriptName );
                            SCR::Write(.target.string,  scriptPath, script["source"]:"echo 'no script'");
                            string debug = ( script["debug"]:true ? "-x" : "" );
                            string current_logdir = AutoinstConfig::logs_dir;
                            if( Stage::initial() ) {
                                current_logdir = sformat("%1/ask_scripts_log", AutoinstConfig::tmpDir);
                                SCR::Execute (.target.mkdir, current_logdir);
                            }
                            string executionString = "";
                            if( script["environment"]:false )
                                executionString = sformat("VAL=\"%5\" /bin/sh %1 %2 2&> %3/%4.log ", debug, scriptPath, current_logdir, scriptName, val);
                            else
                                executionString = sformat("/bin/sh %1 %2 2&> %3/%4.log ", debug, scriptPath, current_logdir, scriptName );
                            y2milestone("Script Execution command: %1", executionString );
                            runAgain = (integer)SCR::Execute (.target.bash, executionString);
                            if( script["rerun_on_error"]:false == false )
                                runAgain = 0;
                            boolean showFeedback = script["feedback"]:false;
                            string feedback = "";
                            if( showFeedback ) {
                                feedback = (string)SCR::Read(.target.string, current_logdir+"/"+scriptName+".log" );
                            }
                            if( size(feedback) > 0 ) {
                                Popup::LongText("", `RichText(`opt(`plainText), feedback), 50, 20 );
                            }
                        };
                    });
                    if( runAgain == 0 )
                        break;
                }
            }
            UI::CloseDialog();
        });
        return mod;
    }
}

