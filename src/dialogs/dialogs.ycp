/**
 * File:	include/autoinstall/dialogs.ycp
 * Module:	Auto-Installation Configuration System
 * Summary:	This module handles the configuration for auto-installation
 * Authors:	Anas Nashif <nashif@suse.de>
 * $Id$
 */
{
    textdomain "autoinst";

    import "Label";
    import "Popup";
    include "autoinstall/helps.ycp";


    /**
     * Preferences Dialog
     * @return symbol
     */
    define symbol Preferences()
	``{
	Wizard::SetScreenShotName ("autoyast-preferences");
	term contents =
	    `Top(
		 `VBox(
		       `VSquash(`HBox(
				      `TextEntry(`id(`repository), _("&Profile Repository:"), AutoinstConfig::Repository),
				      `VBox(
					    `VSpacing(),
					    `Bottom(`PushButton(`id(`opendir), _("&Select Directory")))
					    )
				      )
				),
		       `VSquash(`HBox(

				      `TextEntry(`id(`classdir), _("&Class directory:"), AutoinstConfig::classDir),
				      `VBox(
					    `VSpacing(),
					    `Bottom(`PushButton(`id(`openclassdir), _("Select &Directory")))
					    )
				      )
				),
		       `VSquash(
				`HBox(
				      `TextEntry(`id(`alicedir), _("&Alice Repository:"), AutoinstConfig::AliceRepository),
				      `VBox(
					    `VSpacing(),
					    `Bottom(`PushButton(`id(`openalicedir), _("Select Director&y")))
					    )
				      )
				)
		       )
		 );


	string help = _("<P>
Enter the directory where all <em>control files</em> should be stored in
the <b>Repository</b> field.</P>");

	help = help + _("<P>If you are using the classes feature
of Autoyast, also enter the class directory. This is where
all class files are stored.</p>
");

	help = help + _("<P>The <b>package repository</b> is where you have copied
the SuSE CDs. This directory must have a subdirectory called <b>suse</b> that
contains all the packages.</p>
");


	Wizard::SetContents(_("Preferences"),
			    contents, help , true, true);

	Wizard::ReplaceAbortButton(`Empty());
	UI::ChangeWidget(`id(`next), `Label, Label::NextButton());

	boolean changed = false;
	symbol ret = `none;
	repeat {
	    ret = (symbol)UI::UserInput();

	    string new_rep = (string)UI::QueryWidget(`id(`repository), `Value);
	    string new_classdir = (string)UI::QueryWidget(`id(`classdir), `Value);
	    string new_alicedir = (string)UI::QueryWidget(`id(`alicedir), `Value);

	    if (ret ==`opendir)
	    {
		new_rep = UI::AskForExistingDirectory(AutoinstConfig::Repository , _("Select Directory"));
		if (new_rep != "")
		{
		    UI::ChangeWidget(`id(`repository), `Value, new_rep);
		}
		continue;
	    }
	    else if (ret ==`openclassdir)
	    {
		new_classdir = UI::AskForExistingDirectory( AutoinstConfig::classDir, _("Select Directory"));
		if (new_classdir != "")
		{
		    UI::ChangeWidget(`id(`classdir), `Value, new_classdir);
		}
		continue;
	    }
	    else if (ret ==`openalicedir)
	    {
		new_alicedir = UI::AskForExistingDirectory( AutoinstConfig::AliceRepository , _("Select Directory") );
		if (new_alicedir != "")
		{
		    UI::ChangeWidget(`id(`alicedir), `Value, new_alicedir );
		}
		continue;
	    }
	    else if ( ret == `next)
	    {
		if (AutoinstConfig::Repository != new_rep)
		{
		    changed = true;
		    AutoinstConfig::Repository = new_rep;
		}
		if (AutoinstConfig::classDir != new_classdir)
		{
		    changed = true;
		    AutoinstConfig::classDir = new_classdir;
		}
		if ( AutoinstConfig::AliceRepository!= new_alicedir)
		{
		    changed = true;
		    AutoinstConfig::AliceRepository = new_alicedir;
		}
	    }

	    // FIXME	} until (ret == `back ||  ret == `next || contains(menuitems, ret));
	    } until (ret == `back ||  ret == `next);

	Wizard::RestoreScreenShotName ();
	if ( changed  )
	{
	    AutoinstConfig::Save();
	    changed =false;
	}
	return ret;
    }




    /**
     * Check validity of file name
     * @param string file name
     * @return 0 if valid, -1 if not.
     */
    define integer checkFileName (string name) ``{
        if (name != filterchars (name, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.-")
	    || size (name) > 127)
	{
	    return -1;
	}

        return 0;
    }


    /**
     * Return a message about invalid file names
     * @param -
     * @return message
     */
    define string invalidFileName() ``{
	return(_("Invalid file name.
Names can only contain letters, numbers, and underscore,
must begin with letter, and must be
127 characters long or less.
"));
    }


    /**
     * Popup for a new file name
     * @param string caption
     * @param string textentry
     * @return string new file name
     */
    define string NewFileName(string caption, string textentry)``{
	term con =
	    `HBox(
		  `HSpacing(1),
		  `VBox(
			`VSpacing(0.2),
			// Translators: popup dialog heading
			`Heading (caption),
			//  _("&New Profile Name") _("New Profile")
			// Translators: text entry label
			`Left (`TextEntry (`id (`newname), textentry, "")),

			`VSpacing(0.2),
			`HBox(`PushButton(`id(`ok), `opt(`default), Label::OKButton()),
			      `PushButton(`id(`cancel), Label::CancelButton())),
			`VSpacing(0.2)
			),
		  `HSpacing(1)
		  );

	UI::OpenDialog (`opt(`decorated), con);
	UI::SetFocus (`id (`newname));
	string f = "";
	any ret = nil;
	while (true)
	{
	    ret = UI::UserInput ();
	    if (ret == `cancel)
	    {
		break;
	    }
	    else if (ret == `ok)
	    {
		f = (string)UI::QueryWidget (`id (`newname), `Value);
		if (checkFileName(f) !=0 || f == "")
		{
		    Popup::Error(invalidFileName());
		    continue;
		}
		break;
	    }
	}

	UI::CloseDialog ();

	return (ret == `ok)? f : "";
    }

    /**
     * Clone running system
     * @return symbol
     */
    define symbol cloneSystem()``{
	import "AutoinstClone";
	import "Profile";

	// title
	string title = _("Create a Reference Control File");
	list items = AutoinstClone::createClonableList();
	term contents =
	    `VBox(
		  `MultiSelectionBox( `id(`baseres), _("Basic Resources (Check to Create  Settings):"),
				      [
				       `item(`id("partitioning"), _("Partitioning")),
				       `item(`id("bootloader"),_("Boot Loader")),
				       `item(`id("software"),_("Software"))
				       ]
				      ),
		  `VSpacing(1),
		  `MultiSelectionBox( `id(`res), _("Select Additional Resources:"),
				      items
				      )
		  );

	Wizard::SetContents(title,
			    contents, HELPS["clone"]:"", true, true);
	Wizard::ReplaceAbortButton(`Empty());

	UI::ChangeWidget(`id(`next), `Label, Label::CreateButton());
	symbol ret = `none;
	repeat
	    {
		ret = (symbol)UI::UserInput();
		if (ret ==`next)
		{
		    AutoinstClone::base = (list)UI::QueryWidget( `id(`baseres), `SelectedItems );
		    AutoinstClone::additional = (list)UI::QueryWidget( `id(`res), `SelectedItems );
                    Popup::ShowFeedback( _("Collecting system data..."), _("This may take a while..."));
		    AutoinstClone::Process();
		    Profile::changed = true;
                    Popup::ClearFeedback();

		}
	    } until (ret == `next || ret == `back);
	return ret;
    }

}
